// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: aggregator/v1/service.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BuildRouteRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BuildRouteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildRouteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildRouteRequestMultiError, or nil if none found.
func (m *BuildRouteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildRouteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRouteSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildRouteRequestValidationError{
					field:  "RouteSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildRouteRequestValidationError{
					field:  "RouteSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRouteSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildRouteRequestValidationError{
				field:  "RouteSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSignature()) < 1 {
		err := BuildRouteRequestValidationError{
			field:  "Signature",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Deadline

	// no validation rules for SlippageTolerance

	if utf8.RuneCountInString(m.GetTo()) < 1 {
		err := BuildRouteRequestValidationError{
			field:  "To",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Referral

	// no validation rules for Source

	if len(errors) > 0 {
		return BuildRouteRequestMultiError(errors)
	}

	return nil
}

// BuildRouteRequestMultiError is an error wrapping multiple validation errors
// returned by BuildRouteRequest.ValidateAll() if the designated constraints
// aren't met.
type BuildRouteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildRouteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildRouteRequestMultiError) AllErrors() []error { return m }

// BuildRouteRequestValidationError is the validation error returned by
// BuildRouteRequest.Validate if the designated constraints aren't met.
type BuildRouteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildRouteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildRouteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildRouteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildRouteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildRouteRequestValidationError) ErrorName() string {
	return "BuildRouteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BuildRouteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildRouteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildRouteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildRouteRequestValidationError{}

// Validate checks the field values on BuildRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BuildRouteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildRouteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildRouteResponseMultiError, or nil if none found.
func (m *BuildRouteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildRouteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BuildRouteResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BuildRouteResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BuildRouteResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BuildRouteResponseMultiError(errors)
	}

	return nil
}

// BuildRouteResponseMultiError is an error wrapping multiple validation errors
// returned by BuildRouteResponse.ValidateAll() if the designated constraints
// aren't met.
type BuildRouteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildRouteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildRouteResponseMultiError) AllErrors() []error { return m }

// BuildRouteResponseValidationError is the validation error returned by
// BuildRouteResponse.Validate if the designated constraints aren't met.
type BuildRouteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildRouteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildRouteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildRouteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildRouteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildRouteResponseValidationError) ErrorName() string {
	return "BuildRouteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BuildRouteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildRouteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildRouteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildRouteResponseValidationError{}

// Validate checks the field values on BuildRouteResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BuildRouteResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BuildRouteResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BuildRouteResultMultiError, or nil if none found.
func (m *BuildRouteResult) ValidateAll() error {
	return m.validate(true)
}

func (m *BuildRouteResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	// no validation rules for RouterAddress

	if len(errors) > 0 {
		return BuildRouteResultMultiError(errors)
	}

	return nil
}

// BuildRouteResultMultiError is an error wrapping multiple validation errors
// returned by BuildRouteResult.ValidateAll() if the designated constraints
// aren't met.
type BuildRouteResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BuildRouteResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BuildRouteResultMultiError) AllErrors() []error { return m }

// BuildRouteResultValidationError is the validation error returned by
// BuildRouteResult.Validate if the designated constraints aren't met.
type BuildRouteResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BuildRouteResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BuildRouteResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BuildRouteResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BuildRouteResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BuildRouteResultValidationError) ErrorName() string { return "BuildRouteResultValidationError" }

// Error satisfies the builtin error interface
func (e BuildRouteResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBuildRouteResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BuildRouteResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BuildRouteResultValidationError{}

// Validate checks the field values on FindRoutesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindRoutesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoutesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoutesRequestMultiError, or nil if none found.
func (m *FindRoutesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoutesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTokenIn()) < 1 {
		err := FindRoutesRequestValidationError{
			field:  "TokenIn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTokenOut()) < 1 {
		err := FindRoutesRequestValidationError{
			field:  "TokenOut",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAmountIn()) < 1 {
		err := FindRoutesRequestValidationError{
			field:  "AmountIn",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SaveGas

	// no validation rules for GasInclude

	// no validation rules for GasPrice

	if all {
		switch v := interface{}(m.GetExtraFee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRoutesRequestValidationError{
					field:  "ExtraFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRoutesRequestValidationError{
					field:  "ExtraFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraFee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRoutesRequestValidationError{
				field:  "ExtraFee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRoutesRequestMultiError(errors)
	}

	return nil
}

// FindRoutesRequestMultiError is an error wrapping multiple validation errors
// returned by FindRoutesRequest.ValidateAll() if the designated constraints
// aren't met.
type FindRoutesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoutesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoutesRequestMultiError) AllErrors() []error { return m }

// FindRoutesRequestValidationError is the validation error returned by
// FindRoutesRequest.Validate if the designated constraints aren't met.
type FindRoutesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoutesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoutesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoutesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoutesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoutesRequestValidationError) ErrorName() string {
	return "FindRoutesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FindRoutesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoutesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoutesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoutesRequestValidationError{}

// Validate checks the field values on ExtraFee with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraFee) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraFee with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraFeeMultiError, or nil
// if none found.
func (m *ExtraFee) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraFee) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FeeAmount

	// no validation rules for ChargeFeeBy

	// no validation rules for IsInBps

	// no validation rules for FeeReceiver

	if len(errors) > 0 {
		return ExtraFeeMultiError(errors)
	}

	return nil
}

// ExtraFeeMultiError is an error wrapping multiple validation errors returned
// by ExtraFee.ValidateAll() if the designated constraints aren't met.
type ExtraFeeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraFeeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraFeeMultiError) AllErrors() []error { return m }

// ExtraFeeValidationError is the validation error returned by
// ExtraFee.Validate if the designated constraints aren't met.
type ExtraFeeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraFeeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraFeeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraFeeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraFeeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraFeeValidationError) ErrorName() string { return "ExtraFeeValidationError" }

// Error satisfies the builtin error interface
func (e ExtraFeeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraFee.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraFeeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraFeeValidationError{}

// Validate checks the field values on FindRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FindRoutesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoutesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoutesResponseMultiError, or nil if none found.
func (m *FindRoutesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoutesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRoutesResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRoutesResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRoutesResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FindRoutesResponseMultiError(errors)
	}

	return nil
}

// FindRoutesResponseMultiError is an error wrapping multiple validation errors
// returned by FindRoutesResponse.ValidateAll() if the designated constraints
// aren't met.
type FindRoutesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoutesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoutesResponseMultiError) AllErrors() []error { return m }

// FindRoutesResponseValidationError is the validation error returned by
// FindRoutesResponse.Validate if the designated constraints aren't met.
type FindRoutesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoutesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoutesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoutesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoutesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoutesResponseValidationError) ErrorName() string {
	return "FindRoutesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FindRoutesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoutesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoutesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoutesResponseValidationError{}

// Validate checks the field values on FindRoutesResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FindRoutesResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FindRoutesResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FindRoutesResultMultiError, or nil if none found.
func (m *FindRoutesResult) ValidateAll() error {
	return m.validate(true)
}

func (m *FindRoutesResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRouteSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FindRoutesResultValidationError{
					field:  "RouteSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FindRoutesResultValidationError{
					field:  "RouteSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRouteSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FindRoutesResultValidationError{
				field:  "RouteSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Signature

	// no validation rules for RouteAddress

	if len(errors) > 0 {
		return FindRoutesResultMultiError(errors)
	}

	return nil
}

// FindRoutesResultMultiError is an error wrapping multiple validation errors
// returned by FindRoutesResult.ValidateAll() if the designated constraints
// aren't met.
type FindRoutesResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FindRoutesResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FindRoutesResultMultiError) AllErrors() []error { return m }

// FindRoutesResultValidationError is the validation error returned by
// FindRoutesResult.Validate if the designated constraints aren't met.
type FindRoutesResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FindRoutesResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FindRoutesResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FindRoutesResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FindRoutesResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FindRoutesResultValidationError) ErrorName() string { return "FindRoutesResultValidationError" }

// Error satisfies the builtin error interface
func (e FindRoutesResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFindRoutesResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FindRoutesResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FindRoutesResultValidationError{}

// Validate checks the field values on RouteSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RouteSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouteSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RouteSummaryMultiError, or
// nil if none found.
func (m *RouteSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *RouteSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenIn

	// no validation rules for AmountIn

	// no validation rules for AmountInUsd

	// no validation rules for TokenInMarketPriceAvailable

	// no validation rules for TokenOut

	// no validation rules for AmountOut

	// no validation rules for AmountOutUsd

	// no validation rules for TokenOutMarketPriceAvailable

	// no validation rules for Gas

	// no validation rules for GasPrice

	// no validation rules for GasUsd

	if all {
		switch v := interface{}(m.GetExtraFee()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouteSummaryValidationError{
					field:  "ExtraFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouteSummaryValidationError{
					field:  "ExtraFee",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraFee()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouteSummaryValidationError{
				field:  "ExtraFee",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoute() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RouteSummaryValidationError{
						field:  fmt.Sprintf("Route[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RouteSummaryValidationError{
						field:  fmt.Sprintf("Route[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RouteSummaryValidationError{
					field:  fmt.Sprintf("Route[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RouteSummaryMultiError(errors)
	}

	return nil
}

// RouteSummaryMultiError is an error wrapping multiple validation errors
// returned by RouteSummary.ValidateAll() if the designated constraints aren't met.
type RouteSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouteSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouteSummaryMultiError) AllErrors() []error { return m }

// RouteSummaryValidationError is the validation error returned by
// RouteSummary.Validate if the designated constraints aren't met.
type RouteSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouteSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouteSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouteSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouteSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouteSummaryValidationError) ErrorName() string { return "RouteSummaryValidationError" }

// Error satisfies the builtin error interface
func (e RouteSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouteSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouteSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouteSummaryValidationError{}

// Validate checks the field values on Path with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Path) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Path with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PathMultiError, or nil if none found.
func (m *Path) ValidateAll() error {
	return m.validate(true)
}

func (m *Path) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSwaps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PathValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PathValidationError{
						field:  fmt.Sprintf("Swaps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PathValidationError{
					field:  fmt.Sprintf("Swaps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PathMultiError(errors)
	}

	return nil
}

// PathMultiError is an error wrapping multiple validation errors returned by
// Path.ValidateAll() if the designated constraints aren't met.
type PathMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PathMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PathMultiError) AllErrors() []error { return m }

// PathValidationError is the validation error returned by Path.Validate if the
// designated constraints aren't met.
type PathValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PathValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PathValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PathValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PathValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PathValidationError) ErrorName() string { return "PathValidationError" }

// Error satisfies the builtin error interface
func (e PathValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPath.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PathValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PathValidationError{}

// Validate checks the field values on Swap with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Swap) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Swap with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SwapMultiError, or nil if none found.
func (m *Swap) ValidateAll() error {
	return m.validate(true)
}

func (m *Swap) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Pool

	// no validation rules for TokenIn

	// no validation rules for TokenOut

	// no validation rules for LimitReturnAmount

	// no validation rules for SwapAmount

	// no validation rules for AmountOut

	// no validation rules for Exchange

	// no validation rules for PoolLength

	// no validation rules for PoolType

	// no validation rules for Extra

	if len(errors) > 0 {
		return SwapMultiError(errors)
	}

	return nil
}

// SwapMultiError is an error wrapping multiple validation errors returned by
// Swap.ValidateAll() if the designated constraints aren't met.
type SwapMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SwapMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SwapMultiError) AllErrors() []error { return m }

// SwapValidationError is the validation error returned by Swap.Validate if the
// designated constraints aren't met.
type SwapValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapValidationError) ErrorName() string { return "SwapValidationError" }

// Error satisfies the builtin error interface
func (e SwapValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwap.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapValidationError{}
