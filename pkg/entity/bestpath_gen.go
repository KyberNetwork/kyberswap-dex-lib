package entity

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MinimalPath) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Pools")
		return
	}
	if cap(z.Pools) >= int(zb0002) {
		z.Pools = (z.Pools)[:zb0002]
	} else {
		z.Pools = make([]string, zb0002)
	}
	for za0001 := range z.Pools {
		z.Pools[za0001], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Pools", za0001)
			return
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	if cap(z.Tokens) >= int(zb0003) {
		z.Tokens = (z.Tokens)[:zb0003]
	} else {
		z.Tokens = make([]string, zb0003)
	}
	for za0002 := range z.Tokens {
		z.Tokens[za0002], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Tokens", za0002)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MinimalPath) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Pools)))
	if err != nil {
		err = msgp.WrapError(err, "Pools")
		return
	}
	for za0001 := range z.Pools {
		err = en.WriteString(z.Pools[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Pools", za0001)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.Tokens)))
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	for za0002 := range z.Tokens {
		err = en.WriteString(z.Tokens[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Tokens", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MinimalPath) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Pools)))
	for za0001 := range z.Pools {
		o = msgp.AppendString(o, z.Pools[za0001])
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.Tokens)))
	for za0002 := range z.Tokens {
		o = msgp.AppendString(o, z.Tokens[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MinimalPath) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pools")
		return
	}
	if cap(z.Pools) >= int(zb0002) {
		z.Pools = (z.Pools)[:zb0002]
	} else {
		z.Pools = make([]string, zb0002)
	}
	for za0001 := range z.Pools {
		z.Pools[za0001], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Pools", za0001)
			return
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	if cap(z.Tokens) >= int(zb0003) {
		z.Tokens = (z.Tokens)[:zb0003]
	} else {
		z.Tokens = make([]string, zb0003)
	}
	for za0002 := range z.Tokens {
		z.Tokens[za0002], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Tokens", za0002)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MinimalPath) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Pools {
		s += msgp.StringPrefixSize + len(z.Pools[za0001])
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.Tokens {
		s += msgp.StringPrefixSize + len(z.Tokens[za0002])
	}
	return
}
