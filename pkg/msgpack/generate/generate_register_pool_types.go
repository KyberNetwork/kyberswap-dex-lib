package main

import (
	"bufio"
	"fmt"
	"io"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"strings"
)

const (
	poolSimFileName    = "pool_simulator.go"
	moduleName         = "github.com/KyberNetwork/kyberswap-dex-lib"
	regularPoolSimName = "PoolSimulator"
)

var (
	irregularPoolSimNameByPackageName = map[string]string{}
)

func main() {
	var paths []string

	if dir := findGoModDirInParents(); dir != "" {
		for _, path := range findAllPoolSimulatorSourceFiles(dir) {
			path = strings.TrimPrefix(path, dir+"/")
			paths = append(paths, path)
		}
	}

	if len(paths) == 0 {
		return
	}

	pkgNames := getPackageNamesFromSourceFiles(paths)
	importPaths := getPackageImportPathsFromSourceFiles(paths)

	outFile, err := os.Create("./register_pool_types.gen.go")
	if err != nil {
		log.Fatalf("could not create dispatch_gen.go: %s", err)
	}
	defer func(outFile *os.File) {
		_ = outFile.Close()
	}(outFile)

	outFileBuf := bufio.NewWriter(outFile)
	defer func(outFileBuf *bufio.Writer) {
		_ = outFileBuf.Flush()
	}(outFileBuf)

	emitImports(outFileBuf, pkgNames, importPaths)
	emitf(outFileBuf, "\n")

	emitf(outFileBuf, "func init() {\n")
	for _, pkgName := range pkgNames {
		poolSimName := regularPoolSimName
		if name, ok := irregularPoolSimNameByPackageName[pkgName]; ok {
			poolSimName = name
		}
		emitf(outFileBuf, "\tmsgpack.RegisterConcreteType(&%s.%s{})\n", pkgName, poolSimName)
	}
	emitf(outFileBuf, "}\n")
}

func emitImports(outFileBuf io.Writer, pkgNames, importPaths []string) {
	emitf(outFileBuf, "package msgpack\n")
	emitf(outFileBuf, "\n")

	emitf(outFileBuf, "// Code generated by %s/pkg/msgpack/generate DO NOT EDIT.\n", moduleName)
	emitf(outFileBuf, "//go:generate go run ./generate\n")
	emitf(outFileBuf, "\n")

	emitf(outFileBuf, "import (\n")
	emitf(outFileBuf, "\t\"github.com/KyberNetwork/msgpack/v5\"\n")
	emitf(outFileBuf, "\n")
	for i, dexName := range pkgNames {
		emitf(outFileBuf, "\t%s \"%s\"\n", dexName, importPaths[i])
	}
	emitf(outFileBuf, ")\n")
}

func emitf(w io.Writer, format string, a ...any) {
	_, _ = fmt.Fprintf(w, format, a...)
}

func findGoModDirInParents() string {
	var (
		hasGoMod = false
		cwd, _   = os.Getwd()
		visited  = make(map[string]struct{}) // to eliminate cycle
	)
	for {
		if _, ok := visited[cwd]; ok {
			break
		}
		visited[cwd] = struct{}{}
		entries, err := os.ReadDir(cwd)
		if err != nil {
			break
		}
		for _, entry := range entries {
			if entry.Name() == "go.mod" {
				hasGoMod = true
				break
			}
		}
		if hasGoMod {
			break
		}
		cwd = filepath.Join(cwd, "..")
		cwd, err = filepath.Abs(cwd)
		if err != nil {
			break
		}
	}
	if hasGoMod {
		return cwd
	}
	return ""
}

func findAllPoolSimulatorSourceFiles(rootDir string) (paths []string) {
	if err := filepath.Walk(rootDir, func(path string, info fs.FileInfo, err error) error {
		if err != nil || info.IsDir() || !strings.HasSuffix(path, "/"+poolSimFileName) {
			return err
		}
		b, err := os.ReadFile(path)
		if err != nil || !strings.Contains(string(b), regularPoolSimName+" ") {
			return err
		}
		paths = append(paths, path)
		return nil
	}); err != nil {
		panic(err)
	}
	return paths
}

func getPackageNamesFromSourceFiles(sourcePaths []string) []string {
	importNames := make([]string, len(sourcePaths))
	for i, path := range sourcePaths {
		dexName := strings.TrimSuffix(path, "/"+poolSimFileName)
		dexName = strings.ReplaceAll(dexName, "-", "")
		dexName = strings.ReplaceAll(dexName, "/", "_")
		importNames[i] = dexName
	}
	return importNames
}

func getPackageImportPathsFromSourceFiles(sourcePaths []string) []string {
	paths := make([]string, len(sourcePaths))
	for i, path := range sourcePaths {
		importPath := filepath.Join(moduleName, strings.TrimSuffix(path, "/"+poolSimFileName))
		paths[i] = importPath
	}
	return paths
}
