package uniswapv3mspg

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/ethereum/go-ethereum/common"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BaseCurrency) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.isNative, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "isNative")
		return
	}
	z.isToken, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "isToken")
		return
	}
	z.chainId, err = dc.ReadUint()
	if err != nil {
		err = msgp.WrapError(err, "chainId")
		return
	}
	z.decimals, err = dc.ReadUint()
	if err != nil {
		err = msgp.WrapError(err, "decimals")
		return
	}
	z.symbol, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "symbol")
		return
	}
	z.name, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "name")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BaseCurrency) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x96)
	if err != nil {
		return
	}
	err = en.WriteBool(z.isNative)
	if err != nil {
		err = msgp.WrapError(err, "isNative")
		return
	}
	err = en.WriteBool(z.isToken)
	if err != nil {
		err = msgp.WrapError(err, "isToken")
		return
	}
	err = en.WriteUint(z.chainId)
	if err != nil {
		err = msgp.WrapError(err, "chainId")
		return
	}
	err = en.WriteUint(z.decimals)
	if err != nil {
		err = msgp.WrapError(err, "decimals")
		return
	}
	err = en.WriteString(z.symbol)
	if err != nil {
		err = msgp.WrapError(err, "symbol")
		return
	}
	err = en.WriteString(z.name)
	if err != nil {
		err = msgp.WrapError(err, "name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BaseCurrency) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 6
	o = append(o, 0x96)
	o = msgp.AppendBool(o, z.isNative)
	o = msgp.AppendBool(o, z.isToken)
	o = msgp.AppendUint(o, z.chainId)
	o = msgp.AppendUint(o, z.decimals)
	o = msgp.AppendString(o, z.symbol)
	o = msgp.AppendString(o, z.name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BaseCurrency) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.isNative, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "isNative")
		return
	}
	z.isToken, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "isToken")
		return
	}
	z.chainId, bts, err = msgp.ReadUintBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "chainId")
		return
	}
	z.decimals, bts, err = msgp.ReadUintBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "decimals")
		return
	}
	z.symbol, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "symbol")
		return
	}
	z.name, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "name")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BaseCurrency) Msgsize() (s int) {
	s = 1 + msgp.BoolSize + msgp.BoolSize + msgp.UintSize + msgp.UintSize + msgp.StringPrefixSize + len(z.symbol) + msgp.StringPrefixSize + len(z.name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CurrencyEnum) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Ether")
			return
		}
		z.Ether = nil
	} else {
		if z.Ether == nil {
			z.Ether = new(Ether)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Ether")
			return
		}
		if zb0002 != 1 {
			err = msgp.ArrayError{Wanted: 1, Got: zb0002}
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "Ether", "BaseCurrency")
				return
			}
			z.Ether.BaseCurrency = nil
		} else {
			if z.Ether.BaseCurrency == nil {
				z.Ether.BaseCurrency = new(BaseCurrency)
			}
			err = z.Ether.BaseCurrency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Ether", "BaseCurrency")
				return
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Native")
			return
		}
		z.Native = nil
	} else {
		if z.Native == nil {
			z.Native = new(Native)
		}
		err = z.Native.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Native")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token")
			return
		}
		z.Token = nil
	} else {
		if z.Token == nil {
			z.Token = new(Token)
		}
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Token")
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "Token", "BaseCurrency")
				return
			}
			z.Token.BaseCurrency = nil
		} else {
			if z.Token.BaseCurrency == nil {
				z.Token.BaseCurrency = new(BaseCurrency)
			}
			err = z.Token.BaseCurrency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Token", "BaseCurrency")
				return
			}
		}
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes((common.Address).Bytes(z.Token.Address))
			if err != nil {
				err = msgp.WrapError(err, "Token", "Address")
				return
			}
			z.Token.Address = common.BytesToAddress(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Base")
			return
		}
		z.Base = nil
	} else {
		if z.Base == nil {
			z.Base = new(BaseCurrency)
		}
		err = z.Base.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Base")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CurrencyEnum) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	if z.Ether == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 1
		err = en.Append(0x91)
		if err != nil {
			return
		}
		if z.Ether.BaseCurrency == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Ether.BaseCurrency.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Ether", "BaseCurrency")
				return
			}
		}
	}
	if z.Native == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Native.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Native")
			return
		}
	}
	if z.Token == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		if z.Token.BaseCurrency == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Token.BaseCurrency.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Token", "BaseCurrency")
				return
			}
		}
		err = en.WriteBytes((common.Address).Bytes(z.Token.Address))
		if err != nil {
			err = msgp.WrapError(err, "Token", "Address")
			return
		}
	}
	if z.Base == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Base.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Base")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CurrencyEnum) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	if z.Ether == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 1
		o = append(o, 0x91)
		if z.Ether.BaseCurrency == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Ether.BaseCurrency.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Ether", "BaseCurrency")
				return
			}
		}
	}
	if z.Native == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Native.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Native")
			return
		}
	}
	if z.Token == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		if z.Token.BaseCurrency == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Token.BaseCurrency.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Token", "BaseCurrency")
				return
			}
		}
		o = msgp.AppendBytes(o, (common.Address).Bytes(z.Token.Address))
	}
	if z.Base == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Base.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Base")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CurrencyEnum) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Ether = nil
	} else {
		if z.Ether == nil {
			z.Ether = new(Ether)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Ether")
			return
		}
		if zb0002 != 1 {
			err = msgp.ArrayError{Wanted: 1, Got: zb0002}
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Ether.BaseCurrency = nil
		} else {
			if z.Ether.BaseCurrency == nil {
				z.Ether.BaseCurrency = new(BaseCurrency)
			}
			bts, err = z.Ether.BaseCurrency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ether", "BaseCurrency")
				return
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Native = nil
	} else {
		if z.Native == nil {
			z.Native = new(Native)
		}
		bts, err = z.Native.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Native")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token = nil
	} else {
		if z.Token == nil {
			z.Token = new(Token)
		}
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Token")
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Token.BaseCurrency = nil
		} else {
			if z.Token.BaseCurrency == nil {
				z.Token.BaseCurrency = new(BaseCurrency)
			}
			bts, err = z.Token.BaseCurrency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Token", "BaseCurrency")
				return
			}
		}
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, (common.Address).Bytes(z.Token.Address))
			if err != nil {
				err = msgp.WrapError(err, "Token", "Address")
				return
			}
			z.Token.Address = common.BytesToAddress(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Base = nil
	} else {
		if z.Base == nil {
			z.Base = new(BaseCurrency)
		}
		bts, err = z.Base.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Base")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CurrencyEnum) Msgsize() (s int) {
	s = 1
	if z.Ether == nil {
		s += msgp.NilSize
	} else {
		s += 1
		if z.Ether.BaseCurrency == nil {
			s += msgp.NilSize
		} else {
			s += z.Ether.BaseCurrency.Msgsize()
		}
	}
	if z.Native == nil {
		s += msgp.NilSize
	} else {
		s += z.Native.Msgsize()
	}
	if z.Token == nil {
		s += msgp.NilSize
	} else {
		s += 1
		if z.Token.BaseCurrency == nil {
			s += msgp.NilSize
		} else {
			s += z.Token.BaseCurrency.Msgsize()
		}
		s += msgp.BytesPrefixSize + len((common.Address).Bytes(z.Token.Address))
	}
	if z.Base == nil {
		s += msgp.NilSize
	} else {
		s += z.Base.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Ether) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
		z.BaseCurrency = nil
	} else {
		if z.BaseCurrency == nil {
			z.BaseCurrency = new(BaseCurrency)
		}
		err = z.BaseCurrency.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Ether) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.BaseCurrency == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.BaseCurrency.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Ether) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.BaseCurrency == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.BaseCurrency.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Ether) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BaseCurrency = nil
	} else {
		if z.BaseCurrency == nil {
			z.BaseCurrency = new(BaseCurrency)
		}
		bts, err = z.BaseCurrency.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Ether) Msgsize() (s int) {
	s = 1
	if z.BaseCurrency == nil {
		s += msgp.NilSize
	} else {
		s += z.BaseCurrency.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FeeAmount) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint64
		zb0001, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FeeAmount(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FeeAmount) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint64(uint64(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FeeAmount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint64(o, uint64(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FeeAmount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint64
		zb0001, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FeeAmount(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FeeAmount) Msgsize() (s int) {
	s = msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Fraction) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Numerator")
			return
		}
		z.Numerator = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Numerator))
			if err != nil {
				err = msgp.WrapError(err, "Numerator")
				return
			}
			z.Numerator = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Denominator")
			return
		}
		z.Denominator = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Denominator))
			if err != nil {
				err = msgp.WrapError(err, "Denominator")
				return
			}
			z.Denominator = msgpencode.DecodeInt(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Fraction) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Numerator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Numerator))
		if err != nil {
			err = msgp.WrapError(err, "Numerator")
			return
		}
	}
	if z.Denominator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Denominator))
		if err != nil {
			err = msgp.WrapError(err, "Denominator")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Fraction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Numerator == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Numerator))
	}
	if z.Denominator == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Denominator))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Fraction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Numerator = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Numerator))
			if err != nil {
				err = msgp.WrapError(err, "Numerator")
				return
			}
			z.Numerator = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Denominator = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Denominator))
			if err != nil {
				err = msgp.WrapError(err, "Denominator")
				return
			}
			z.Denominator = msgpencode.DecodeInt(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Fraction) Msgsize() (s int) {
	s = 1
	if z.Numerator == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Numerator))
	}
	if z.Denominator == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Denominator))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Native) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
		z.BaseCurrency = nil
	} else {
		if z.BaseCurrency == nil {
			z.BaseCurrency = new(BaseCurrency)
		}
		err = z.BaseCurrency.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "wrapped")
			return
		}
		z.wrapped = nil
	} else {
		if z.wrapped == nil {
			z.wrapped = new(Token)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "wrapped")
			return
		}
		if zb0002 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0002}
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "BaseCurrency")
				return
			}
			z.wrapped.BaseCurrency = nil
		} else {
			if z.wrapped.BaseCurrency == nil {
				z.wrapped.BaseCurrency = new(BaseCurrency)
			}
			err = z.wrapped.BaseCurrency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "BaseCurrency")
				return
			}
		}
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes((common.Address).Bytes(z.wrapped.Address))
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "Address")
				return
			}
			z.wrapped.Address = common.BytesToAddress(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Native) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.BaseCurrency == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.BaseCurrency.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	if z.wrapped == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		if z.wrapped.BaseCurrency == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.wrapped.BaseCurrency.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "BaseCurrency")
				return
			}
		}
		err = en.WriteBytes((common.Address).Bytes(z.wrapped.Address))
		if err != nil {
			err = msgp.WrapError(err, "wrapped", "Address")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Native) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.BaseCurrency == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.BaseCurrency.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	if z.wrapped == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		if z.wrapped.BaseCurrency == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.wrapped.BaseCurrency.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "BaseCurrency")
				return
			}
		}
		o = msgp.AppendBytes(o, (common.Address).Bytes(z.wrapped.Address))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Native) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BaseCurrency = nil
	} else {
		if z.BaseCurrency == nil {
			z.BaseCurrency = new(BaseCurrency)
		}
		bts, err = z.BaseCurrency.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.wrapped = nil
	} else {
		if z.wrapped == nil {
			z.wrapped = new(Token)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "wrapped")
			return
		}
		if zb0002 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0002}
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.wrapped.BaseCurrency = nil
		} else {
			if z.wrapped.BaseCurrency == nil {
				z.wrapped.BaseCurrency = new(BaseCurrency)
			}
			bts, err = z.wrapped.BaseCurrency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "BaseCurrency")
				return
			}
		}
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, (common.Address).Bytes(z.wrapped.Address))
			if err != nil {
				err = msgp.WrapError(err, "wrapped", "Address")
				return
			}
			z.wrapped.Address = common.BytesToAddress(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Native) Msgsize() (s int) {
	s = 1
	if z.BaseCurrency == nil {
		s += msgp.NilSize
	} else {
		s += z.BaseCurrency.Msgsize()
	}
	if z.wrapped == nil {
		s += msgp.NilSize
	} else {
		s += 1
		if z.wrapped.BaseCurrency == nil {
			s += msgp.NilSize
		} else {
			s += z.wrapped.BaseCurrency.Msgsize()
		}
		s += msgp.BytesPrefixSize + len((common.Address).Bytes(z.wrapped.Address))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Pool) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
		z.Token0 = nil
	} else {
		if z.Token0 == nil {
			z.Token0 = new(Token)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
		if zb0002 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0002}
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "Token0", "BaseCurrency")
				return
			}
			z.Token0.BaseCurrency = nil
		} else {
			if z.Token0.BaseCurrency == nil {
				z.Token0.BaseCurrency = new(BaseCurrency)
			}
			err = z.Token0.BaseCurrency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Token0", "BaseCurrency")
				return
			}
		}
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes((common.Address).Bytes(z.Token0.Address))
			if err != nil {
				err = msgp.WrapError(err, "Token0", "Address")
				return
			}
			z.Token0.Address = common.BytesToAddress(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
		z.Token1 = nil
	} else {
		if z.Token1 == nil {
			z.Token1 = new(Token)
		}
		var zb0004 uint32
		zb0004, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
		if zb0004 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0004}
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "Token1", "BaseCurrency")
				return
			}
			z.Token1.BaseCurrency = nil
		} else {
			if z.Token1.BaseCurrency == nil {
				z.Token1.BaseCurrency = new(BaseCurrency)
			}
			err = z.Token1.BaseCurrency.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Token1", "BaseCurrency")
				return
			}
		}
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes((common.Address).Bytes(z.Token1.Address))
			if err != nil {
				err = msgp.WrapError(err, "Token1", "Address")
				return
			}
			z.Token1.Address = common.BytesToAddress(zb0005)
		}
	}
	{
		var zb0006 uint64
		zb0006, err = dc.ReadUint64()
		if err != nil {
			err = msgp.WrapError(err, "Fee")
			return
		}
		z.Fee = FeeAmount(zb0006)
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SqrtRatioX96")
			return
		}
		z.SqrtRatioX96 = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.SqrtRatioX96))
			if err != nil {
				err = msgp.WrapError(err, "SqrtRatioX96")
				return
			}
			z.SqrtRatioX96 = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
		z.Liquidity = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.Liquidity))
			if err != nil {
				err = msgp.WrapError(err, "Liquidity")
				return
			}
			z.Liquidity = msgpencode.DecodeInt(zb0008)
		}
	}
	z.TickCurrent, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "TickCurrent")
		return
	}
	err = z.TickDataProvider.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "TickDataProvider")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
		z.token0Price = nil
	} else {
		if z.token0Price == nil {
			z.token0Price = new(Price)
		}
		err = z.token0Price.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
		z.token1Price = nil
	} else {
		if z.token1Price == nil {
			z.token1Price = new(Price)
		}
		err = z.token1Price.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pool) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 9
	err = en.Append(0x99)
	if err != nil {
		return
	}
	if z.Token0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		if z.Token0.BaseCurrency == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Token0.BaseCurrency.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Token0", "BaseCurrency")
				return
			}
		}
		err = en.WriteBytes((common.Address).Bytes(z.Token0.Address))
		if err != nil {
			err = msgp.WrapError(err, "Token0", "Address")
			return
		}
	}
	if z.Token1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		if z.Token1.BaseCurrency == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Token1.BaseCurrency.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Token1", "BaseCurrency")
				return
			}
		}
		err = en.WriteBytes((common.Address).Bytes(z.Token1.Address))
		if err != nil {
			err = msgp.WrapError(err, "Token1", "Address")
			return
		}
	}
	err = en.WriteUint64(uint64(z.Fee))
	if err != nil {
		err = msgp.WrapError(err, "Fee")
		return
	}
	if z.SqrtRatioX96 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SqrtRatioX96))
		if err != nil {
			err = msgp.WrapError(err, "SqrtRatioX96")
			return
		}
	}
	if z.Liquidity == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Liquidity))
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
	}
	err = en.WriteInt(z.TickCurrent)
	if err != nil {
		err = msgp.WrapError(err, "TickCurrent")
		return
	}
	err = z.TickDataProvider.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "TickDataProvider")
		return
	}
	if z.token0Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.token0Price.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if z.token1Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.token1Price.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	if z.Token0 == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		if z.Token0.BaseCurrency == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Token0.BaseCurrency.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Token0", "BaseCurrency")
				return
			}
		}
		o = msgp.AppendBytes(o, (common.Address).Bytes(z.Token0.Address))
	}
	if z.Token1 == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 2
		o = append(o, 0x92)
		if z.Token1.BaseCurrency == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Token1.BaseCurrency.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Token1", "BaseCurrency")
				return
			}
		}
		o = msgp.AppendBytes(o, (common.Address).Bytes(z.Token1.Address))
	}
	o = msgp.AppendUint64(o, uint64(z.Fee))
	if z.SqrtRatioX96 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SqrtRatioX96))
	}
	if z.Liquidity == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Liquidity))
	}
	o = msgp.AppendInt(o, z.TickCurrent)
	o, err = z.TickDataProvider.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "TickDataProvider")
		return
	}
	if z.token0Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.token0Price.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if z.token1Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.token1Price.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token0 = nil
	} else {
		if z.Token0 == nil {
			z.Token0 = new(Token)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Token0")
			return
		}
		if zb0002 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0002}
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Token0.BaseCurrency = nil
		} else {
			if z.Token0.BaseCurrency == nil {
				z.Token0.BaseCurrency = new(BaseCurrency)
			}
			bts, err = z.Token0.BaseCurrency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Token0", "BaseCurrency")
				return
			}
		}
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, (common.Address).Bytes(z.Token0.Address))
			if err != nil {
				err = msgp.WrapError(err, "Token0", "Address")
				return
			}
			z.Token0.Address = common.BytesToAddress(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token1 = nil
	} else {
		if z.Token1 == nil {
			z.Token1 = new(Token)
		}
		var zb0004 uint32
		zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Token1")
			return
		}
		if zb0004 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0004}
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Token1.BaseCurrency = nil
		} else {
			if z.Token1.BaseCurrency == nil {
				z.Token1.BaseCurrency = new(BaseCurrency)
			}
			bts, err = z.Token1.BaseCurrency.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Token1", "BaseCurrency")
				return
			}
		}
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, (common.Address).Bytes(z.Token1.Address))
			if err != nil {
				err = msgp.WrapError(err, "Token1", "Address")
				return
			}
			z.Token1.Address = common.BytesToAddress(zb0005)
		}
	}
	{
		var zb0006 uint64
		zb0006, bts, err = msgp.ReadUint64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Fee")
			return
		}
		z.Fee = FeeAmount(zb0006)
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SqrtRatioX96 = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SqrtRatioX96))
			if err != nil {
				err = msgp.WrapError(err, "SqrtRatioX96")
				return
			}
			z.SqrtRatioX96 = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Liquidity = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Liquidity))
			if err != nil {
				err = msgp.WrapError(err, "Liquidity")
				return
			}
			z.Liquidity = msgpencode.DecodeInt(zb0008)
		}
	}
	z.TickCurrent, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TickCurrent")
		return
	}
	bts, err = z.TickDataProvider.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "TickDataProvider")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.token0Price = nil
	} else {
		if z.token0Price == nil {
			z.token0Price = new(Price)
		}
		bts, err = z.token0Price.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "token0Price")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.token1Price = nil
	} else {
		if z.token1Price == nil {
			z.token1Price = new(Price)
		}
		bts, err = z.token1Price.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "token1Price")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pool) Msgsize() (s int) {
	s = 1
	if z.Token0 == nil {
		s += msgp.NilSize
	} else {
		s += 1
		if z.Token0.BaseCurrency == nil {
			s += msgp.NilSize
		} else {
			s += z.Token0.BaseCurrency.Msgsize()
		}
		s += msgp.BytesPrefixSize + len((common.Address).Bytes(z.Token0.Address))
	}
	if z.Token1 == nil {
		s += msgp.NilSize
	} else {
		s += 1
		if z.Token1.BaseCurrency == nil {
			s += msgp.NilSize
		} else {
			s += z.Token1.BaseCurrency.Msgsize()
		}
		s += msgp.BytesPrefixSize + len((common.Address).Bytes(z.Token1.Address))
	}
	s += msgp.Uint64Size
	if z.SqrtRatioX96 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SqrtRatioX96))
	}
	if z.Liquidity == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Liquidity))
	}
	s += msgp.IntSize + z.TickDataProvider.Msgsize()
	if z.token0Price == nil {
		s += msgp.NilSize
	} else {
		s += z.token0Price.Msgsize()
	}
	if z.token1Price == nil {
		s += msgp.NilSize
	} else {
		s += z.token1Price.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Price) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Fraction")
			return
		}
		z.Fraction = nil
	} else {
		if z.Fraction == nil {
			z.Fraction = new(Fraction)
		}
		err = z.Fraction.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Fraction")
			return
		}
	}
	err = z.BaseCurrency.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "BaseCurrency")
		return
	}
	err = z.QuoteCurrency.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "QuoteCurrency")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Scalar")
			return
		}
		z.Scalar = nil
	} else {
		if z.Scalar == nil {
			z.Scalar = new(Fraction)
		}
		err = z.Scalar.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Scalar")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Price) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	if z.Fraction == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Fraction.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Fraction")
			return
		}
	}
	err = z.BaseCurrency.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "BaseCurrency")
		return
	}
	err = z.QuoteCurrency.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "QuoteCurrency")
		return
	}
	if z.Scalar == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Scalar.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Scalar")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Price) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	if z.Fraction == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Fraction.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Fraction")
			return
		}
	}
	o, err = z.BaseCurrency.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "BaseCurrency")
		return
	}
	o, err = z.QuoteCurrency.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "QuoteCurrency")
		return
	}
	if z.Scalar == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Scalar.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Scalar")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Price) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Fraction = nil
	} else {
		if z.Fraction == nil {
			z.Fraction = new(Fraction)
		}
		bts, err = z.Fraction.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Fraction")
			return
		}
	}
	bts, err = z.BaseCurrency.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "BaseCurrency")
		return
	}
	bts, err = z.QuoteCurrency.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "QuoteCurrency")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Scalar = nil
	} else {
		if z.Scalar == nil {
			z.Scalar = new(Fraction)
		}
		bts, err = z.Scalar.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Scalar")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Price) Msgsize() (s int) {
	s = 1
	if z.Fraction == nil {
		s += msgp.NilSize
	} else {
		s += z.Fraction.Msgsize()
	}
	s += z.BaseCurrency.Msgsize() + z.QuoteCurrency.Msgsize()
	if z.Scalar == nil {
		s += msgp.NilSize
	} else {
		s += z.Scalar.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Tick) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Index, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LiquidityGross")
			return
		}
		z.LiquidityGross = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.LiquidityGross))
			if err != nil {
				err = msgp.WrapError(err, "LiquidityGross")
				return
			}
			z.LiquidityGross = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LiquidityNet")
			return
		}
		z.LiquidityNet = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.LiquidityNet))
			if err != nil {
				err = msgp.WrapError(err, "LiquidityNet")
				return
			}
			z.LiquidityNet = msgpencode.DecodeInt(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Tick) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Index)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	if z.LiquidityGross == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LiquidityGross))
		if err != nil {
			err = msgp.WrapError(err, "LiquidityGross")
			return
		}
	}
	if z.LiquidityNet == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LiquidityNet))
		if err != nil {
			err = msgp.WrapError(err, "LiquidityNet")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Tick) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendInt(o, z.Index)
	if z.LiquidityGross == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LiquidityGross))
	}
	if z.LiquidityNet == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LiquidityNet))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Tick) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Index, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Index")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LiquidityGross = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LiquidityGross))
			if err != nil {
				err = msgp.WrapError(err, "LiquidityGross")
				return
			}
			z.LiquidityGross = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LiquidityNet = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LiquidityNet))
			if err != nil {
				err = msgp.WrapError(err, "LiquidityNet")
				return
			}
			z.LiquidityNet = msgpencode.DecodeInt(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tick) Msgsize() (s int) {
	s = 1 + msgp.IntSize
	if z.LiquidityGross == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LiquidityGross))
	}
	if z.LiquidityNet == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LiquidityNet))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TickDataProviderEnum) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "List")
			return
		}
		z.List = nil
	} else {
		if z.List == nil {
			z.List = new(TickListDataProvider)
		}
		var zb0002 uint32
		zb0002, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "List")
			return
		}
		if zb0002 != 1 {
			err = msgp.ArrayError{Wanted: 1, Got: zb0002}
			return
		}
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "List", "ticks")
			return
		}
		if cap(z.List.ticks) >= int(zb0003) {
			z.List.ticks = (z.List.ticks)[:zb0003]
		} else {
			z.List.ticks = make([]Tick, zb0003)
		}
		for za0001 := range z.List.ticks {
			err = z.List.ticks[za0001].DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "List", "ticks", za0001)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TickDataProviderEnum) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	if z.List == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		// array header, size 1
		err = en.Append(0x91)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.List.ticks)))
		if err != nil {
			err = msgp.WrapError(err, "List", "ticks")
			return
		}
		for za0001 := range z.List.ticks {
			err = z.List.ticks[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "List", "ticks", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TickDataProviderEnum) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	if z.List == nil {
		o = msgp.AppendNil(o)
	} else {
		// array header, size 1
		o = append(o, 0x91)
		o = msgp.AppendArrayHeader(o, uint32(len(z.List.ticks)))
		for za0001 := range z.List.ticks {
			o, err = z.List.ticks[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "List", "ticks", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TickDataProviderEnum) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.List = nil
	} else {
		if z.List == nil {
			z.List = new(TickListDataProvider)
		}
		var zb0002 uint32
		zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "List")
			return
		}
		if zb0002 != 1 {
			err = msgp.ArrayError{Wanted: 1, Got: zb0002}
			return
		}
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "List", "ticks")
			return
		}
		if cap(z.List.ticks) >= int(zb0003) {
			z.List.ticks = (z.List.ticks)[:zb0003]
		} else {
			z.List.ticks = make([]Tick, zb0003)
		}
		for za0001 := range z.List.ticks {
			bts, err = z.List.ticks[za0001].UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "List", "ticks", za0001)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TickDataProviderEnum) Msgsize() (s int) {
	s = 1
	if z.List == nil {
		s += msgp.NilSize
	} else {
		s += 1 + msgp.ArrayHeaderSize
		for za0001 := range z.List.ticks {
			s += z.List.ticks[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TickListDataProvider) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ticks")
		return
	}
	if cap(z.ticks) >= int(zb0002) {
		z.ticks = (z.ticks)[:zb0002]
	} else {
		z.ticks = make([]Tick, zb0002)
	}
	for za0001 := range z.ticks {
		err = z.ticks[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TickListDataProvider) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ticks)))
	if err != nil {
		err = msgp.WrapError(err, "ticks")
		return
	}
	for za0001 := range z.ticks {
		err = z.ticks[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TickListDataProvider) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ticks)))
	for za0001 := range z.ticks {
		o, err = z.ticks[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TickListDataProvider) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ticks")
		return
	}
	if cap(z.ticks) >= int(zb0002) {
		z.ticks = (z.ticks)[:zb0002]
	} else {
		z.ticks = make([]Tick, zb0002)
	}
	for za0001 := range z.ticks {
		bts, err = z.ticks[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "ticks", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TickListDataProvider) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.ticks {
		s += z.ticks[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Token) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
		z.BaseCurrency = nil
	} else {
		if z.BaseCurrency == nil {
			z.BaseCurrency = new(BaseCurrency)
		}
		err = z.BaseCurrency.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	{
		var zb0002 []byte
		zb0002, err = dc.ReadBytes((common.Address).Bytes(z.Address))
		if err != nil {
			err = msgp.WrapError(err, "Address")
			return
		}
		z.Address = common.BytesToAddress(zb0002)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Token) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.BaseCurrency == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.BaseCurrency.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	err = en.WriteBytes((common.Address).Bytes(z.Address))
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Token) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.BaseCurrency == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.BaseCurrency.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	o = msgp.AppendBytes(o, (common.Address).Bytes(z.Address))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Token) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BaseCurrency = nil
	} else {
		if z.BaseCurrency == nil {
			z.BaseCurrency = new(BaseCurrency)
		}
		bts, err = z.BaseCurrency.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "BaseCurrency")
			return
		}
	}
	{
		var zb0002 []byte
		zb0002, bts, err = msgp.ReadBytesBytes(bts, (common.Address).Bytes(z.Address))
		if err != nil {
			err = msgp.WrapError(err, "Address")
			return
		}
		z.Address = common.BytesToAddress(zb0002)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Token) Msgsize() (s int) {
	s = 1
	if z.BaseCurrency == nil {
		s += msgp.NilSize
	} else {
		s += z.BaseCurrency.Msgsize()
	}
	s += msgp.BytesPrefixSize + len((common.Address).Bytes(z.Address))
	return
}
