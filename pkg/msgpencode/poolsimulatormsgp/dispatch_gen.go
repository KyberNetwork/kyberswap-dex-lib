package poolsimulatormsgp

// Code generated by github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode/poolsimulatormsgp/cmd/generate DO NOT EDIT.

import (
	pkg_liquiditysource_balancerv1 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/balancer-v1"
	pkg_liquiditysource_balancerv2_composablestable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/balancer-v2/composable-stable"
	pkg_liquiditysource_balancerv2_stable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/balancer-v2/stable"
	pkg_liquiditysource_balancerv2_weighted "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/balancer-v2/weighted"
	pkg_liquiditysource_bancorv21 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/bancor-v21"
	pkg_liquiditysource_bancorv3 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/bancor-v3"
	pkg_liquiditysource_bedrock_unieth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/bedrock/unieth"
	pkg_liquiditysource_curve_plain "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/curve/plain"
	pkg_liquiditysource_curve_stablemetang "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/curve/stable-meta-ng"
	pkg_liquiditysource_curve_stableng "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/curve/stable-ng"
	pkg_liquiditysource_curve_tricryptong "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/curve/tricrypto-ng"
	pkg_liquiditysource_ethena_susde "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/ethena/susde"
	pkg_liquiditysource_etherfi_eeth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/etherfi/eeth"
	pkg_liquiditysource_etherfi_weeth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/etherfi/weeth"
	pkg_liquiditysource_gyroscope_2clp "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/gyroscope/2clp"
	pkg_liquiditysource_gyroscope_3clp "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/gyroscope/3clp"
	pkg_liquiditysource_gyroscope_eclp "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/gyroscope/eclp"
	pkg_liquiditysource_hashflowv3 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/hashflow-v3"
	pkg_liquiditysource_kelp_rseth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/kelp/rseth"
	pkg_liquiditysource_maker_savingsdai "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/maker/savingsdai"
	pkg_liquiditysource_nativev1 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/native-v1"
	pkg_liquiditysource_nomiswap_nomiswapstable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/nomiswap/nomiswapstable"
	pkg_liquiditysource_puffer_pufeth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/puffer/pufeth"
	pkg_liquiditysource_renzo_ezeth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/renzo/ezeth"
	pkg_liquiditysource_rocketpool_reth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/rocketpool/reth"
	pkg_liquiditysource_swaapv2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/swaap-v2"
	pkg_liquiditysource_swell_rsweth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/swell/rsweth"
	pkg_liquiditysource_swell_sweth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/swell/sweth"
	pkg_liquiditysource_uniswapv2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/uniswap-v2"
	pkg_liquiditysource_velocorev2_cpmm "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/velocore-v2/cpmm"
	pkg_liquiditysource_velocorev2_wombatstable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/velocore-v2/wombat-stable"
	pkg_liquiditysource_velodromev1 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/velodrome-v1"
	pkg_liquiditysource_velodromev2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/velodrome-v2"
	pkg_liquiditysource_woofiv2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/woofi-v2"
	pkg_source_algebrav1 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/algebrav1"
	pkg_source_balancer_stable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/balancer/stable"
	pkg_source_balancer_weighted "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/balancer/weighted"
	pkg_source_balancercomposablestable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/balancer-composable-stable"
	pkg_source_camelot "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/camelot"
	pkg_source_curve_aave "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/aave"
	pkg_source_curve_base "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/base"
	pkg_source_curve_compound "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/compound"
	pkg_source_curve_meta "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/meta"
	pkg_source_curve_plainoracle "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/plain-oracle"
	pkg_source_curve_tricrypto "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/tricrypto"
	pkg_source_curve_two "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/two"
	pkg_source_dmm "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/dmm"
	pkg_source_dodo "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/dodo"
	pkg_source_elastic "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/elastic"
	pkg_source_equalizer "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/equalizer"
	pkg_source_fraxswap "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/fraxswap"
	pkg_source_fulcrom "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/fulcrom"
	pkg_source_fxdx "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/fxdx"
	pkg_source_gmx "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/gmx"
	pkg_source_gmxglp "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/gmx-glp"
	pkg_source_iziswap "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/iziswap"
	pkg_source_kokonutcrypto "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/kokonut-crypto"
	pkg_source_kyberpmm "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/kyber-pmm"
	pkg_source_lido "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/lido"
	pkg_source_lidosteth "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/lido-steth"
	pkg_source_limitorder "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/limitorder"
	pkg_source_liquiditybookv20 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/liquiditybookv20"
	pkg_source_liquiditybookv21 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/liquiditybookv21"
	pkg_source_madmex "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/madmex"
	pkg_source_makerpsm "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/makerpsm"
	pkg_source_mantisswap "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/mantisswap"
	pkg_source_maverickv1 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/maverickv1"
	pkg_source_metavault "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/metavault"
	pkg_source_pancakev3 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pancakev3"
	pkg_source_platypus "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/platypus"
	pkg_source_polmatic "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pol-matic"
	pkg_source_quickperps "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/quickperps"
	pkg_source_ramsesv2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/ramsesv2"
	pkg_source_saddle "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/saddle"
	pkg_source_slipstream "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/slipstream"
	pkg_source_smardex "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/smardex"
	pkg_source_solidlyv3 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/solidly-v3"
	pkg_source_swapbasedperp "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/swapbased-perp"
	pkg_source_syncswap_syncswapclassic "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/syncswap/syncswapclassic"
	pkg_source_syncswap_syncswapstable "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/syncswap/syncswapstable"
	pkg_source_synthetix "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/synthetix"
	pkg_source_uniswap "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/uniswap"
	pkg_source_uniswapv3 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/uniswapv3"
	pkg_source_usdfi "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/usdfi"
	pkg_source_velocimeter "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/velocimeter"
	pkg_source_velodrome "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/velodrome"
	pkg_source_velodromev2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/velodromev2"
	pkg_source_vooi "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/vooi"
	pkg_source_wombat_wombatlsd "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/wombat/wombatlsd"
	pkg_source_wombat_wombatmain "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/wombat/wombatmain"
	pkg_source_woofiv2 "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/woofiv2"
	pkg_source_zkerafinance "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/zkera-finance"

	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool"
	"github.com/tinylib/msgp/msgp"
)

func dispatchPoolSimulator(sim pool.IPoolSimulator) (dexName string, encodable msgp.Encodable) {
	switch sim := sim.(type) {
	case *pkg_liquiditysource_balancerv1.PoolSimulator:
		dexName = "pkg_liquiditysource_balancerv1"
		encodable = sim
	case *pkg_liquiditysource_balancerv2_composablestable.PoolSimulator:
		dexName = "pkg_liquiditysource_balancerv2_composablestable"
		encodable = sim
	case *pkg_liquiditysource_balancerv2_stable.PoolSimulator:
		dexName = "pkg_liquiditysource_balancerv2_stable"
		encodable = sim
	case *pkg_liquiditysource_balancerv2_weighted.PoolSimulator:
		dexName = "pkg_liquiditysource_balancerv2_weighted"
		encodable = sim
	case *pkg_liquiditysource_bancorv21.PoolSimulator:
		dexName = "pkg_liquiditysource_bancorv21"
		encodable = sim
	case *pkg_liquiditysource_bancorv3.PoolSimulator:
		dexName = "pkg_liquiditysource_bancorv3"
		encodable = sim
	case *pkg_liquiditysource_bedrock_unieth.PoolSimulator:
		dexName = "pkg_liquiditysource_bedrock_unieth"
		encodable = sim
	case *pkg_liquiditysource_curve_plain.PoolSimulator:
		dexName = "pkg_liquiditysource_curve_plain"
		encodable = sim
	case *pkg_liquiditysource_curve_stablemetang.PoolSimulator:
		dexName = "pkg_liquiditysource_curve_stablemetang"
		encodable = sim
	case *pkg_liquiditysource_curve_stableng.PoolSimulator:
		dexName = "pkg_liquiditysource_curve_stableng"
		encodable = sim
	case *pkg_liquiditysource_curve_tricryptong.PoolSimulator:
		dexName = "pkg_liquiditysource_curve_tricryptong"
		encodable = sim
	case *pkg_liquiditysource_ethena_susde.PoolSimulator:
		dexName = "pkg_liquiditysource_ethena_susde"
		encodable = sim
	case *pkg_liquiditysource_etherfi_eeth.PoolSimulator:
		dexName = "pkg_liquiditysource_etherfi_eeth"
		encodable = sim
	case *pkg_liquiditysource_etherfi_weeth.PoolSimulator:
		dexName = "pkg_liquiditysource_etherfi_weeth"
		encodable = sim
	case *pkg_liquiditysource_gyroscope_2clp.PoolSimulator:
		dexName = "pkg_liquiditysource_gyroscope_2clp"
		encodable = sim
	case *pkg_liquiditysource_gyroscope_3clp.PoolSimulator:
		dexName = "pkg_liquiditysource_gyroscope_3clp"
		encodable = sim
	case *pkg_liquiditysource_gyroscope_eclp.PoolSimulator:
		dexName = "pkg_liquiditysource_gyroscope_eclp"
		encodable = sim
	case *pkg_liquiditysource_hashflowv3.PoolSimulator:
		dexName = "pkg_liquiditysource_hashflowv3"
		encodable = sim
	case *pkg_liquiditysource_kelp_rseth.PoolSimulator:
		dexName = "pkg_liquiditysource_kelp_rseth"
		encodable = sim
	case *pkg_liquiditysource_maker_savingsdai.PoolSimulator:
		dexName = "pkg_liquiditysource_maker_savingsdai"
		encodable = sim
	case *pkg_liquiditysource_nativev1.PoolSimulator:
		dexName = "pkg_liquiditysource_nativev1"
		encodable = sim
	case *pkg_liquiditysource_nomiswap_nomiswapstable.PoolSimulator:
		dexName = "pkg_liquiditysource_nomiswap_nomiswapstable"
		encodable = sim
	case *pkg_liquiditysource_puffer_pufeth.PoolSimulator:
		dexName = "pkg_liquiditysource_puffer_pufeth"
		encodable = sim
	case *pkg_liquiditysource_renzo_ezeth.PoolSimulator:
		dexName = "pkg_liquiditysource_renzo_ezeth"
		encodable = sim
	case *pkg_liquiditysource_rocketpool_reth.PoolSimulator:
		dexName = "pkg_liquiditysource_rocketpool_reth"
		encodable = sim
	case *pkg_liquiditysource_swaapv2.PoolSimulator:
		dexName = "pkg_liquiditysource_swaapv2"
		encodable = sim
	case *pkg_liquiditysource_swell_rsweth.PoolSimulator:
		dexName = "pkg_liquiditysource_swell_rsweth"
		encodable = sim
	case *pkg_liquiditysource_swell_sweth.PoolSimulator:
		dexName = "pkg_liquiditysource_swell_sweth"
		encodable = sim
	case *pkg_liquiditysource_uniswapv2.PoolSimulator:
		dexName = "pkg_liquiditysource_uniswapv2"
		encodable = sim
	case *pkg_liquiditysource_velocorev2_cpmm.PoolSimulator:
		dexName = "pkg_liquiditysource_velocorev2_cpmm"
		encodable = sim
	case *pkg_liquiditysource_velocorev2_wombatstable.PoolSimulator:
		dexName = "pkg_liquiditysource_velocorev2_wombatstable"
		encodable = sim
	case *pkg_liquiditysource_velodromev1.PoolSimulator:
		dexName = "pkg_liquiditysource_velodromev1"
		encodable = sim
	case *pkg_liquiditysource_velodromev2.PoolSimulator:
		dexName = "pkg_liquiditysource_velodromev2"
		encodable = sim
	case *pkg_liquiditysource_woofiv2.PoolSimulator:
		dexName = "pkg_liquiditysource_woofiv2"
		encodable = sim
	case *pkg_source_algebrav1.PoolSimulator:
		dexName = "pkg_source_algebrav1"
		encodable = sim
	case *pkg_source_balancer_stable.StablePool:
		dexName = "pkg_source_balancer_stable"
		encodable = sim
	case *pkg_source_balancer_weighted.WeightedPool2Tokens:
		dexName = "pkg_source_balancer_weighted"
		encodable = sim
	case *pkg_source_balancercomposablestable.PoolSimulator:
		dexName = "pkg_source_balancercomposablestable"
		encodable = sim
	case *pkg_source_camelot.PoolSimulator:
		dexName = "pkg_source_camelot"
		encodable = sim
	case *pkg_source_curve_aave.AavePool:
		dexName = "pkg_source_curve_aave"
		encodable = sim
	case *pkg_source_curve_base.PoolBaseSimulator:
		dexName = "pkg_source_curve_base"
		encodable = sim
	case *pkg_source_curve_compound.CompoundPool:
		dexName = "pkg_source_curve_compound"
		encodable = sim
	case *pkg_source_curve_meta.Pool:
		dexName = "pkg_source_curve_meta"
		encodable = sim
	case *pkg_source_curve_plainoracle.Pool:
		dexName = "pkg_source_curve_plainoracle"
		encodable = sim
	case *pkg_source_curve_tricrypto.Pool:
		dexName = "pkg_source_curve_tricrypto"
		encodable = sim
	case *pkg_source_curve_two.Pool:
		dexName = "pkg_source_curve_two"
		encodable = sim
	case *pkg_source_dmm.PoolSimulator:
		dexName = "pkg_source_dmm"
		encodable = sim
	case *pkg_source_dodo.PoolSimulator:
		dexName = "pkg_source_dodo"
		encodable = sim
	case *pkg_source_elastic.PoolSimulator:
		dexName = "pkg_source_elastic"
		encodable = sim
	case *pkg_source_equalizer.PoolSimulator:
		dexName = "pkg_source_equalizer"
		encodable = sim
	case *pkg_source_fraxswap.PoolSimulator:
		dexName = "pkg_source_fraxswap"
		encodable = sim
	case *pkg_source_fulcrom.PoolSimulator:
		dexName = "pkg_source_fulcrom"
		encodable = sim
	case *pkg_source_fxdx.PoolSimulator:
		dexName = "pkg_source_fxdx"
		encodable = sim
	case *pkg_source_gmx.PoolSimulator:
		dexName = "pkg_source_gmx"
		encodable = sim
	case *pkg_source_gmxglp.PoolSimulator:
		dexName = "pkg_source_gmxglp"
		encodable = sim
	case *pkg_source_iziswap.PoolSimulator:
		dexName = "pkg_source_iziswap"
		encodable = sim
	case *pkg_source_kokonutcrypto.PoolSimulator:
		dexName = "pkg_source_kokonutcrypto"
		encodable = sim
	case *pkg_source_kyberpmm.PoolSimulator:
		dexName = "pkg_source_kyberpmm"
		encodable = sim
	case *pkg_source_lido.PoolSimulator:
		dexName = "pkg_source_lido"
		encodable = sim
	case *pkg_source_lidosteth.PoolSimulator:
		dexName = "pkg_source_lidosteth"
		encodable = sim
	case *pkg_source_limitorder.PoolSimulator:
		dexName = "pkg_source_limitorder"
		encodable = sim
	case *pkg_source_liquiditybookv20.PoolSimulator:
		dexName = "pkg_source_liquiditybookv20"
		encodable = sim
	case *pkg_source_liquiditybookv21.PoolSimulator:
		dexName = "pkg_source_liquiditybookv21"
		encodable = sim
	case *pkg_source_madmex.PoolSimulator:
		dexName = "pkg_source_madmex"
		encodable = sim
	case *pkg_source_makerpsm.PoolSimulator:
		dexName = "pkg_source_makerpsm"
		encodable = sim
	case *pkg_source_mantisswap.PoolSimulator:
		dexName = "pkg_source_mantisswap"
		encodable = sim
	case *pkg_source_maverickv1.Pool:
		dexName = "pkg_source_maverickv1"
		encodable = sim
	case *pkg_source_metavault.PoolSimulator:
		dexName = "pkg_source_metavault"
		encodable = sim
	case *pkg_source_pancakev3.PoolSimulator:
		dexName = "pkg_source_pancakev3"
		encodable = sim
	case *pkg_source_platypus.PoolSimulator:
		dexName = "pkg_source_platypus"
		encodable = sim
	case *pkg_source_polmatic.PoolSimulator:
		dexName = "pkg_source_polmatic"
		encodable = sim
	case *pkg_source_quickperps.PoolSimulator:
		dexName = "pkg_source_quickperps"
		encodable = sim
	case *pkg_source_ramsesv2.PoolSimulator:
		dexName = "pkg_source_ramsesv2"
		encodable = sim
	case *pkg_source_saddle.PoolSimulator:
		dexName = "pkg_source_saddle"
		encodable = sim
	case *pkg_source_slipstream.PoolSimulator:
		dexName = "pkg_source_slipstream"
		encodable = sim
	case *pkg_source_smardex.PoolSimulator:
		dexName = "pkg_source_smardex"
		encodable = sim
	case *pkg_source_solidlyv3.PoolSimulator:
		dexName = "pkg_source_solidlyv3"
		encodable = sim
	case *pkg_source_swapbasedperp.PoolSimulator:
		dexName = "pkg_source_swapbasedperp"
		encodable = sim
	case *pkg_source_syncswap_syncswapclassic.PoolSimulator:
		dexName = "pkg_source_syncswap_syncswapclassic"
		encodable = sim
	case *pkg_source_syncswap_syncswapstable.PoolSimulator:
		dexName = "pkg_source_syncswap_syncswapstable"
		encodable = sim
	case *pkg_source_synthetix.PoolSimulator:
		dexName = "pkg_source_synthetix"
		encodable = sim
	case *pkg_source_uniswap.PoolSimulator:
		dexName = "pkg_source_uniswap"
		encodable = sim
	case *pkg_source_uniswapv3.PoolSimulator:
		dexName = "pkg_source_uniswapv3"
		encodable = sim
	case *pkg_source_usdfi.PoolSimulator:
		dexName = "pkg_source_usdfi"
		encodable = sim
	case *pkg_source_velocimeter.Pool:
		dexName = "pkg_source_velocimeter"
		encodable = sim
	case *pkg_source_velodrome.PoolSimulator:
		dexName = "pkg_source_velodrome"
		encodable = sim
	case *pkg_source_velodromev2.PoolSimulator:
		dexName = "pkg_source_velodromev2"
		encodable = sim
	case *pkg_source_vooi.PoolSimulator:
		dexName = "pkg_source_vooi"
		encodable = sim
	case *pkg_source_wombat_wombatlsd.PoolSimulator:
		dexName = "pkg_source_wombat_wombatlsd"
		encodable = sim
	case *pkg_source_wombat_wombatmain.PoolSimulator:
		dexName = "pkg_source_wombat_wombatmain"
		encodable = sim
	case *pkg_source_woofiv2.PoolSimulator:
		dexName = "pkg_source_woofiv2"
		encodable = sim
	case *pkg_source_zkerafinance.PoolSimulator:
		dexName = "pkg_source_zkerafinance"
		encodable = sim
	default:
		return dispatchRegisteredPoolSimulator(sim)
	}
	return
}

func undispatchPoolSimulator(dexName string) (sim pool.IPoolSimulator, decodable msgp.Decodable) {
	switch dexName {
	case "pkg_liquiditysource_balancerv1":
		pool := new(pkg_liquiditysource_balancerv1.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_balancerv2_composablestable":
		pool := new(pkg_liquiditysource_balancerv2_composablestable.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_balancerv2_stable":
		pool := new(pkg_liquiditysource_balancerv2_stable.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_balancerv2_weighted":
		pool := new(pkg_liquiditysource_balancerv2_weighted.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_bancorv21":
		pool := new(pkg_liquiditysource_bancorv21.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_bancorv3":
		pool := new(pkg_liquiditysource_bancorv3.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_bedrock_unieth":
		pool := new(pkg_liquiditysource_bedrock_unieth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_curve_plain":
		pool := new(pkg_liquiditysource_curve_plain.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_curve_stablemetang":
		pool := new(pkg_liquiditysource_curve_stablemetang.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_curve_stableng":
		pool := new(pkg_liquiditysource_curve_stableng.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_curve_tricryptong":
		pool := new(pkg_liquiditysource_curve_tricryptong.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_ethena_susde":
		pool := new(pkg_liquiditysource_ethena_susde.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_etherfi_eeth":
		pool := new(pkg_liquiditysource_etherfi_eeth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_etherfi_weeth":
		pool := new(pkg_liquiditysource_etherfi_weeth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_gyroscope_2clp":
		pool := new(pkg_liquiditysource_gyroscope_2clp.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_gyroscope_3clp":
		pool := new(pkg_liquiditysource_gyroscope_3clp.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_gyroscope_eclp":
		pool := new(pkg_liquiditysource_gyroscope_eclp.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_hashflowv3":
		pool := new(pkg_liquiditysource_hashflowv3.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_kelp_rseth":
		pool := new(pkg_liquiditysource_kelp_rseth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_maker_savingsdai":
		pool := new(pkg_liquiditysource_maker_savingsdai.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_nativev1":
		pool := new(pkg_liquiditysource_nativev1.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_nomiswap_nomiswapstable":
		pool := new(pkg_liquiditysource_nomiswap_nomiswapstable.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_puffer_pufeth":
		pool := new(pkg_liquiditysource_puffer_pufeth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_renzo_ezeth":
		pool := new(pkg_liquiditysource_renzo_ezeth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_rocketpool_reth":
		pool := new(pkg_liquiditysource_rocketpool_reth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_swaapv2":
		pool := new(pkg_liquiditysource_swaapv2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_swell_rsweth":
		pool := new(pkg_liquiditysource_swell_rsweth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_swell_sweth":
		pool := new(pkg_liquiditysource_swell_sweth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_uniswapv2":
		pool := new(pkg_liquiditysource_uniswapv2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_velocorev2_cpmm":
		pool := new(pkg_liquiditysource_velocorev2_cpmm.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_velocorev2_wombatstable":
		pool := new(pkg_liquiditysource_velocorev2_wombatstable.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_velodromev1":
		pool := new(pkg_liquiditysource_velodromev1.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_velodromev2":
		pool := new(pkg_liquiditysource_velodromev2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_liquiditysource_woofiv2":
		pool := new(pkg_liquiditysource_woofiv2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_algebrav1":
		pool := new(pkg_source_algebrav1.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_balancer_stable":
		pool := new(pkg_source_balancer_stable.StablePool)
		sim = pool
		decodable = pool
	case "pkg_source_balancer_weighted":
		pool := new(pkg_source_balancer_weighted.WeightedPool2Tokens)
		sim = pool
		decodable = pool
	case "pkg_source_balancercomposablestable":
		pool := new(pkg_source_balancercomposablestable.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_camelot":
		pool := new(pkg_source_camelot.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_curve_aave":
		pool := new(pkg_source_curve_aave.AavePool)
		sim = pool
		decodable = pool
	case "pkg_source_curve_base":
		pool := new(pkg_source_curve_base.PoolBaseSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_curve_compound":
		pool := new(pkg_source_curve_compound.CompoundPool)
		sim = pool
		decodable = pool
	case "pkg_source_curve_meta":
		pool := new(pkg_source_curve_meta.Pool)
		sim = pool
		decodable = pool
	case "pkg_source_curve_plainoracle":
		pool := new(pkg_source_curve_plainoracle.Pool)
		sim = pool
		decodable = pool
	case "pkg_source_curve_tricrypto":
		pool := new(pkg_source_curve_tricrypto.Pool)
		sim = pool
		decodable = pool
	case "pkg_source_curve_two":
		pool := new(pkg_source_curve_two.Pool)
		sim = pool
		decodable = pool
	case "pkg_source_dmm":
		pool := new(pkg_source_dmm.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_dodo":
		pool := new(pkg_source_dodo.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_elastic":
		pool := new(pkg_source_elastic.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_equalizer":
		pool := new(pkg_source_equalizer.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_fraxswap":
		pool := new(pkg_source_fraxswap.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_fulcrom":
		pool := new(pkg_source_fulcrom.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_fxdx":
		pool := new(pkg_source_fxdx.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_gmx":
		pool := new(pkg_source_gmx.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_gmxglp":
		pool := new(pkg_source_gmxglp.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_iziswap":
		pool := new(pkg_source_iziswap.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_kokonutcrypto":
		pool := new(pkg_source_kokonutcrypto.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_kyberpmm":
		pool := new(pkg_source_kyberpmm.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_lido":
		pool := new(pkg_source_lido.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_lidosteth":
		pool := new(pkg_source_lidosteth.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_limitorder":
		pool := new(pkg_source_limitorder.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_liquiditybookv20":
		pool := new(pkg_source_liquiditybookv20.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_liquiditybookv21":
		pool := new(pkg_source_liquiditybookv21.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_madmex":
		pool := new(pkg_source_madmex.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_makerpsm":
		pool := new(pkg_source_makerpsm.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_mantisswap":
		pool := new(pkg_source_mantisswap.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_maverickv1":
		pool := new(pkg_source_maverickv1.Pool)
		sim = pool
		decodable = pool
	case "pkg_source_metavault":
		pool := new(pkg_source_metavault.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_pancakev3":
		pool := new(pkg_source_pancakev3.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_platypus":
		pool := new(pkg_source_platypus.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_polmatic":
		pool := new(pkg_source_polmatic.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_quickperps":
		pool := new(pkg_source_quickperps.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_ramsesv2":
		pool := new(pkg_source_ramsesv2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_saddle":
		pool := new(pkg_source_saddle.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_slipstream":
		pool := new(pkg_source_slipstream.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_smardex":
		pool := new(pkg_source_smardex.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_solidlyv3":
		pool := new(pkg_source_solidlyv3.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_swapbasedperp":
		pool := new(pkg_source_swapbasedperp.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_syncswap_syncswapclassic":
		pool := new(pkg_source_syncswap_syncswapclassic.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_syncswap_syncswapstable":
		pool := new(pkg_source_syncswap_syncswapstable.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_synthetix":
		pool := new(pkg_source_synthetix.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_uniswap":
		pool := new(pkg_source_uniswap.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_uniswapv3":
		pool := new(pkg_source_uniswapv3.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_usdfi":
		pool := new(pkg_source_usdfi.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_velocimeter":
		pool := new(pkg_source_velocimeter.Pool)
		sim = pool
		decodable = pool
	case "pkg_source_velodrome":
		pool := new(pkg_source_velodrome.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_velodromev2":
		pool := new(pkg_source_velodromev2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_vooi":
		pool := new(pkg_source_vooi.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_wombat_wombatlsd":
		pool := new(pkg_source_wombat_wombatlsd.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_wombat_wombatmain":
		pool := new(pkg_source_wombat_wombatmain.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_woofiv2":
		pool := new(pkg_source_woofiv2.PoolSimulator)
		sim = pool
		decodable = pool
	case "pkg_source_zkerafinance":
		pool := new(pkg_source_zkerafinance.PoolSimulator)
		sim = pool
		decodable = pool
	default:
		return undispatchRegisteredPoolSimulator(dexName)
	}
	return
}
func makePoolSimulatorsMapForTesting() map[string]pool.IPoolSimulator {
	return map[string]pool.IPoolSimulator {
		"pkg_liquiditysource_balancerv1.PoolSimulator": new(pkg_liquiditysource_balancerv1.PoolSimulator),
		"pkg_liquiditysource_balancerv2_composablestable.PoolSimulator": new(pkg_liquiditysource_balancerv2_composablestable.PoolSimulator),
		"pkg_liquiditysource_balancerv2_stable.PoolSimulator": new(pkg_liquiditysource_balancerv2_stable.PoolSimulator),
		"pkg_liquiditysource_balancerv2_weighted.PoolSimulator": new(pkg_liquiditysource_balancerv2_weighted.PoolSimulator),
		"pkg_liquiditysource_bancorv21.PoolSimulator": new(pkg_liquiditysource_bancorv21.PoolSimulator),
		"pkg_liquiditysource_bancorv3.PoolSimulator": new(pkg_liquiditysource_bancorv3.PoolSimulator),
		"pkg_liquiditysource_bedrock_unieth.PoolSimulator": new(pkg_liquiditysource_bedrock_unieth.PoolSimulator),
		"pkg_liquiditysource_curve_plain.PoolSimulator": new(pkg_liquiditysource_curve_plain.PoolSimulator),
		"pkg_liquiditysource_curve_stablemetang.PoolSimulator": new(pkg_liquiditysource_curve_stablemetang.PoolSimulator),
		"pkg_liquiditysource_curve_stableng.PoolSimulator": new(pkg_liquiditysource_curve_stableng.PoolSimulator),
		"pkg_liquiditysource_curve_tricryptong.PoolSimulator": new(pkg_liquiditysource_curve_tricryptong.PoolSimulator),
		"pkg_liquiditysource_ethena_susde.PoolSimulator": new(pkg_liquiditysource_ethena_susde.PoolSimulator),
		"pkg_liquiditysource_etherfi_eeth.PoolSimulator": new(pkg_liquiditysource_etherfi_eeth.PoolSimulator),
		"pkg_liquiditysource_etherfi_weeth.PoolSimulator": new(pkg_liquiditysource_etherfi_weeth.PoolSimulator),
		"pkg_liquiditysource_gyroscope_2clp.PoolSimulator": new(pkg_liquiditysource_gyroscope_2clp.PoolSimulator),
		"pkg_liquiditysource_gyroscope_3clp.PoolSimulator": new(pkg_liquiditysource_gyroscope_3clp.PoolSimulator),
		"pkg_liquiditysource_gyroscope_eclp.PoolSimulator": new(pkg_liquiditysource_gyroscope_eclp.PoolSimulator),
		"pkg_liquiditysource_hashflowv3.PoolSimulator": new(pkg_liquiditysource_hashflowv3.PoolSimulator),
		"pkg_liquiditysource_kelp_rseth.PoolSimulator": new(pkg_liquiditysource_kelp_rseth.PoolSimulator),
		"pkg_liquiditysource_maker_savingsdai.PoolSimulator": new(pkg_liquiditysource_maker_savingsdai.PoolSimulator),
		"pkg_liquiditysource_nativev1.PoolSimulator": new(pkg_liquiditysource_nativev1.PoolSimulator),
		"pkg_liquiditysource_nomiswap_nomiswapstable.PoolSimulator": new(pkg_liquiditysource_nomiswap_nomiswapstable.PoolSimulator),
		"pkg_liquiditysource_puffer_pufeth.PoolSimulator": new(pkg_liquiditysource_puffer_pufeth.PoolSimulator),
		"pkg_liquiditysource_renzo_ezeth.PoolSimulator": new(pkg_liquiditysource_renzo_ezeth.PoolSimulator),
		"pkg_liquiditysource_rocketpool_reth.PoolSimulator": new(pkg_liquiditysource_rocketpool_reth.PoolSimulator),
		"pkg_liquiditysource_swaapv2.PoolSimulator": new(pkg_liquiditysource_swaapv2.PoolSimulator),
		"pkg_liquiditysource_swell_rsweth.PoolSimulator": new(pkg_liquiditysource_swell_rsweth.PoolSimulator),
		"pkg_liquiditysource_swell_sweth.PoolSimulator": new(pkg_liquiditysource_swell_sweth.PoolSimulator),
		"pkg_liquiditysource_uniswapv2.PoolSimulator": new(pkg_liquiditysource_uniswapv2.PoolSimulator),
		"pkg_liquiditysource_velocorev2_cpmm.PoolSimulator": new(pkg_liquiditysource_velocorev2_cpmm.PoolSimulator),
		"pkg_liquiditysource_velocorev2_wombatstable.PoolSimulator": new(pkg_liquiditysource_velocorev2_wombatstable.PoolSimulator),
		"pkg_liquiditysource_velodromev1.PoolSimulator": new(pkg_liquiditysource_velodromev1.PoolSimulator),
		"pkg_liquiditysource_velodromev2.PoolSimulator": new(pkg_liquiditysource_velodromev2.PoolSimulator),
		"pkg_liquiditysource_woofiv2.PoolSimulator": new(pkg_liquiditysource_woofiv2.PoolSimulator),
		"pkg_source_algebrav1.PoolSimulator": new(pkg_source_algebrav1.PoolSimulator),
		"pkg_source_balancer_stable.StablePool": new(pkg_source_balancer_stable.StablePool),
		"pkg_source_balancer_weighted.WeightedPool2Tokens": new(pkg_source_balancer_weighted.WeightedPool2Tokens),
		"pkg_source_balancercomposablestable.PoolSimulator": new(pkg_source_balancercomposablestable.PoolSimulator),
		"pkg_source_camelot.PoolSimulator": new(pkg_source_camelot.PoolSimulator),
		"pkg_source_curve_aave.AavePool": new(pkg_source_curve_aave.AavePool),
		"pkg_source_curve_base.PoolBaseSimulator": new(pkg_source_curve_base.PoolBaseSimulator),
		"pkg_source_curve_compound.CompoundPool": new(pkg_source_curve_compound.CompoundPool),
		"pkg_source_curve_meta.Pool": new(pkg_source_curve_meta.Pool),
		"pkg_source_curve_plainoracle.Pool": new(pkg_source_curve_plainoracle.Pool),
		"pkg_source_curve_tricrypto.Pool": new(pkg_source_curve_tricrypto.Pool),
		"pkg_source_curve_two.Pool": new(pkg_source_curve_two.Pool),
		"pkg_source_dmm.PoolSimulator": new(pkg_source_dmm.PoolSimulator),
		"pkg_source_dodo.PoolSimulator": new(pkg_source_dodo.PoolSimulator),
		"pkg_source_elastic.PoolSimulator": new(pkg_source_elastic.PoolSimulator),
		"pkg_source_equalizer.PoolSimulator": new(pkg_source_equalizer.PoolSimulator),
		"pkg_source_fraxswap.PoolSimulator": new(pkg_source_fraxswap.PoolSimulator),
		"pkg_source_fulcrom.PoolSimulator": new(pkg_source_fulcrom.PoolSimulator),
		"pkg_source_fxdx.PoolSimulator": new(pkg_source_fxdx.PoolSimulator),
		"pkg_source_gmx.PoolSimulator": new(pkg_source_gmx.PoolSimulator),
		"pkg_source_gmxglp.PoolSimulator": new(pkg_source_gmxglp.PoolSimulator),
		"pkg_source_iziswap.PoolSimulator": new(pkg_source_iziswap.PoolSimulator),
		"pkg_source_kokonutcrypto.PoolSimulator": new(pkg_source_kokonutcrypto.PoolSimulator),
		"pkg_source_kyberpmm.PoolSimulator": new(pkg_source_kyberpmm.PoolSimulator),
		"pkg_source_lido.PoolSimulator": new(pkg_source_lido.PoolSimulator),
		"pkg_source_lidosteth.PoolSimulator": new(pkg_source_lidosteth.PoolSimulator),
		"pkg_source_limitorder.PoolSimulator": new(pkg_source_limitorder.PoolSimulator),
		"pkg_source_liquiditybookv20.PoolSimulator": new(pkg_source_liquiditybookv20.PoolSimulator),
		"pkg_source_liquiditybookv21.PoolSimulator": new(pkg_source_liquiditybookv21.PoolSimulator),
		"pkg_source_madmex.PoolSimulator": new(pkg_source_madmex.PoolSimulator),
		"pkg_source_makerpsm.PoolSimulator": new(pkg_source_makerpsm.PoolSimulator),
		"pkg_source_mantisswap.PoolSimulator": new(pkg_source_mantisswap.PoolSimulator),
		"pkg_source_maverickv1.Pool": new(pkg_source_maverickv1.Pool),
		"pkg_source_metavault.PoolSimulator": new(pkg_source_metavault.PoolSimulator),
		"pkg_source_pancakev3.PoolSimulator": new(pkg_source_pancakev3.PoolSimulator),
		"pkg_source_platypus.PoolSimulator": new(pkg_source_platypus.PoolSimulator),
		"pkg_source_polmatic.PoolSimulator": new(pkg_source_polmatic.PoolSimulator),
		"pkg_source_quickperps.PoolSimulator": new(pkg_source_quickperps.PoolSimulator),
		"pkg_source_ramsesv2.PoolSimulator": new(pkg_source_ramsesv2.PoolSimulator),
		"pkg_source_saddle.PoolSimulator": new(pkg_source_saddle.PoolSimulator),
		"pkg_source_slipstream.PoolSimulator": new(pkg_source_slipstream.PoolSimulator),
		"pkg_source_smardex.PoolSimulator": new(pkg_source_smardex.PoolSimulator),
		"pkg_source_solidlyv3.PoolSimulator": new(pkg_source_solidlyv3.PoolSimulator),
		"pkg_source_swapbasedperp.PoolSimulator": new(pkg_source_swapbasedperp.PoolSimulator),
		"pkg_source_syncswap_syncswapclassic.PoolSimulator": new(pkg_source_syncswap_syncswapclassic.PoolSimulator),
		"pkg_source_syncswap_syncswapstable.PoolSimulator": new(pkg_source_syncswap_syncswapstable.PoolSimulator),
		"pkg_source_synthetix.PoolSimulator": new(pkg_source_synthetix.PoolSimulator),
		"pkg_source_uniswap.PoolSimulator": new(pkg_source_uniswap.PoolSimulator),
		"pkg_source_uniswapv3.PoolSimulator": new(pkg_source_uniswapv3.PoolSimulator),
		"pkg_source_usdfi.PoolSimulator": new(pkg_source_usdfi.PoolSimulator),
		"pkg_source_velocimeter.Pool": new(pkg_source_velocimeter.Pool),
		"pkg_source_velodrome.PoolSimulator": new(pkg_source_velodrome.PoolSimulator),
		"pkg_source_velodromev2.PoolSimulator": new(pkg_source_velodromev2.PoolSimulator),
		"pkg_source_vooi.PoolSimulator": new(pkg_source_vooi.PoolSimulator),
		"pkg_source_wombat_wombatlsd.PoolSimulator": new(pkg_source_wombat_wombatlsd.PoolSimulator),
		"pkg_source_wombat_wombatmain.PoolSimulator": new(pkg_source_wombat_wombatmain.PoolSimulator),
		"pkg_source_woofiv2.PoolSimulator": new(pkg_source_woofiv2.PoolSimulator),
		"pkg_source_zkerafinance.PoolSimulator": new(pkg_source_zkerafinance.PoolSimulator),
	}
}
