package cpmm

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"math/big"

	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.poolTokenNumber, err = dc.ReadUint()
	if err != nil {
		err = msgp.WrapError(err, "poolTokenNumber")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "weights")
		return
	}
	if cap(z.weights) >= int(zb0002) {
		z.weights = (z.weights)[:zb0002]
	} else {
		z.weights = make([]*big.Int, zb0002)
	}
	for za0001 := range z.weights {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "weights", za0001)
				return
			}
			z.weights[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.weights[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "weights", za0001)
					return
				}
				z.weights[za0001] = msgpencode.DecodeInt(zb0003)
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "sumWeight")
			return
		}
		z.sumWeight = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.sumWeight))
			if err != nil {
				err = msgp.WrapError(err, "sumWeight")
				return
			}
			z.sumWeight = msgpencode.DecodeInt(zb0004)
		}
	}
	z.fee1e9, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "fee1e9")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "feeMultiplier")
			return
		}
		z.feeMultiplier = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.feeMultiplier))
			if err != nil {
				err = msgp.WrapError(err, "feeMultiplier")
				return
			}
			z.feeMultiplier = msgpencode.DecodeInt(zb0005)
		}
	}
	z.isLastWithdrawInTheSameBlock, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "isLastWithdrawInTheSameBlock")
		return
	}
	z.vault, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.nativeTokenIndex, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "nativeTokenIndex")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 9
	err = en.Append(0x99)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteUint(z.poolTokenNumber)
	if err != nil {
		err = msgp.WrapError(err, "poolTokenNumber")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.weights)))
	if err != nil {
		err = msgp.WrapError(err, "weights")
		return
	}
	for za0001 := range z.weights {
		if z.weights[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeInt(z.weights[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "weights", za0001)
				return
			}
		}
	}
	if z.sumWeight == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.sumWeight))
		if err != nil {
			err = msgp.WrapError(err, "sumWeight")
			return
		}
	}
	err = en.WriteUint32(z.fee1e9)
	if err != nil {
		err = msgp.WrapError(err, "fee1e9")
		return
	}
	if z.feeMultiplier == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.feeMultiplier))
		if err != nil {
			err = msgp.WrapError(err, "feeMultiplier")
			return
		}
	}
	err = en.WriteBool(z.isLastWithdrawInTheSameBlock)
	if err != nil {
		err = msgp.WrapError(err, "isLastWithdrawInTheSameBlock")
		return
	}
	err = en.WriteString(z.vault)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	err = en.WriteInt(z.nativeTokenIndex)
	if err != nil {
		err = msgp.WrapError(err, "nativeTokenIndex")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendUint(o, z.poolTokenNumber)
	o = msgp.AppendArrayHeader(o, uint32(len(z.weights)))
	for za0001 := range z.weights {
		if z.weights[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.weights[za0001]))
		}
	}
	if z.sumWeight == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.sumWeight))
	}
	o = msgp.AppendUint32(o, z.fee1e9)
	if z.feeMultiplier == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.feeMultiplier))
	}
	o = msgp.AppendBool(o, z.isLastWithdrawInTheSameBlock)
	o = msgp.AppendString(o, z.vault)
	o = msgp.AppendInt(o, z.nativeTokenIndex)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.poolTokenNumber, bts, err = msgp.ReadUintBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolTokenNumber")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "weights")
		return
	}
	if cap(z.weights) >= int(zb0002) {
		z.weights = (z.weights)[:zb0002]
	} else {
		z.weights = make([]*big.Int, zb0002)
	}
	for za0001 := range z.weights {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.weights[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.weights[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "weights", za0001)
					return
				}
				z.weights[za0001] = msgpencode.DecodeInt(zb0003)
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.sumWeight = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.sumWeight))
			if err != nil {
				err = msgp.WrapError(err, "sumWeight")
				return
			}
			z.sumWeight = msgpencode.DecodeInt(zb0004)
		}
	}
	z.fee1e9, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "fee1e9")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.feeMultiplier = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.feeMultiplier))
			if err != nil {
				err = msgp.WrapError(err, "feeMultiplier")
				return
			}
			z.feeMultiplier = msgpencode.DecodeInt(zb0005)
		}
	}
	z.isLastWithdrawInTheSameBlock, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "isLastWithdrawInTheSameBlock")
		return
	}
	z.vault, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.nativeTokenIndex, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "nativeTokenIndex")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.UintSize + msgp.ArrayHeaderSize
	for za0001 := range z.weights {
		if z.weights[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.weights[za0001]))
		}
	}
	if z.sumWeight == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.sumWeight))
	}
	s += msgp.Uint32Size
	if z.feeMultiplier == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.feeMultiplier))
	}
	s += msgp.BoolSize + msgp.StringPrefixSize + len(z.vault) + msgp.IntSize
	return
}
