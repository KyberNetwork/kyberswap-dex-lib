package bancorv21

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "innerPoolByAnchor")
		return
	}
	if z.innerPoolByAnchor == nil {
		z.innerPoolByAnchor = make(map[string]*entity.Pool, zb0002)
	} else if len(z.innerPoolByAnchor) > 0 {
		for key := range z.innerPoolByAnchor {
			delete(z.innerPoolByAnchor, key)
		}
	}
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 *entity.Pool
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "innerPoolByAnchor")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "innerPoolByAnchor", za0001)
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(entity.Pool)
			}
			err = za0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "innerPoolByAnchor", za0001)
				return
			}
		}
		z.innerPoolByAnchor[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "anchorsByConvertibleToken")
		return
	}
	if z.anchorsByConvertibleToken == nil {
		z.anchorsByConvertibleToken = make(map[string][]string, zb0003)
	} else if len(z.anchorsByConvertibleToken) > 0 {
		for key := range z.anchorsByConvertibleToken {
			delete(z.anchorsByConvertibleToken, key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var za0003 string
		var za0004 []string
		za0003, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "anchorsByConvertibleToken")
			return
		}
		var zb0004 uint32
		zb0004, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "anchorsByConvertibleToken", za0003)
			return
		}
		if cap(za0004) >= int(zb0004) {
			za0004 = (za0004)[:zb0004]
		} else {
			za0004 = make([]string, zb0004)
		}
		for za0005 := range za0004 {
			za0004[za0005], err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "anchorsByConvertibleToken", za0003, za0005)
				return
			}
		}
		z.anchorsByConvertibleToken[za0003] = za0004
	}
	var zb0005 uint32
	zb0005, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "tokensByLpAddress")
		return
	}
	if z.tokensByLpAddress == nil {
		z.tokensByLpAddress = make(map[string][]string, zb0005)
	} else if len(z.tokensByLpAddress) > 0 {
		for key := range z.tokensByLpAddress {
			delete(z.tokensByLpAddress, key)
		}
	}
	for zb0005 > 0 {
		zb0005--
		var za0006 string
		var za0007 []string
		za0006, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "tokensByLpAddress")
			return
		}
		var zb0006 uint32
		zb0006, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "tokensByLpAddress", za0006)
			return
		}
		if cap(za0007) >= int(zb0006) {
			za0007 = (za0007)[:zb0006]
		} else {
			za0007 = make([]string, zb0006)
		}
		for za0008 := range za0007 {
			za0007[za0008], err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "tokensByLpAddress", za0006, za0008)
				return
			}
		}
		z.tokensByLpAddress[za0006] = za0007
	}
	z.anchorTokenPathFinder, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "anchorTokenPathFinder")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x96)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.innerPoolByAnchor)))
	if err != nil {
		err = msgp.WrapError(err, "innerPoolByAnchor")
		return
	}
	for za0001, za0002 := range z.innerPoolByAnchor {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "innerPoolByAnchor")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "innerPoolByAnchor", za0001)
				return
			}
		}
	}
	err = en.WriteMapHeader(uint32(len(z.anchorsByConvertibleToken)))
	if err != nil {
		err = msgp.WrapError(err, "anchorsByConvertibleToken")
		return
	}
	for za0003, za0004 := range z.anchorsByConvertibleToken {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "anchorsByConvertibleToken")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0004)))
		if err != nil {
			err = msgp.WrapError(err, "anchorsByConvertibleToken", za0003)
			return
		}
		for za0005 := range za0004 {
			err = en.WriteString(za0004[za0005])
			if err != nil {
				err = msgp.WrapError(err, "anchorsByConvertibleToken", za0003, za0005)
				return
			}
		}
	}
	err = en.WriteMapHeader(uint32(len(z.tokensByLpAddress)))
	if err != nil {
		err = msgp.WrapError(err, "tokensByLpAddress")
		return
	}
	for za0006, za0007 := range z.tokensByLpAddress {
		err = en.WriteString(za0006)
		if err != nil {
			err = msgp.WrapError(err, "tokensByLpAddress")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0007)))
		if err != nil {
			err = msgp.WrapError(err, "tokensByLpAddress", za0006)
			return
		}
		for za0008 := range za0007 {
			err = en.WriteString(za0007[za0008])
			if err != nil {
				err = msgp.WrapError(err, "tokensByLpAddress", za0006, za0008)
				return
			}
		}
	}
	err = en.WriteString(z.anchorTokenPathFinder)
	if err != nil {
		err = msgp.WrapError(err, "anchorTokenPathFinder")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 6
	o = append(o, 0x96)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.innerPoolByAnchor)))
	for za0001, za0002 := range z.innerPoolByAnchor {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "innerPoolByAnchor", za0001)
				return
			}
		}
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.anchorsByConvertibleToken)))
	for za0003, za0004 := range z.anchorsByConvertibleToken {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendArrayHeader(o, uint32(len(za0004)))
		for za0005 := range za0004 {
			o = msgp.AppendString(o, za0004[za0005])
		}
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.tokensByLpAddress)))
	for za0006, za0007 := range z.tokensByLpAddress {
		o = msgp.AppendString(o, za0006)
		o = msgp.AppendArrayHeader(o, uint32(len(za0007)))
		for za0008 := range za0007 {
			o = msgp.AppendString(o, za0007[za0008])
		}
	}
	o = msgp.AppendString(o, z.anchorTokenPathFinder)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "innerPoolByAnchor")
		return
	}
	if z.innerPoolByAnchor == nil {
		z.innerPoolByAnchor = make(map[string]*entity.Pool, zb0002)
	} else if len(z.innerPoolByAnchor) > 0 {
		for key := range z.innerPoolByAnchor {
			delete(z.innerPoolByAnchor, key)
		}
	}
	for zb0002 > 0 {
		var za0001 string
		var za0002 *entity.Pool
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "innerPoolByAnchor")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(entity.Pool)
			}
			bts, err = za0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "innerPoolByAnchor", za0001)
				return
			}
		}
		z.innerPoolByAnchor[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "anchorsByConvertibleToken")
		return
	}
	if z.anchorsByConvertibleToken == nil {
		z.anchorsByConvertibleToken = make(map[string][]string, zb0003)
	} else if len(z.anchorsByConvertibleToken) > 0 {
		for key := range z.anchorsByConvertibleToken {
			delete(z.anchorsByConvertibleToken, key)
		}
	}
	for zb0003 > 0 {
		var za0003 string
		var za0004 []string
		zb0003--
		za0003, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "anchorsByConvertibleToken")
			return
		}
		var zb0004 uint32
		zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "anchorsByConvertibleToken", za0003)
			return
		}
		if cap(za0004) >= int(zb0004) {
			za0004 = (za0004)[:zb0004]
		} else {
			za0004 = make([]string, zb0004)
		}
		for za0005 := range za0004 {
			za0004[za0005], bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "anchorsByConvertibleToken", za0003, za0005)
				return
			}
		}
		z.anchorsByConvertibleToken[za0003] = za0004
	}
	var zb0005 uint32
	zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "tokensByLpAddress")
		return
	}
	if z.tokensByLpAddress == nil {
		z.tokensByLpAddress = make(map[string][]string, zb0005)
	} else if len(z.tokensByLpAddress) > 0 {
		for key := range z.tokensByLpAddress {
			delete(z.tokensByLpAddress, key)
		}
	}
	for zb0005 > 0 {
		var za0006 string
		var za0007 []string
		zb0005--
		za0006, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "tokensByLpAddress")
			return
		}
		var zb0006 uint32
		zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "tokensByLpAddress", za0006)
			return
		}
		if cap(za0007) >= int(zb0006) {
			za0007 = (za0007)[:zb0006]
		} else {
			za0007 = make([]string, zb0006)
		}
		for za0008 := range za0007 {
			za0007[za0008], bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "tokensByLpAddress", za0006, za0008)
				return
			}
		}
		z.tokensByLpAddress[za0006] = za0007
	}
	z.anchorTokenPathFinder, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "anchorTokenPathFinder")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + z.gas.Msgsize() + msgp.MapHeaderSize
	if z.innerPoolByAnchor != nil {
		for za0001, za0002 := range z.innerPoolByAnchor {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += msgp.MapHeaderSize
	if z.anchorsByConvertibleToken != nil {
		for za0003, za0004 := range z.anchorsByConvertibleToken {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.ArrayHeaderSize
			for za0005 := range za0004 {
				s += msgp.StringPrefixSize + len(za0004[za0005])
			}
		}
	}
	s += msgp.MapHeaderSize
	if z.tokensByLpAddress != nil {
		for za0006, za0007 := range z.tokensByLpAddress {
			_ = za0007
			s += msgp.StringPrefixSize + len(za0006) + msgp.ArrayHeaderSize
			for za0008 := range za0007 {
				s += msgp.StringPrefixSize + len(za0007[za0008])
			}
		}
	}
	s += msgp.StringPrefixSize + len(z.anchorTokenPathFinder)
	return
}
