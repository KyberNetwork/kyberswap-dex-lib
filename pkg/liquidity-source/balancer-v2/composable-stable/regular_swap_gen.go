package composablestable

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *regularSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.bptIndex, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "bptIndex")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0002) {
		z.scalingFactors = (z.scalingFactors)[:zb0002]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0002)
	}
	for za0001 := range z.scalingFactors {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0003)
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "amp")
			return
		}
		z.amp = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeUint256(z.amp))
			if err != nil {
				err = msgp.WrapError(err, "amp")
				return
			}
			z.amp = msgpencode.DecodeUint256(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0005)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *regularSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteInt(z.bptIndex)
	if err != nil {
		err = msgp.WrapError(err, "bptIndex")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.scalingFactors)))
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
		}
	}
	if z.amp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.amp))
		if err != nil {
			err = msgp.WrapError(err, "amp")
			return
		}
	}
	if z.swapFeePercentage == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *regularSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendInt(o, z.bptIndex)
	o = msgp.AppendArrayHeader(o, uint32(len(z.scalingFactors)))
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	if z.amp == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.amp))
	}
	if z.swapFeePercentage == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *regularSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.bptIndex, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "bptIndex")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0002) {
		z.scalingFactors = (z.scalingFactors)[:zb0002]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0002)
	}
	for za0001 := range z.scalingFactors {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0003)
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.amp = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.amp))
			if err != nil {
				err = msgp.WrapError(err, "amp")
				return
			}
			z.amp = msgpencode.DecodeUint256(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0005)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *regularSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.IntSize + msgp.ArrayHeaderSize
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	if z.amp == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.amp))
	}
	if z.swapFeePercentage == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	return
}
