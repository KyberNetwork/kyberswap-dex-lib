package composablestable

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	z.canNotUpdateTokenRates, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "canNotUpdateTokenRates")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "regularSimulator")
			return
		}
		z.regularSimulator = nil
	} else {
		if z.regularSimulator == nil {
			z.regularSimulator = new(regularSimulator)
		}
		err = z.regularSimulator.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "regularSimulator")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "bptSimulator")
			return
		}
		z.bptSimulator = nil
	} else {
		if z.bptSimulator == nil {
			z.bptSimulator = new(bptSimulator)
		}
		err = z.bptSimulator.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "bptSimulator")
			return
		}
	}
	z.vault, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.poolID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	z.poolTypeVer, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.paused)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	err = en.WriteBool(z.canNotUpdateTokenRates)
	if err != nil {
		err = msgp.WrapError(err, "canNotUpdateTokenRates")
		return
	}
	if z.regularSimulator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.regularSimulator.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "regularSimulator")
			return
		}
	}
	if z.bptSimulator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.bptSimulator.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "bptSimulator")
			return
		}
	}
	err = en.WriteString(z.vault)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	err = en.WriteString(z.poolID)
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	err = en.WriteInt(z.poolTypeVer)
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.paused)
	o = msgp.AppendBool(o, z.canNotUpdateTokenRates)
	if z.regularSimulator == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.regularSimulator.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "regularSimulator")
			return
		}
	}
	if z.bptSimulator == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.bptSimulator.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "bptSimulator")
			return
		}
	}
	o = msgp.AppendString(o, z.vault)
	o = msgp.AppendString(o, z.poolID)
	o = msgp.AppendInt(o, z.poolTypeVer)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	z.canNotUpdateTokenRates, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "canNotUpdateTokenRates")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.regularSimulator = nil
	} else {
		if z.regularSimulator == nil {
			z.regularSimulator = new(regularSimulator)
		}
		bts, err = z.regularSimulator.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "regularSimulator")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.bptSimulator = nil
	} else {
		if z.bptSimulator == nil {
			z.bptSimulator = new(bptSimulator)
		}
		bts, err = z.bptSimulator.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "bptSimulator")
			return
		}
	}
	z.vault, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.poolID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	z.poolTypeVer, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.BoolSize + msgp.BoolSize
	if z.regularSimulator == nil {
		s += msgp.NilSize
	} else {
		s += z.regularSimulator.Msgsize()
	}
	if z.bptSimulator == nil {
		s += msgp.NilSize
	} else {
		s += z.bptSimulator.Msgsize()
	}
	s += msgp.StringPrefixSize + len(z.vault) + msgp.StringPrefixSize + len(z.poolID) + msgp.IntSize
	return
}
