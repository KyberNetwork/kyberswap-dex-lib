package composablestable

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *bptSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 14 {
		err = msgp.ArrayError{Wanted: 14, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.bptIndex, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "bptIndex")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "bptTotalSupply")
			return
		}
		z.bptTotalSupply = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.bptTotalSupply))
			if err != nil {
				err = msgp.WrapError(err, "bptTotalSupply")
				return
			}
			z.bptTotalSupply = msgpencode.DecodeUint256(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "amp")
			return
		}
		z.amp = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256(z.amp))
			if err != nil {
				err = msgp.WrapError(err, "amp")
				return
			}
			z.amp = msgpencode.DecodeUint256(zb0003)
		}
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0004) {
		z.scalingFactors = (z.scalingFactors)[:zb0004]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0004)
	}
	for za0001 := range z.scalingFactors {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0005 []byte
				zb0005, err = dc.ReadBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0005)
			}
		}
	}
	err = z.lastJoinExit.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "lastJoinExit")
		return
	}
	var zb0006 uint32
	zb0006, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "rateProviders")
		return
	}
	if cap(z.rateProviders) >= int(zb0006) {
		z.rateProviders = (z.rateProviders)[:zb0006]
	} else {
		z.rateProviders = make([]string, zb0006)
	}
	for za0002 := range z.rateProviders {
		z.rateProviders[za0002], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "rateProviders", za0002)
			return
		}
	}
	var zb0007 uint32
	zb0007, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "tokenRateCaches")
		return
	}
	if cap(z.tokenRateCaches) >= int(zb0007) {
		z.tokenRateCaches = (z.tokenRateCaches)[:zb0007]
	} else {
		z.tokenRateCaches = make([]TokenRateCache, zb0007)
	}
	for za0003 := range z.tokenRateCaches {
		err = z.tokenRateCaches[za0003].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "tokenRateCaches", za0003)
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "protocolFeePercentageCache")
		return
	}
	if z.protocolFeePercentageCache == nil {
		z.protocolFeePercentageCache = make(map[string]*uint256.Int, zb0009)
	} else if len(z.protocolFeePercentageCache) > 0 {
		for key := range z.protocolFeePercentageCache {
			delete(z.protocolFeePercentageCache, key)
		}
	}
	var field []byte
	_ = field
	for zb0009 > 0 {
		zb0009--
		var za0004 string
		var za0005 *uint256.Int
		za0004, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "protocolFeePercentageCache")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "protocolFeePercentageCache", za0004)
				return
			}
			za0005 = nil
		} else {
			{
				var zb0010 []byte
				zb0010, err = dc.ReadBytes(msgpencode.EncodeUint256(za0005))
				if err != nil {
					err = msgp.WrapError(err, "protocolFeePercentageCache", za0004)
					return
				}
				za0005 = msgpencode.DecodeUint256(zb0010)
			}
		}
		z.protocolFeePercentageCache[za0004] = za0005
	}
	var zb0011 uint32
	zb0011, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "tokenExemptFromYieldProtocolFee")
		return
	}
	if cap(z.tokenExemptFromYieldProtocolFee) >= int(zb0011) {
		z.tokenExemptFromYieldProtocolFee = (z.tokenExemptFromYieldProtocolFee)[:zb0011]
	} else {
		z.tokenExemptFromYieldProtocolFee = make([]bool, zb0011)
	}
	for za0006 := range z.tokenExemptFromYieldProtocolFee {
		z.tokenExemptFromYieldProtocolFee[za0006], err = dc.ReadBool()
		if err != nil {
			err = msgp.WrapError(err, "tokenExemptFromYieldProtocolFee", za0006)
			return
		}
	}
	z.exemptFromYieldProtocolFee, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "exemptFromYieldProtocolFee")
		return
	}
	z.inRecoveryMode, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "inRecoveryMode")
		return
	}
	z.poolTypeVer, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *bptSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 14
	err = en.Append(0x9e)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteInt(z.bptIndex)
	if err != nil {
		err = msgp.WrapError(err, "bptIndex")
		return
	}
	if z.bptTotalSupply == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.bptTotalSupply))
		if err != nil {
			err = msgp.WrapError(err, "bptTotalSupply")
			return
		}
	}
	if z.amp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.amp))
		if err != nil {
			err = msgp.WrapError(err, "amp")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.scalingFactors)))
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
		}
	}
	err = z.lastJoinExit.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "lastJoinExit")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.rateProviders)))
	if err != nil {
		err = msgp.WrapError(err, "rateProviders")
		return
	}
	for za0002 := range z.rateProviders {
		err = en.WriteString(z.rateProviders[za0002])
		if err != nil {
			err = msgp.WrapError(err, "rateProviders", za0002)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.tokenRateCaches)))
	if err != nil {
		err = msgp.WrapError(err, "tokenRateCaches")
		return
	}
	for za0003 := range z.tokenRateCaches {
		err = z.tokenRateCaches[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "tokenRateCaches", za0003)
			return
		}
	}
	if z.swapFeePercentage == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.protocolFeePercentageCache)))
	if err != nil {
		err = msgp.WrapError(err, "protocolFeePercentageCache")
		return
	}
	for za0004, za0005 := range z.protocolFeePercentageCache {
		err = en.WriteString(za0004)
		if err != nil {
			err = msgp.WrapError(err, "protocolFeePercentageCache")
			return
		}
		if za0005 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(za0005))
			if err != nil {
				err = msgp.WrapError(err, "protocolFeePercentageCache", za0004)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.tokenExemptFromYieldProtocolFee)))
	if err != nil {
		err = msgp.WrapError(err, "tokenExemptFromYieldProtocolFee")
		return
	}
	for za0006 := range z.tokenExemptFromYieldProtocolFee {
		err = en.WriteBool(z.tokenExemptFromYieldProtocolFee[za0006])
		if err != nil {
			err = msgp.WrapError(err, "tokenExemptFromYieldProtocolFee", za0006)
			return
		}
	}
	err = en.WriteBool(z.exemptFromYieldProtocolFee)
	if err != nil {
		err = msgp.WrapError(err, "exemptFromYieldProtocolFee")
		return
	}
	err = en.WriteBool(z.inRecoveryMode)
	if err != nil {
		err = msgp.WrapError(err, "inRecoveryMode")
		return
	}
	err = en.WriteInt(z.poolTypeVer)
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *bptSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 14
	o = append(o, 0x9e)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendInt(o, z.bptIndex)
	if z.bptTotalSupply == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.bptTotalSupply))
	}
	if z.amp == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.amp))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.scalingFactors)))
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	o, err = z.lastJoinExit.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "lastJoinExit")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.rateProviders)))
	for za0002 := range z.rateProviders {
		o = msgp.AppendString(o, z.rateProviders[za0002])
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.tokenRateCaches)))
	for za0003 := range z.tokenRateCaches {
		o, err = z.tokenRateCaches[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "tokenRateCaches", za0003)
			return
		}
	}
	if z.swapFeePercentage == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.protocolFeePercentageCache)))
	for za0004, za0005 := range z.protocolFeePercentageCache {
		o = msgp.AppendString(o, za0004)
		if za0005 == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(za0005))
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.tokenExemptFromYieldProtocolFee)))
	for za0006 := range z.tokenExemptFromYieldProtocolFee {
		o = msgp.AppendBool(o, z.tokenExemptFromYieldProtocolFee[za0006])
	}
	o = msgp.AppendBool(o, z.exemptFromYieldProtocolFee)
	o = msgp.AppendBool(o, z.inRecoveryMode)
	o = msgp.AppendInt(o, z.poolTypeVer)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *bptSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 14 {
		err = msgp.ArrayError{Wanted: 14, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.bptIndex, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "bptIndex")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.bptTotalSupply = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.bptTotalSupply))
			if err != nil {
				err = msgp.WrapError(err, "bptTotalSupply")
				return
			}
			z.bptTotalSupply = msgpencode.DecodeUint256(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.amp = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.amp))
			if err != nil {
				err = msgp.WrapError(err, "amp")
				return
			}
			z.amp = msgpencode.DecodeUint256(zb0003)
		}
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0004) {
		z.scalingFactors = (z.scalingFactors)[:zb0004]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0004)
	}
	for za0001 := range z.scalingFactors {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0005 []byte
				zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0005)
			}
		}
	}
	bts, err = z.lastJoinExit.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "lastJoinExit")
		return
	}
	var zb0006 uint32
	zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "rateProviders")
		return
	}
	if cap(z.rateProviders) >= int(zb0006) {
		z.rateProviders = (z.rateProviders)[:zb0006]
	} else {
		z.rateProviders = make([]string, zb0006)
	}
	for za0002 := range z.rateProviders {
		z.rateProviders[za0002], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "rateProviders", za0002)
			return
		}
	}
	var zb0007 uint32
	zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "tokenRateCaches")
		return
	}
	if cap(z.tokenRateCaches) >= int(zb0007) {
		z.tokenRateCaches = (z.tokenRateCaches)[:zb0007]
	} else {
		z.tokenRateCaches = make([]TokenRateCache, zb0007)
	}
	for za0003 := range z.tokenRateCaches {
		bts, err = z.tokenRateCaches[za0003].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "tokenRateCaches", za0003)
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "protocolFeePercentageCache")
		return
	}
	if z.protocolFeePercentageCache == nil {
		z.protocolFeePercentageCache = make(map[string]*uint256.Int, zb0009)
	} else if len(z.protocolFeePercentageCache) > 0 {
		for key := range z.protocolFeePercentageCache {
			delete(z.protocolFeePercentageCache, key)
		}
	}
	var field []byte
	_ = field
	for zb0009 > 0 {
		var za0004 string
		var za0005 *uint256.Int
		zb0009--
		za0004, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "protocolFeePercentageCache")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0005 = nil
		} else {
			{
				var zb0010 []byte
				zb0010, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(za0005))
				if err != nil {
					err = msgp.WrapError(err, "protocolFeePercentageCache", za0004)
					return
				}
				za0005 = msgpencode.DecodeUint256(zb0010)
			}
		}
		z.protocolFeePercentageCache[za0004] = za0005
	}
	var zb0011 uint32
	zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "tokenExemptFromYieldProtocolFee")
		return
	}
	if cap(z.tokenExemptFromYieldProtocolFee) >= int(zb0011) {
		z.tokenExemptFromYieldProtocolFee = (z.tokenExemptFromYieldProtocolFee)[:zb0011]
	} else {
		z.tokenExemptFromYieldProtocolFee = make([]bool, zb0011)
	}
	for za0006 := range z.tokenExemptFromYieldProtocolFee {
		z.tokenExemptFromYieldProtocolFee[za0006], bts, err = msgp.ReadBoolBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "tokenExemptFromYieldProtocolFee", za0006)
			return
		}
	}
	z.exemptFromYieldProtocolFee, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "exemptFromYieldProtocolFee")
		return
	}
	z.inRecoveryMode, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "inRecoveryMode")
		return
	}
	z.poolTypeVer, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *bptSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.IntSize
	if z.bptTotalSupply == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.bptTotalSupply))
	}
	if z.amp == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.amp))
	}
	s += msgp.ArrayHeaderSize
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	s += z.lastJoinExit.Msgsize() + msgp.ArrayHeaderSize
	for za0002 := range z.rateProviders {
		s += msgp.StringPrefixSize + len(z.rateProviders[za0002])
	}
	s += msgp.ArrayHeaderSize
	for za0003 := range z.tokenRateCaches {
		s += z.tokenRateCaches[za0003].Msgsize()
	}
	if z.swapFeePercentage == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	s += msgp.MapHeaderSize
	if z.protocolFeePercentageCache != nil {
		for za0004, za0005 := range z.protocolFeePercentageCache {
			_ = za0005
			s += msgp.StringPrefixSize + len(za0004)
			if za0005 == nil {
				s += msgp.NilSize
			} else {
				s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(za0005))
			}
		}
	}
	s += msgp.ArrayHeaderSize + (len(z.tokenExemptFromYieldProtocolFee) * (msgp.BoolSize)) + msgp.BoolSize + msgp.BoolSize + msgp.IntSize
	return
}
