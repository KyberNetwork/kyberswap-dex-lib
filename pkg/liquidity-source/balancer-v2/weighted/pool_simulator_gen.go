package weighted

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 12 {
		err = msgp.ArrayError{Wanted: 12, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0002)
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0003) {
		z.scalingFactors = (z.scalingFactors)[:zb0003]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0003)
	}
	for za0001 := range z.scalingFactors {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0004 []byte
				zb0004, err = dc.ReadBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0004)
			}
		}
	}
	var zb0005 uint32
	zb0005, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "normalizedWeights")
		return
	}
	if cap(z.normalizedWeights) >= int(zb0005) {
		z.normalizedWeights = (z.normalizedWeights)[:zb0005]
	} else {
		z.normalizedWeights = make([]*uint256.Int, zb0005)
	}
	for za0002 := range z.normalizedWeights {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "normalizedWeights", za0002)
				return
			}
			z.normalizedWeights[za0002] = nil
		} else {
			{
				var zb0006 []byte
				zb0006, err = dc.ReadBytes(msgpencode.EncodeUint256(z.normalizedWeights[za0002]))
				if err != nil {
					err = msgp.WrapError(err, "normalizedWeights", za0002)
					return
				}
				z.normalizedWeights[za0002] = msgpencode.DecodeUint256(zb0006)
			}
		}
	}
	z.vault, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.poolID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	z.poolTypeVer, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	var zb0007 uint32
	zb0007, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "totalAmountsIn")
		return
	}
	if cap(z.totalAmountsIn) >= int(zb0007) {
		z.totalAmountsIn = (z.totalAmountsIn)[:zb0007]
	} else {
		z.totalAmountsIn = make([]*uint256.Int, zb0007)
	}
	for za0003 := range z.totalAmountsIn {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "totalAmountsIn", za0003)
				return
			}
			z.totalAmountsIn[za0003] = nil
		} else {
			{
				var zb0008 []byte
				zb0008, err = dc.ReadBytes(msgpencode.EncodeUint256(z.totalAmountsIn[za0003]))
				if err != nil {
					err = msgp.WrapError(err, "totalAmountsIn", za0003)
					return
				}
				z.totalAmountsIn[za0003] = msgpencode.DecodeUint256(zb0008)
			}
		}
	}
	var zb0009 uint32
	zb0009, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "scaledMaxTotalAmountsIn")
		return
	}
	if cap(z.scaledMaxTotalAmountsIn) >= int(zb0009) {
		z.scaledMaxTotalAmountsIn = (z.scaledMaxTotalAmountsIn)[:zb0009]
	} else {
		z.scaledMaxTotalAmountsIn = make([]*uint256.Int, zb0009)
	}
	for za0004 := range z.scaledMaxTotalAmountsIn {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "scaledMaxTotalAmountsIn", za0004)
				return
			}
			z.scaledMaxTotalAmountsIn[za0004] = nil
		} else {
			{
				var zb0010 []byte
				zb0010, err = dc.ReadBytes(msgpencode.EncodeUint256(z.scaledMaxTotalAmountsIn[za0004]))
				if err != nil {
					err = msgp.WrapError(err, "scaledMaxTotalAmountsIn", za0004)
					return
				}
				z.scaledMaxTotalAmountsIn[za0004] = msgpencode.DecodeUint256(zb0010)
			}
		}
	}
	var zb0011 uint32
	zb0011, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "totalAmountsOut")
		return
	}
	if cap(z.totalAmountsOut) >= int(zb0011) {
		z.totalAmountsOut = (z.totalAmountsOut)[:zb0011]
	} else {
		z.totalAmountsOut = make([]*uint256.Int, zb0011)
	}
	for za0005 := range z.totalAmountsOut {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "totalAmountsOut", za0005)
				return
			}
			z.totalAmountsOut[za0005] = nil
		} else {
			{
				var zb0012 []byte
				zb0012, err = dc.ReadBytes(msgpencode.EncodeUint256(z.totalAmountsOut[za0005]))
				if err != nil {
					err = msgp.WrapError(err, "totalAmountsOut", za0005)
					return
				}
				z.totalAmountsOut[za0005] = msgpencode.DecodeUint256(zb0012)
			}
		}
	}
	var zb0013 uint32
	zb0013, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "scaledMaxTotalAmountsOut")
		return
	}
	if cap(z.scaledMaxTotalAmountsOut) >= int(zb0013) {
		z.scaledMaxTotalAmountsOut = (z.scaledMaxTotalAmountsOut)[:zb0013]
	} else {
		z.scaledMaxTotalAmountsOut = make([]*uint256.Int, zb0013)
	}
	for za0006 := range z.scaledMaxTotalAmountsOut {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "scaledMaxTotalAmountsOut", za0006)
				return
			}
			z.scaledMaxTotalAmountsOut[za0006] = nil
		} else {
			{
				var zb0014 []byte
				zb0014, err = dc.ReadBytes(msgpencode.EncodeUint256(z.scaledMaxTotalAmountsOut[za0006]))
				if err != nil {
					err = msgp.WrapError(err, "scaledMaxTotalAmountsOut", za0006)
					return
				}
				z.scaledMaxTotalAmountsOut[za0006] = msgpencode.DecodeUint256(zb0014)
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 12
	err = en.Append(0x9c)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.paused)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if z.swapFeePercentage == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.scalingFactors)))
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.normalizedWeights)))
	if err != nil {
		err = msgp.WrapError(err, "normalizedWeights")
		return
	}
	for za0002 := range z.normalizedWeights {
		if z.normalizedWeights[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.normalizedWeights[za0002]))
			if err != nil {
				err = msgp.WrapError(err, "normalizedWeights", za0002)
				return
			}
		}
	}
	err = en.WriteString(z.vault)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	err = en.WriteString(z.poolID)
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	err = en.WriteInt(z.poolTypeVer)
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.totalAmountsIn)))
	if err != nil {
		err = msgp.WrapError(err, "totalAmountsIn")
		return
	}
	for za0003 := range z.totalAmountsIn {
		if z.totalAmountsIn[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.totalAmountsIn[za0003]))
			if err != nil {
				err = msgp.WrapError(err, "totalAmountsIn", za0003)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.scaledMaxTotalAmountsIn)))
	if err != nil {
		err = msgp.WrapError(err, "scaledMaxTotalAmountsIn")
		return
	}
	for za0004 := range z.scaledMaxTotalAmountsIn {
		if z.scaledMaxTotalAmountsIn[za0004] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.scaledMaxTotalAmountsIn[za0004]))
			if err != nil {
				err = msgp.WrapError(err, "scaledMaxTotalAmountsIn", za0004)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.totalAmountsOut)))
	if err != nil {
		err = msgp.WrapError(err, "totalAmountsOut")
		return
	}
	for za0005 := range z.totalAmountsOut {
		if z.totalAmountsOut[za0005] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.totalAmountsOut[za0005]))
			if err != nil {
				err = msgp.WrapError(err, "totalAmountsOut", za0005)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.scaledMaxTotalAmountsOut)))
	if err != nil {
		err = msgp.WrapError(err, "scaledMaxTotalAmountsOut")
		return
	}
	for za0006 := range z.scaledMaxTotalAmountsOut {
		if z.scaledMaxTotalAmountsOut[za0006] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.scaledMaxTotalAmountsOut[za0006]))
			if err != nil {
				err = msgp.WrapError(err, "scaledMaxTotalAmountsOut", za0006)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 12
	o = append(o, 0x9c)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.paused)
	if z.swapFeePercentage == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.scalingFactors)))
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.normalizedWeights)))
	for za0002 := range z.normalizedWeights {
		if z.normalizedWeights[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.normalizedWeights[za0002]))
		}
	}
	o = msgp.AppendString(o, z.vault)
	o = msgp.AppendString(o, z.poolID)
	o = msgp.AppendInt(o, z.poolTypeVer)
	o = msgp.AppendArrayHeader(o, uint32(len(z.totalAmountsIn)))
	for za0003 := range z.totalAmountsIn {
		if z.totalAmountsIn[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.totalAmountsIn[za0003]))
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.scaledMaxTotalAmountsIn)))
	for za0004 := range z.scaledMaxTotalAmountsIn {
		if z.scaledMaxTotalAmountsIn[za0004] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.scaledMaxTotalAmountsIn[za0004]))
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.totalAmountsOut)))
	for za0005 := range z.totalAmountsOut {
		if z.totalAmountsOut[za0005] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.totalAmountsOut[za0005]))
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.scaledMaxTotalAmountsOut)))
	for za0006 := range z.scaledMaxTotalAmountsOut {
		if z.scaledMaxTotalAmountsOut[za0006] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.scaledMaxTotalAmountsOut[za0006]))
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 12 {
		err = msgp.ArrayError{Wanted: 12, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0002)
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0003) {
		z.scalingFactors = (z.scalingFactors)[:zb0003]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0003)
	}
	for za0001 := range z.scalingFactors {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0004 []byte
				zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0004)
			}
		}
	}
	var zb0005 uint32
	zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "normalizedWeights")
		return
	}
	if cap(z.normalizedWeights) >= int(zb0005) {
		z.normalizedWeights = (z.normalizedWeights)[:zb0005]
	} else {
		z.normalizedWeights = make([]*uint256.Int, zb0005)
	}
	for za0002 := range z.normalizedWeights {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.normalizedWeights[za0002] = nil
		} else {
			{
				var zb0006 []byte
				zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.normalizedWeights[za0002]))
				if err != nil {
					err = msgp.WrapError(err, "normalizedWeights", za0002)
					return
				}
				z.normalizedWeights[za0002] = msgpencode.DecodeUint256(zb0006)
			}
		}
	}
	z.vault, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.poolID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	z.poolTypeVer, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolTypeVer")
		return
	}
	var zb0007 uint32
	zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "totalAmountsIn")
		return
	}
	if cap(z.totalAmountsIn) >= int(zb0007) {
		z.totalAmountsIn = (z.totalAmountsIn)[:zb0007]
	} else {
		z.totalAmountsIn = make([]*uint256.Int, zb0007)
	}
	for za0003 := range z.totalAmountsIn {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.totalAmountsIn[za0003] = nil
		} else {
			{
				var zb0008 []byte
				zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.totalAmountsIn[za0003]))
				if err != nil {
					err = msgp.WrapError(err, "totalAmountsIn", za0003)
					return
				}
				z.totalAmountsIn[za0003] = msgpencode.DecodeUint256(zb0008)
			}
		}
	}
	var zb0009 uint32
	zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "scaledMaxTotalAmountsIn")
		return
	}
	if cap(z.scaledMaxTotalAmountsIn) >= int(zb0009) {
		z.scaledMaxTotalAmountsIn = (z.scaledMaxTotalAmountsIn)[:zb0009]
	} else {
		z.scaledMaxTotalAmountsIn = make([]*uint256.Int, zb0009)
	}
	for za0004 := range z.scaledMaxTotalAmountsIn {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.scaledMaxTotalAmountsIn[za0004] = nil
		} else {
			{
				var zb0010 []byte
				zb0010, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.scaledMaxTotalAmountsIn[za0004]))
				if err != nil {
					err = msgp.WrapError(err, "scaledMaxTotalAmountsIn", za0004)
					return
				}
				z.scaledMaxTotalAmountsIn[za0004] = msgpencode.DecodeUint256(zb0010)
			}
		}
	}
	var zb0011 uint32
	zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "totalAmountsOut")
		return
	}
	if cap(z.totalAmountsOut) >= int(zb0011) {
		z.totalAmountsOut = (z.totalAmountsOut)[:zb0011]
	} else {
		z.totalAmountsOut = make([]*uint256.Int, zb0011)
	}
	for za0005 := range z.totalAmountsOut {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.totalAmountsOut[za0005] = nil
		} else {
			{
				var zb0012 []byte
				zb0012, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.totalAmountsOut[za0005]))
				if err != nil {
					err = msgp.WrapError(err, "totalAmountsOut", za0005)
					return
				}
				z.totalAmountsOut[za0005] = msgpencode.DecodeUint256(zb0012)
			}
		}
	}
	var zb0013 uint32
	zb0013, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "scaledMaxTotalAmountsOut")
		return
	}
	if cap(z.scaledMaxTotalAmountsOut) >= int(zb0013) {
		z.scaledMaxTotalAmountsOut = (z.scaledMaxTotalAmountsOut)[:zb0013]
	} else {
		z.scaledMaxTotalAmountsOut = make([]*uint256.Int, zb0013)
	}
	for za0006 := range z.scaledMaxTotalAmountsOut {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.scaledMaxTotalAmountsOut[za0006] = nil
		} else {
			{
				var zb0014 []byte
				zb0014, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.scaledMaxTotalAmountsOut[za0006]))
				if err != nil {
					err = msgp.WrapError(err, "scaledMaxTotalAmountsOut", za0006)
					return
				}
				z.scaledMaxTotalAmountsOut[za0006] = msgpencode.DecodeUint256(zb0014)
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.BoolSize
	if z.swapFeePercentage == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	s += msgp.ArrayHeaderSize
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.normalizedWeights {
		if z.normalizedWeights[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.normalizedWeights[za0002]))
		}
	}
	s += msgp.StringPrefixSize + len(z.vault) + msgp.StringPrefixSize + len(z.poolID) + msgp.IntSize + msgp.ArrayHeaderSize
	for za0003 := range z.totalAmountsIn {
		if z.totalAmountsIn[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.totalAmountsIn[za0003]))
		}
	}
	s += msgp.ArrayHeaderSize
	for za0004 := range z.scaledMaxTotalAmountsIn {
		if z.scaledMaxTotalAmountsIn[za0004] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.scaledMaxTotalAmountsIn[za0004]))
		}
	}
	s += msgp.ArrayHeaderSize
	for za0005 := range z.totalAmountsOut {
		if z.totalAmountsOut[za0005] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.totalAmountsOut[za0005]))
		}
	}
	s += msgp.ArrayHeaderSize
	for za0006 := range z.scaledMaxTotalAmountsOut {
		if z.scaledMaxTotalAmountsOut[za0006] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.scaledMaxTotalAmountsOut[za0006]))
		}
	}
	return
}
