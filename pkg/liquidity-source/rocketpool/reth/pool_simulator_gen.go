package reth

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 13 {
		err = msgp.ArrayError{Wanted: 13, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.depositEnabled, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "depositEnabled")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "minimumDeposit")
			return
		}
		z.minimumDeposit = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.minimumDeposit))
			if err != nil {
				err = msgp.WrapError(err, "minimumDeposit")
				return
			}
			z.minimumDeposit = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "maximumDepositPoolSize")
			return
		}
		z.maximumDepositPoolSize = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.maximumDepositPoolSize))
			if err != nil {
				err = msgp.WrapError(err, "maximumDepositPoolSize")
				return
			}
			z.maximumDepositPoolSize = msgpencode.DecodeInt(zb0003)
		}
	}
	z.assignDepositsEnabled, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "assignDepositsEnabled")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "depositFee")
			return
		}
		z.depositFee = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.depositFee))
			if err != nil {
				err = msgp.WrapError(err, "depositFee")
				return
			}
			z.depositFee = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "balance")
			return
		}
		z.balance = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.balance))
			if err != nil {
				err = msgp.WrapError(err, "balance")
				return
			}
			z.balance = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "effectiveCapacity")
			return
		}
		z.effectiveCapacity = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.effectiveCapacity))
			if err != nil {
				err = msgp.WrapError(err, "effectiveCapacity")
				return
			}
			z.effectiveCapacity = msgpencode.DecodeInt(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "totalETHBalance")
			return
		}
		z.totalETHBalance = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.totalETHBalance))
			if err != nil {
				err = msgp.WrapError(err, "totalETHBalance")
				return
			}
			z.totalETHBalance = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "totalRETHSupply")
			return
		}
		z.totalRETHSupply = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.totalRETHSupply))
			if err != nil {
				err = msgp.WrapError(err, "totalRETHSupply")
				return
			}
			z.totalRETHSupply = msgpencode.DecodeInt(zb0008)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "excessBalance")
			return
		}
		z.excessBalance = nil
	} else {
		{
			var zb0009 []byte
			zb0009, err = dc.ReadBytes(msgpencode.EncodeInt(z.excessBalance))
			if err != nil {
				err = msgp.WrapError(err, "excessBalance")
				return
			}
			z.excessBalance = msgpencode.DecodeInt(zb0009)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "rETHBalance")
			return
		}
		z.rETHBalance = nil
	} else {
		{
			var zb0010 []byte
			zb0010, err = dc.ReadBytes(msgpencode.EncodeInt(z.rETHBalance))
			if err != nil {
				err = msgp.WrapError(err, "rETHBalance")
				return
			}
			z.rETHBalance = msgpencode.DecodeInt(zb0010)
		}
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 13
	err = en.Append(0x9d)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.depositEnabled)
	if err != nil {
		err = msgp.WrapError(err, "depositEnabled")
		return
	}
	if z.minimumDeposit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.minimumDeposit))
		if err != nil {
			err = msgp.WrapError(err, "minimumDeposit")
			return
		}
	}
	if z.maximumDepositPoolSize == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.maximumDepositPoolSize))
		if err != nil {
			err = msgp.WrapError(err, "maximumDepositPoolSize")
			return
		}
	}
	err = en.WriteBool(z.assignDepositsEnabled)
	if err != nil {
		err = msgp.WrapError(err, "assignDepositsEnabled")
		return
	}
	if z.depositFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.depositFee))
		if err != nil {
			err = msgp.WrapError(err, "depositFee")
			return
		}
	}
	if z.balance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.balance))
		if err != nil {
			err = msgp.WrapError(err, "balance")
			return
		}
	}
	if z.effectiveCapacity == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.effectiveCapacity))
		if err != nil {
			err = msgp.WrapError(err, "effectiveCapacity")
			return
		}
	}
	if z.totalETHBalance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.totalETHBalance))
		if err != nil {
			err = msgp.WrapError(err, "totalETHBalance")
			return
		}
	}
	if z.totalRETHSupply == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.totalRETHSupply))
		if err != nil {
			err = msgp.WrapError(err, "totalRETHSupply")
			return
		}
	}
	if z.excessBalance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.excessBalance))
		if err != nil {
			err = msgp.WrapError(err, "excessBalance")
			return
		}
	}
	if z.rETHBalance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.rETHBalance))
		if err != nil {
			err = msgp.WrapError(err, "rETHBalance")
			return
		}
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 13
	o = append(o, 0x9d)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.depositEnabled)
	if z.minimumDeposit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.minimumDeposit))
	}
	if z.maximumDepositPoolSize == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.maximumDepositPoolSize))
	}
	o = msgp.AppendBool(o, z.assignDepositsEnabled)
	if z.depositFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.depositFee))
	}
	if z.balance == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.balance))
	}
	if z.effectiveCapacity == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.effectiveCapacity))
	}
	if z.totalETHBalance == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.totalETHBalance))
	}
	if z.totalRETHSupply == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.totalRETHSupply))
	}
	if z.excessBalance == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.excessBalance))
	}
	if z.rETHBalance == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.rETHBalance))
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 13 {
		err = msgp.ArrayError{Wanted: 13, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.depositEnabled, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "depositEnabled")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.minimumDeposit = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.minimumDeposit))
			if err != nil {
				err = msgp.WrapError(err, "minimumDeposit")
				return
			}
			z.minimumDeposit = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.maximumDepositPoolSize = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.maximumDepositPoolSize))
			if err != nil {
				err = msgp.WrapError(err, "maximumDepositPoolSize")
				return
			}
			z.maximumDepositPoolSize = msgpencode.DecodeInt(zb0003)
		}
	}
	z.assignDepositsEnabled, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "assignDepositsEnabled")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.depositFee = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.depositFee))
			if err != nil {
				err = msgp.WrapError(err, "depositFee")
				return
			}
			z.depositFee = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.balance = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.balance))
			if err != nil {
				err = msgp.WrapError(err, "balance")
				return
			}
			z.balance = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.effectiveCapacity = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.effectiveCapacity))
			if err != nil {
				err = msgp.WrapError(err, "effectiveCapacity")
				return
			}
			z.effectiveCapacity = msgpencode.DecodeInt(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.totalETHBalance = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.totalETHBalance))
			if err != nil {
				err = msgp.WrapError(err, "totalETHBalance")
				return
			}
			z.totalETHBalance = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.totalRETHSupply = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.totalRETHSupply))
			if err != nil {
				err = msgp.WrapError(err, "totalRETHSupply")
				return
			}
			z.totalRETHSupply = msgpencode.DecodeInt(zb0008)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.excessBalance = nil
	} else {
		{
			var zb0009 []byte
			zb0009, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.excessBalance))
			if err != nil {
				err = msgp.WrapError(err, "excessBalance")
				return
			}
			z.excessBalance = msgpencode.DecodeInt(zb0009)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.rETHBalance = nil
	} else {
		{
			var zb0010 []byte
			zb0010, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.rETHBalance))
			if err != nil {
				err = msgp.WrapError(err, "rETHBalance")
				return
			}
			z.rETHBalance = msgpencode.DecodeInt(zb0010)
		}
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.BoolSize
	if z.minimumDeposit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.minimumDeposit))
	}
	if z.maximumDepositPoolSize == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.maximumDepositPoolSize))
	}
	s += msgp.BoolSize
	if z.depositFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.depositFee))
	}
	if z.balance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.balance))
	}
	if z.effectiveCapacity == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.effectiveCapacity))
	}
	if z.totalETHBalance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.totalETHBalance))
	}
	if z.totalRETHSupply == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.totalRETHSupply))
	}
	if z.excessBalance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.excessBalance))
	}
	if z.rETHBalance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.rETHBalance))
	}
	s += z.gas.Msgsize()
	return
}
