package woofiv2

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/ethereum/go-ethereum/common"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Cloracle) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	{
		var zb0002 []byte
		zb0002, err = dc.ReadBytes((common.Address).Bytes(z.OracleAddress))
		if err != nil {
			err = msgp.WrapError(err, "OracleAddress")
			return
		}
		z.OracleAddress = common.BytesToAddress(zb0002)
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Answer")
			return
		}
		z.Answer = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256(z.Answer))
			if err != nil {
				err = msgp.WrapError(err, "Answer")
				return
			}
			z.Answer = msgpencode.DecodeUint256(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "UpdatedAt")
			return
		}
		z.UpdatedAt = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeUint256(z.UpdatedAt))
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
			z.UpdatedAt = msgpencode.DecodeUint256(zb0004)
		}
	}
	z.CloPreferred, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "CloPreferred")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Cloracle) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteBytes((common.Address).Bytes(z.OracleAddress))
	if err != nil {
		err = msgp.WrapError(err, "OracleAddress")
		return
	}
	if z.Answer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.Answer))
		if err != nil {
			err = msgp.WrapError(err, "Answer")
			return
		}
	}
	if z.UpdatedAt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.UpdatedAt))
		if err != nil {
			err = msgp.WrapError(err, "UpdatedAt")
			return
		}
	}
	err = en.WriteBool(z.CloPreferred)
	if err != nil {
		err = msgp.WrapError(err, "CloPreferred")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Cloracle) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendBytes(o, (common.Address).Bytes(z.OracleAddress))
	if z.Answer == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.Answer))
	}
	if z.UpdatedAt == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.UpdatedAt))
	}
	o = msgp.AppendBool(o, z.CloPreferred)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cloracle) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	{
		var zb0002 []byte
		zb0002, bts, err = msgp.ReadBytesBytes(bts, (common.Address).Bytes(z.OracleAddress))
		if err != nil {
			err = msgp.WrapError(err, "OracleAddress")
			return
		}
		z.OracleAddress = common.BytesToAddress(zb0002)
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Answer = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.Answer))
			if err != nil {
				err = msgp.WrapError(err, "Answer")
				return
			}
			z.Answer = msgpencode.DecodeUint256(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.UpdatedAt = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.UpdatedAt))
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
			z.UpdatedAt = msgpencode.DecodeUint256(zb0004)
		}
	}
	z.CloPreferred, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "CloPreferred")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Cloracle) Msgsize() (s int) {
	s = 1 + msgp.BytesPrefixSize + len((common.Address).Bytes(z.OracleAddress))
	if z.Answer == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.Answer))
	}
	if z.UpdatedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.UpdatedAt))
	}
	s += msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *State) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
		z.Price = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeUint256(zb0002)
		}
	}
	z.Spread, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Spread")
		return
	}
	z.Coeff, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Coeff")
		return
	}
	z.WoFeasible, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "WoFeasible")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *State) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	if z.Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.Price))
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
	}
	err = en.WriteUint64(z.Spread)
	if err != nil {
		err = msgp.WrapError(err, "Spread")
		return
	}
	err = en.WriteUint64(z.Coeff)
	if err != nil {
		err = msgp.WrapError(err, "Coeff")
		return
	}
	err = en.WriteBool(z.WoFeasible)
	if err != nil {
		err = msgp.WrapError(err, "WoFeasible")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *State) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	if z.Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.Price))
	}
	o = msgp.AppendUint64(o, z.Spread)
	o = msgp.AppendUint64(o, z.Coeff)
	o = msgp.AppendBool(o, z.WoFeasible)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *State) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Price = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeUint256(zb0002)
		}
	}
	z.Spread, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Spread")
		return
	}
	z.Coeff, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Coeff")
		return
	}
	z.WoFeasible, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "WoFeasible")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *State) Msgsize() (s int) {
	s = 1
	if z.Price == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.Price))
	}
	s += msgp.Uint64Size + msgp.Uint64Size + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TokenInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Reserve")
			return
		}
		z.Reserve = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.Reserve))
			if err != nil {
				err = msgp.WrapError(err, "Reserve")
				return
			}
			z.Reserve = msgpencode.DecodeUint256(zb0002)
		}
	}
	z.FeeRate, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "FeeRate")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TokenInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Reserve == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.Reserve))
		if err != nil {
			err = msgp.WrapError(err, "Reserve")
			return
		}
	}
	err = en.WriteUint16(z.FeeRate)
	if err != nil {
		err = msgp.WrapError(err, "FeeRate")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TokenInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Reserve == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.Reserve))
	}
	o = msgp.AppendUint16(o, z.FeeRate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TokenInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Reserve = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.Reserve))
			if err != nil {
				err = msgp.WrapError(err, "Reserve")
				return
			}
			z.Reserve = msgpencode.DecodeUint256(zb0002)
		}
	}
	z.FeeRate, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FeeRate")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TokenInfo) Msgsize() (s int) {
	s = 1
	if z.Reserve == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.Reserve))
	}
	s += msgp.Uint16Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Wooracle) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.Address, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "States")
		return
	}
	if z.States == nil {
		z.States = make(map[string]State, zb0002)
	} else if len(z.States) > 0 {
		for key := range z.States {
			delete(z.States, key)
		}
	}
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 State
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "States")
			return
		}
		err = za0002.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "States", za0001)
			return
		}
		z.States[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if z.Decimals == nil {
		z.Decimals = make(map[string]uint8, zb0003)
	} else if len(z.Decimals) > 0 {
		for key := range z.Decimals {
			delete(z.Decimals, key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var za0003 string
		var za0004 uint8
		za0003, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Decimals")
			return
		}
		za0004, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err, "Decimals", za0003)
			return
		}
		z.Decimals[za0003] = za0004
	}
	z.Timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	z.StaleDuration, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "StaleDuration")
		return
	}
	z.Bound, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Bound")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Wooracle) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x96)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.States)))
	if err != nil {
		err = msgp.WrapError(err, "States")
		return
	}
	for za0001, za0002 := range z.States {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "States")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "States", za0001)
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.Decimals)))
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	for za0003, za0004 := range z.Decimals {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "Decimals")
			return
		}
		err = en.WriteUint8(za0004)
		if err != nil {
			err = msgp.WrapError(err, "Decimals", za0003)
			return
		}
	}
	err = en.WriteInt64(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	err = en.WriteInt64(z.StaleDuration)
	if err != nil {
		err = msgp.WrapError(err, "StaleDuration")
		return
	}
	err = en.WriteUint64(z.Bound)
	if err != nil {
		err = msgp.WrapError(err, "Bound")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Wooracle) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 6
	o = append(o, 0x96)
	o = msgp.AppendString(o, z.Address)
	o = msgp.AppendMapHeader(o, uint32(len(z.States)))
	for za0001, za0002 := range z.States {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "States", za0001)
			return
		}
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.Decimals)))
	for za0003, za0004 := range z.Decimals {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendUint8(o, za0004)
	}
	o = msgp.AppendInt64(o, z.Timestamp)
	o = msgp.AppendInt64(o, z.StaleDuration)
	o = msgp.AppendUint64(o, z.Bound)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Wooracle) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.Address, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "States")
		return
	}
	if z.States == nil {
		z.States = make(map[string]State, zb0002)
	} else if len(z.States) > 0 {
		for key := range z.States {
			delete(z.States, key)
		}
	}
	for zb0002 > 0 {
		var za0001 string
		var za0002 State
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "States")
			return
		}
		bts, err = za0002.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "States", za0001)
			return
		}
		z.States[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if z.Decimals == nil {
		z.Decimals = make(map[string]uint8, zb0003)
	} else if len(z.Decimals) > 0 {
		for key := range z.Decimals {
			delete(z.Decimals, key)
		}
	}
	for zb0003 > 0 {
		var za0003 string
		var za0004 uint8
		zb0003--
		za0003, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Decimals")
			return
		}
		za0004, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Decimals", za0003)
			return
		}
		z.Decimals[za0003] = za0004
	}
	z.Timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	z.StaleDuration, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "StaleDuration")
		return
	}
	z.Bound, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Bound")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Wooracle) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Address) + msgp.MapHeaderSize
	if z.States != nil {
		for za0001, za0002 := range z.States {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += msgp.MapHeaderSize
	if z.Decimals != nil {
		for za0003, za0004 := range z.Decimals {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.Uint8Size
		}
	}
	s += msgp.Int64Size + msgp.Int64Size + msgp.Uint64Size
	return
}
