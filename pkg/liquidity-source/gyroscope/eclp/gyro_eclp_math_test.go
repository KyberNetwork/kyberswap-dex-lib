package gyroeclp

import (
	"testing"

	"github.com/KyberNetwork/int256"
	"github.com/stretchr/testify/assert"
)

func Test_calcAChiAChiInXp(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
			// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}
		)

		expected := "7519295519963"

		actual, err := GyroECLPMath.calcAChiAChiInXp(p, d)
		assert.Nil(t, err)

		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("21534214423421514125231432")
			beta   = int256.MustFromDec("35151242142152144352142315")
			c      = int256.MustFromDec("454214514512342121424214")
			s      = int256.MustFromDec("552142314423345235142324214")
			lambda = int256.MustFromDec("53214234221424142142144365")

			tauAlphaX = int256.MustFromDec("1521421553254332623423")
			tauAlphaY = int256.MustFromDec("55352143432140214225325")
			tauBetaX  = int256.MustFromDec("21543265234532543253245215")
			tauBetaY  = int256.MustFromDec("642152153253452542534246431")
			u         = int256.MustFromDec("115363465452543263253253524")
			v         = int256.MustFromDec("3265334314539257394275394645")
			w         = int256.MustFromDec("269304283214058430853402583532")
			z         = int256.MustFromDec("644304231286340583402583905215")
			dSq       = int256.MustFromDec("50000000000000000000000000000000000000000")

			// [21534214423421514125231432, 35151242142152144352142315, 454214514512342121424214, 552142314423345235142324214, 53214234221424142142144365]
			// [[1521421553254332623423, 55352143432140214225325], [21543265234532543253245215, 642152153253452542534246431], 115363465452543263253253524, 3265334314539257394275394645, 269304283214058430853402583532, 644304231286340583402583905215, 50000000000000000000000000000000000000000]

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}
		)

		expected := "-106317595963176963860294275980"

		actual, err := GyroECLPMath.calcAChiAChiInXp(p, d)
		assert.Nil(t, err)

		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("51421534214423421514125231432")
			beta   = int256.MustFromDec("35151251342142152144352142315")
			c      = int256.MustFromDec("4542145145123426235121424214")
			s      = int256.MustFromDec("55214231451423345235142324214")
			lambda = int256.MustFromDec("5321423422142414623532142144365")

			tauAlphaX = int256.MustFromDec("1521421553254332614223423")
			tauAlphaY = int256.MustFromDec("5535253426143432140214225325")
			tauBetaX  = int256.MustFromDec("2154326562345234532543253245215")
			tauBetaY  = int256.MustFromDec("64215215325345234552542534246431")
			u         = int256.MustFromDec("115363465452543623263253253524")
			v         = int256.MustFromDec("32653343146543539257394275394645")
			w         = int256.MustFromDec("2693042832140325558430853402583532")
			z         = int256.MustFromDec("644304231286340583532402583905215")
			dSq       = int256.MustFromDec("90000000000000000000000000000000000000000")

			// [51421534214423421514125231432, 35151251342142152144352142315, 4542145145123426235121424214, 55214231451423345235142324214, 5321423422142414623532142144365]
			// [[1521421553254332614223423, 5535253426143432140214225325], [2154326562345234532543253245215, 64215215325345234552542534246431], 115363465452543623263253253524, 32653343146543539257394275394645, 2693042832140325558430853402583532, 644304231286340583532402583905215, 90000000000000000000000000000000000000000]

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}
		)

		expected := "-1394710676864973574300922114887120875638745670"

		actual, err := GyroECLPMath.calcAChiAChiInXp(p, d)
		assert.Nil(t, err)

		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("4. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("514215514125231432")
			beta   = int256.MustFromDec("35151251342142152144352142315")
			c      = int256.MustFromDec("4542145235121424214")
			s      = int256.MustFromDec("55214231451423345235142324214")
			lambda = int256.MustFromDec("53214232142144365")

			tauAlphaX = int256.MustFromDec("1521421553254332614223423")
			tauAlphaY = int256.MustFromDec("5535253426143432140214225325")
			tauBetaX  = int256.MustFromDec("21543253245215")
			tauBetaY  = int256.MustFromDec("64215215325345234552542534246431")
			u         = int256.MustFromDec("115363465452543623263253253524")
			v         = int256.MustFromDec("32657394275394645")
			w         = int256.MustFromDec("2693042832140325558430853402583532")
			z         = int256.MustFromDec("644304231583905215")
			dSq       = int256.MustFromDec("900000000000000000000000000")

			// [514215514125231432, 35151251342142152144352142315, 4542145235121424214, 55214231451423345235142324214, 53214232142144365]
			// [[1521421553254332614223423, 5535253426143432140214225325], [21543253245215, 64215215325345234552542534246431], 115363465452543623263253253524, 32657394275394645, 2693042832140325558430853402583532, 644304231583905215, 900000000000000000000000000]

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}
		)

		expected := "35132042025080141711245132546066465504390157966255154622709785937"

		actual, err := GyroECLPMath.calcAChiAChiInXp(p, d)
		assert.Nil(t, err)

		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("5. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("5142158210532504131829479215514125231432")
			beta   = int256.MustFromDec("3515141249871294759214251342142152144352142315")
			c      = int256.MustFromDec("5213489540328503257340254542145235121424214")
			s      = int256.MustFromDec("555124721954935639214231451423345235142324214")
			lambda = int256.MustFromDec("532145234583290581905834902850235830232142144365")

			tauAlphaX = int256.MustFromDec("15214211248957432895732953553254332614223423")
			tauAlphaY = int256.MustFromDec("5535253250812407253405753426143432140214225325")
			tauBetaX  = int256.MustFromDec("2154542357891274975489378759839257843923253245215")
			tauBetaY  = int256.MustFromDec("6452357932534215215325345234552542534246431")
			u         = int256.MustFromDec("11533425937589325763465452543623263253253524")
			v         = int256.MustFromDec("32532976892573895738492719247657394275394645")
			w         = int256.MustFromDec("2693042832140325558430853402583532")
			z         = int256.MustFromDec("644432198753492759325304231583905215")
			dSq       = int256.MustFromDec("900005139214790000000105937458925000000000000000")

			// [5142158210532504131829479215514125231432, 3515141249871294759214251342142152144352142315, 5213489540328503257340254542145235121424214, 555124721954935639214231451423345235142324214, 532145234583290581905834902850235830232142144365]
			// [[15214211248957432895732953553254332614223423, 5535253250812407253405753426143432140214225325], [2154542357891274975489378759839257843923253245215, 6452357932534215215325345234552542534246431], 11533425937589325763465452543623263253253524, 32532976892573895738492719247657394275394645, 2693042832140325558430853402583532, 644432198753492759325304231583905215, 900005139214790000000105937458925000000000000000]

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}
		)

		expected := "-82366328799419662971603887815112727082084762053888506841678"

		actual, err := GyroECLPMath.calcAChiAChiInXp(p, d)
		assert.Nil(t, err)

		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("6. should return error", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("5142158210532504131829479215514125231432")
			beta   = int256.MustFromDec("3515141249871294759214251342142152144352142315")
			c      = int256.MustFromDec("5213489540328503257340254542145235121424214")
			s      = int256.MustFromDec("555124721954935639214231451423345235142324214")
			lambda = int256.MustFromDec("532145234834902850235830232142144365")

			tauAlphaX = int256.MustFromDec("1521423254332614223423")
			tauAlphaY = int256.MustFromDec("5535214225325")
			tauBetaX  = int256.MustFromDec("215454235789245215")
			tauBetaY  = int256.MustFromDec("6452342534246431")
			u         = int256.MustFromDec("11523263253253524")
			v         = int256.MustFromDec("3253297684275394645")
			w         = int256.MustFromDec("2693042853402583532")
			z         = int256.MustFromDec("64443204231583905215")
			dSq       = int256.MustFromDec("90000537458925000000000000000")

			// [5142158210532504131829479215514125231432, 3515141249871294759214251342142152144352142315, 5213489540328503257340254542145235121424214, 555124721954935639214231451423345235142324214, 532145234834902850235830232142144365]
			// [[1521423254332614223423, 5535214225325], [215454235789245215, 6452342534246431], 11523263253253524, 3253297684275394645, 2693042853402583532, 64443204231583905215, 90000537458925000000000000000]

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}
		)

		expected := "56240419042702837047027788699"

		actual, err := GyroECLPMath.calcAChiAChiInXp(p, d)
		assert.Nil(t, err)

		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_calcAtAChi(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]

		expected := "-38885251804"
		actual, err := GyroECLPMath.calcAtAChi(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")
		)

		// [215353254255432532421514125231432, 3516623436253242142152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]

		expected := "-7799585557653041349097132007434611812627031463388"
		actual, err := GyroECLPMath.calcAtAChi(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322142151441636498205823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("4542164552355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("553532562578239579674953234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("115352346256453987219571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("200005325124000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343214254255432532421514125231432")
			y = int256.MustFromDec("3516623543214436253242142152144352142315")
		)

		// [21535343214254255432532421514125231432, 3516623543214436253242142152144352142315, 4542164552355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 553532562578239579674953234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 115352346256453987219571964374352543263253253524, 3265645363746235325353525637539257394275394645, 26938453647552404534253283058430853402583532, 644302632286532534266523252340583402583905215, 200005325124000000054325083200062350000000000]

		expected := "7887132146191944884544337407379019375416412348150335990912"
		actual, err := GyroECLPMath.calcAtAChi(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("4. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("4542164552355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("2000053251240062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
		)

		// [21535343421514125231432, 3516623543214436244352142315, 4542164552355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 55353256257234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 26938453647552404534253283058430853402583532, 644302632286532534266523252340583402583905215, 2000053251240062350000000000]

		expected := "3988616482385571253294877363629540588280649670179831045462"
		actual, err := GyroECLPMath.calcAtAChi(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("5. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322212452105823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("454216455235532565235751947239532759342342121424214")
			s      = int256.MustFromDec("552634646253534231445521421894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("512421497591872319571964791654372965721986574392")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("6443026322851416532534266523252340583402583905215")
			dSq       = int256.MustFromDec("20000533124214921759251240062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215424892175921435343421514125231432")
			y = int256.MustFromDec("35166512974812974291569223543214436244352142315")
		)

		// [215424892175921435343421514125231432, 35166512974812974291569223543214436244352142315, 454216455235532565235751947239532759342342121424214, 552634646253534231445521421894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 55353256257234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 512421497591872319571964791654372965721986574392, 26938453647552404534253283058430853402583532, 6443026322851416532534266523252340583402583905215, 20000533124214921759251240062350000000000]

		expected := "4408952888014525817065143458921540166316832770816371263753"
		actual, err := GyroECLPMath.calcAtAChi(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_virtualOffset0(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]
		// [2153421421514125231432, 351242142152144352142315]

		expected := "437824"
		actual, err := GyroECLPMath.virtualOffset0(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")

			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [215353254255432532421514125231432, 3516623436253242142152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]
		// [215353254255432532421514125231432, 3516623436253242142152144352142315]

		expected := "684388527552752490027810011570768052212398452317"
		actual, err := GyroECLPMath.virtualOffset0(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("4542164552355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("2000053251240062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [21535343421514125231432, 3516623543214436244352142315, 4542164552355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 55353256257234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 26938453647552404534253283058430853402583532, 644302632286532534266523252340583402583905215, 2000053251240062350000000000]
		// [21535343421514125231432, 3516623543214436244352142315]

		expected := "-10240446412239513199892074726959538104176535264221310059085"
		actual, err := GyroECLPMath.virtualOffset0(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_virtualOffset1(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]
		// [2153421421514125231432, 351242142152144352142315]

		expected := "-785035"
		actual, err := GyroECLPMath.virtualOffset1(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")

			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]
		// [215353254255432532421514125231432, 3516623436253242142152144352142315]

		expected := "536216684403477140295143771273253248399752643261"
		actual, err := GyroECLPMath.virtualOffset1(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("4542164552355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("2000053251240062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [21535343421514125231432, 3516623543214436244352142315, 4542164552355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 55353256257234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 26938453647552404534253283058430853402583532, 644302632286532534266523252340583402583905215, 2000053251240062350000000000]
		// [21535343421514125231432, 3516623543214436244352142315]

		expected := "1418465217702677877996999758842229476067867368465851667656"
		actual, err := GyroECLPMath.virtualOffset1(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_maxBalances0(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]
		// [2153421421514125231432, 351242142152144352142315]

		expected := "70869740"
		actual, err := GyroECLPMath.maxBalances0(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")

			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]
		// [215353254255432532421514125231432, 3516623436253242142152144352142315]

		expected := "-3579664070834123770556082570643469864423014857540"
		actual, err := GyroECLPMath.maxBalances0(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("4542164552355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("2000053251240062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [215344325325322205823905125231432, 35124214523562352152532573896795325144352142315, 4542164552355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 55353256257234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 26938453647552404534253283058430853402583532, 644302632286532534266523252340583402583905215, 2000053251240062350000000000]
		// [21535343421514125231432, 3516623543214436244352142315]

		expected := "-2171138724122606268713490627478677585398869262922345424053"
		actual, err := GyroECLPMath.maxBalances0(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_maxBalances1(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]
		// [2153421421514125231432, 351242142152144352142315]

		expected := "1110858969"
		actual, err := GyroECLPMath.maxBalances1(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")

			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]
		// [215353254255432532421514125231432, 3516623436253242142152144352142315]

		expected := "453569730146279013419238149396659006723702086736"
		actual, err := GyroECLPMath.maxBalances1(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("35124214523562352152532573896795325144352142315")
			c      = int256.MustFromDec("4542164552355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632563543972589179512142342142142144365")

			tauAlphaX = int256.MustFromDec("15352362398753295738925325264362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("23662546341623759327925732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("26938453647552404534253283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("2000053251240062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
			r = &vector2{
				X: x,
				Y: y,
			}
		)

		// [215344325325322205823905125231432, 35124214523562352152532573896795325144352142315, 4542164552355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632563543972589179512142342142142144365]
		// [[15352362398753295738925325264362142154332623423, 55353256257234765453432140214225325], [23662546341623759327925732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 26938453647552404534253283058430853402583532, 644302632286532534266523252340583402583905215, 2000053251240062350000000000]
		// [21535343421514125231432, 3516623543214436244352142315]

		expected := "-8129241230908670754477175158007856224338248901836024944262"
		actual, err := GyroECLPMath.maxBalances1(p, d, r)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_calcMinAtxAChiySqPlusAtxSq(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]

		expected := "664027184804578223522301643"
		actual, err := GyroECLPMath.calcMinAtxAChiySqPlusAtxSq(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]

		expected := "-1174291099103395139606632807063509110500420"
		actual, err := GyroECLPMath.calcMinAtxAChiySqPlusAtxSq(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("3552532573896795325144352142315")
			c      = int256.MustFromDec("452355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632179512142342142142144365")

			tauAlphaX = int256.MustFromDec("1535236239362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("2366254634732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("269384536475283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("20000234718594738942174921543205730553000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
		)

		// [215344325325322205823905125231432, 3552532573896795325144352142315, 452355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632179512142342142142144365]
		// [[1535236239362142154332623423, 55353256257234765453432140214225325], [2366254634732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 269384536475283058430853402583532, 644302632286532534266523252340583402583905215, 20000234718594738942174921543205730553000000000]

		expected := "-2180234320610531115621268632837589343620026181138266866146"
		actual, err := GyroECLPMath.calcMinAtxAChiySqPlusAtxSq(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_calc2AtxAtyAChixAChiy(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]

		expected := "9031"
		actual, err := GyroECLPMath.calc2AtxAtyAChixAChiy(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]

		expected := "1217904787535630809639754910821079529326957579371"
		actual, err := GyroECLPMath.calc2AtxAtyAChixAChiy(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("3552532573896795325144352142315")
			c      = int256.MustFromDec("452355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632179512142342142142144365")

			tauAlphaX = int256.MustFromDec("1535236239362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("2366254634732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("269384536475283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("20000234718594738942174921543205730553000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
		)

		// [215344325325322205823905125231432, 3552532573896795325144352142315, 452355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632179512142342142142144365]
		// [[1535236239362142154332623423, 55353256257234765453432140214225325], [2366254634732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 269384536475283058430853402583532, 644302632286532534266523252340583402583905215, 20000234718594738942174921543205730553000000000]

		expected := "5031402180548738271424650853763426747438710836697316578029"
		actual, err := GyroECLPMath.calc2AtxAtyAChixAChiy(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_calcMinAtyAChixSqPlusAtySq(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]

		expected := "38764051872100864763533360144"
		actual, err := GyroECLPMath.calcMinAtyAChixSqPlusAtySq(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]

		expected := "207415479720276779873072406785494652379309091557077687595"
		actual, err := GyroECLPMath.calcMinAtyAChixSqPlusAtySq(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("3552532573896795325144352142315")
			c      = int256.MustFromDec("452355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632179512142342142142144365")

			tauAlphaX = int256.MustFromDec("1535236239362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("2366254634732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("269384536475283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("20000234718594738942174921543205730553000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
		)

		// [215344325325322205823905125231432, 3552532573896795325144352142315, 452355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632179512142342142142144365]
		// [[1535236239362142154332623423, 55353256257234765453432140214225325], [2366254634732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 269384536475283058430853402583532, 644302632286532534266523252340583402583905215, 20000234718594738942174921543205730553000000000]

		expected := "-174493412223829886669505318256484772284368868280964681743"
		actual, err := GyroECLPMath.calcMinAtyAChixSqPlusAtySq(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_calcInvariantSqrt(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153421421514125231432")
			beta   = int256.MustFromDec("351242142152144352142315")
			c      = int256.MustFromDec("4542142342121424214")
			s      = int256.MustFromDec("552142314423142324214")
			lambda = int256.MustFromDec("532142342142142144365")

			tauAlphaX = int256.MustFromDec("152142154332623423")
			tauAlphaY = int256.MustFromDec("55353432140214225325")
			tauBetaX  = int256.MustFromDec("215432632543253245215")
			tauBetaY  = int256.MustFromDec("6421521532542534246431")
			u         = int256.MustFromDec("1153452543263253253524")
			v         = int256.MustFromDec("326533539257394275394645")
			w         = int256.MustFromDec("269304283058430853402583532")
			z         = int256.MustFromDec("64430286340583402583905215")
			dSq       = int256.MustFromDec("20000000000000000000000000000000000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("2153421421514125231432")
			y = int256.MustFromDec("351242142152144352142315")
		)

		// [2153421421514125231432, 351242142152144352142315, 4542142342121424214, 552142314423142324214, 532142342142142144365]
		// [[152142154332623423, 55353432140214225325], [215432632543253245215, 6421521532542534246431], 1153452543263253253524, 326533539257394275394645, 269304283058430853402583532, 64430286340583402583905215, 20000000000000000000000000000000000000000]

		expectedVal := "198565049938062974786397"
		expectedErrValue := "0"
		actualVal, actualErrValue, err := GyroECLPMath.calcInvariantSqrt(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expectedVal, actualVal.Dec())
		assert.Equal(t, expectedErrValue, actualErrValue.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("2153443253253221421514125231432")
			beta   = int256.MustFromDec("35124214523562352152144352142315")
			c      = int256.MustFromDec("45421645523553256342342121424214")
			s      = int256.MustFromDec("5526346462535342314423142324214")
			lambda = int256.MustFromDec("53264326325632142342142142144365")

			tauAlphaX = int256.MustFromDec("1535235325264362142154332623423")
			tauAlphaY = int256.MustFromDec("5535325634765453432140214225325")
			tauBetaX  = int256.MustFromDec("236625463415432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355436421521532542534246431")
			u         = int256.MustFromDec("1153523464374352543263253253524")
			v         = int256.MustFromDec("326564536374637539257394275394645")
			w         = int256.MustFromDec("26938453647504283058430853402583532")
			z         = int256.MustFromDec("644302632286523252340583402583905215")
			dSq       = int256.MustFromDec("20000532000000054325083200062350000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("215353254255432532421514125231432")
			y = int256.MustFromDec("3516623436253242142152144352142315")
		)

		// [2153443253253221421514125231432, 35124214523562352152144352142315, 45421645523553256342342121424214, 5526346462535342314423142324214, 53264326325632142342142142144365]
		// [[1535235325264362142154332623423, 5535325634765453432140214225325], [236625463415432632543253245215, 647352355436421521532542534246431], 1153523464374352543263253253524, 326564536374637539257394275394645, 26938453647504283058430853402583532, 644302632286523252340583402583905215, 20000532000000054325083200062350000000000]

		expectedVal := "14401926292624205522534918431581807251"
		expectedErrValue := "124130174165"
		actualVal, actualErrValue, err := GyroECLPMath.calcInvariantSqrt(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expectedVal, actualVal.Dec())
		assert.Equal(t, expectedErrValue, actualErrValue.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			alpha  = int256.MustFromDec("215344325325322205823905125231432")
			beta   = int256.MustFromDec("3552532573896795325144352142315")
			c      = int256.MustFromDec("452355325652357239532759342342121424214")
			s      = int256.MustFromDec("55263464625353423144521894712947214823142324214")
			lambda = int256.MustFromDec("5326432632179512142342142142144365")

			tauAlphaX = int256.MustFromDec("1535236239362142154332623423")
			tauAlphaY = int256.MustFromDec("55353256257234765453432140214225325")
			tauBetaX  = int256.MustFromDec("2366254634732955432632543253245215")
			tauBetaY  = int256.MustFromDec("647352355625752935789354436421521532542534246431")
			u         = int256.MustFromDec("11535234625645319571964374352543263253253524")
			v         = int256.MustFromDec("3265645363746235325353525637539257394275394645")
			w         = int256.MustFromDec("269384536475283058430853402583532")
			z         = int256.MustFromDec("644302632286532534266523252340583402583905215")
			dSq       = int256.MustFromDec("20000234718594738942174921543205730553000000000")

			p = &params{
				Alpha:  alpha,
				Beta:   beta,
				C:      c,
				S:      s,
				Lambda: lambda,
			}

			d = &derivedParams{
				TauAlpha: &vector2{
					X: tauAlphaX,
					Y: tauAlphaY,
				},
				TauBeta: &vector2{
					X: tauBetaX,
					Y: tauBetaY,
				},
				U:   u,
				V:   v,
				W:   w,
				Z:   z,
				DSq: dSq,
			}

			x = int256.MustFromDec("21535343421514125231432")
			y = int256.MustFromDec("3516623543214436244352142315")
		)

		// [215344325325322205823905125231432, 3552532573896795325144352142315, 452355325652357239532759342342121424214, 55263464625353423144521894712947214823142324214, 5326432632179512142342142142144365]
		// [[1535236239362142154332623423, 55353256257234765453432140214225325], [2366254634732955432632543253245215, 647352355625752935789354436421521532542534246431], 11535234625645319571964374352543263253253524, 3265645363746235325353525637539257394275394645, 269384536475283058430853402583532, 644302632286532534266523252340583402583905215, 20000234718594738942174921543205730553000000000]

		expectedVal := "51736587128591863361589831774789891737"
		expectedErrValue := "0"
		actualVal, actualErrValue, err := GyroECLPMath.calcInvariantSqrt(x, y, p, d)
		assert.Nil(t, err)
		assert.Equal(t, expectedVal, actualVal.Dec())
		assert.Equal(t, expectedErrValue, actualErrValue.Dec())
	})
}

func Test_calcXpXpDivLambdaLambda(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			x = int256.MustFromDec("2153421421514125231432")

			r = &vector2{
				X: int256.MustFromDec("152142154332623423"),
				Y: int256.MustFromDec("55353432140214225325"),
			}
			// [152142154332623423, 55353432140214225325]

			lambda = int256.MustFromDec("532142342142142144365")
			s      = int256.MustFromDec("552142314423142324214")
			c      = int256.MustFromDec("4542142342121424214")

			tauBeta = &vector2{
				X: int256.MustFromDec("215432632543253245215"),
				Y: int256.MustFromDec("6421521532542534246431"),
			}
			// [215432632543253245215, 6421521532542534246431]

			dSq = int256.MustFromDec("241249320158430253431242")
		)

		expected := "2185825998716267202"
		actual, err := GyroECLPMath.calcXpXpDivLambdaLambda(x, r, lambda, s, c, tauBeta, dSq)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			x = int256.MustFromDec("21534214241234721514125231432")

			r = &vector2{
				X: int256.MustFromDec("15214532534232452780174242154332623423"),
				Y: int256.MustFromDec("55353436235354325352452140214225325"),
			}
			// [15214532534232452780174242154332623423, 55353436235354325352452140214225325]

			lambda = int256.MustFromDec("5321412347982342142142144365")
			s      = int256.MustFromDec("5521422352936314423142324214")
			c      = int256.MustFromDec("4542142622174925192415214342121424214")

			tauBeta = &vector2{
				X: int256.MustFromDec("215432632543514253263253253245215"),
				Y: int256.MustFromDec("64215215325412534532612415432534246431"),
			}
			// [215432632543514253263253253245215, 64215215325412534532612415432534246431]

			dSq = int256.MustFromDec("241249320158432142554654360253431242")
		)

		expected := "18803939728747314045828797487254974975501024739888467"
		actual, err := GyroECLPMath.calcXpXpDivLambdaLambda(x, r, lambda, s, c, tauBeta, dSq)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			x = int256.MustFromDec("2153421242142513124215214241234721514125231432")

			r = &vector2{
				X: int256.MustFromDec("152145325432532344232452780174242154332623423"),
				Y: int256.MustFromDec("5535343623632534521421255354325352452140214225325"),
			}
			// [152145325432532344232452780174242154332623423, 5535343623632534521421255354325352452140214225325]

			lambda = int256.MustFromDec("53214654365451254325252312347982342142142144365")
			s      = int256.MustFromDec("55214223529337219473213951974932146314423142324214")
			c      = int256.MustFromDec("4542142421917419242622174925192415214342121424214")

			tauBeta = &vector2{
				X: int256.MustFromDec("215432432142314632543514253263253253245215"),
				Y: int256.MustFromDec("6421521534252355325412534532612415432534246431"),
			}
			// [215432432142314632543514253263253253245215, 6421521534252355325412534532612415432534246431]

			dSq = int256.MustFromDec("241249320158432142554654360253431242")
		)

		expected := "5405765673461192275201551919962254805675948250112889194988"
		actual, err := GyroECLPMath.calcXpXpDivLambdaLambda(x, r, lambda, s, c, tauBeta, dSq)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

}

func Test_solveQuadraticSwap(t *testing.T) {
	t.Run("1. should return correct result", func(t *testing.T) {
		var (
			lambda = int256.MustFromDec("532142342142142144365")
			x      = int256.MustFromDec("2153421421514125231432")
			s      = int256.MustFromDec("552142314423142324214")
			c      = int256.MustFromDec("4542142342121424214")
			r      = &vector2{
				X: int256.MustFromDec("152142154332623423"),
				Y: int256.MustFromDec("55353432140214225325"),
			}
			// [152142154332623423, 55353432140214225325]
			ab = &vector2{
				X: int256.MustFromDec("215432632543253245215"),
				Y: int256.MustFromDec("6421521532542534246431"),
			}
			// [215432632543253245215, 6421521532542534246431]
			tauBeta = &vector2{
				X: int256.MustFromDec("215432632543253245215"),
				Y: int256.MustFromDec("6421521532542534246431"),
			}
			// [215432632543253245215, 6421521532542534246431]
			dSq = int256.MustFromDec("241249320158430253431242")
		)

		expected := "1843087832686808666456752"
		actual, err := GyroECLPMath.solveQuadraticSwap(lambda, x, s, c, r, ab, tauBeta, dSq)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("2. should return correct result", func(t *testing.T) {
		var (
			lambda = int256.MustFromDec("5321423412521442142421846142144365")
			x      = int256.MustFromDec("215342145135849127421514125231432")
			s      = int256.MustFromDec("23471950714552142314423142324214")
			c      = int256.MustFromDec("4542142342432142874891247121424214")
			r      = &vector2{
				X: int256.MustFromDec("15431257432539542142154332623423"),
				Y: int256.MustFromDec("55353432140214241275934752525325"),
			}
			// [15431257432539542142154332623423, 55353432140214241275934752525325]
			ab = &vector2{
				X: int256.MustFromDec("214124871295432632543253245215"),
				Y: int256.MustFromDec("6421521532541249827142534246431"),
			}
			// [214124871295432632543253245215, 6421521532541249827142534246431]
			tauBeta = &vector2{
				X: int256.MustFromDec("21543263254325324134871895445215"),
				Y: int256.MustFromDec("6421521532542124821975921534246431"),
			}
			// [21543263254325324134871895445215, 6421521532542124821975921534246431]
			dSq = int256.MustFromDec("241249320158430253442171894279431242")
		)

		expected := "-2214738381375040346389048926946072918433460562212844249"
		actual, err := GyroECLPMath.solveQuadraticSwap(lambda, x, s, c, r, ab, tauBeta, dSq)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})

	t.Run("3. should return correct result", func(t *testing.T) {
		var (
			lambda = int256.MustFromDec("5321424142893412521442142421846142144365")
			x      = int256.MustFromDec("2153421455148217849135849127421514125231432")
			s      = int256.MustFromDec("234742149721491950714552142314423142324214")
			c      = int256.MustFromDec("4542142342435432572839572142874891247121424214")
			r      = &vector2{
				X: int256.MustFromDec("112951098421405431257432539542142154332623423"),
				Y: int256.MustFromDec("553534321402145432753295739241275934752525325"),
			}
			// [112951098421405431257432539542142154332623423, 553534321402145432753295739241275934752525325]
			ab = &vector2{
				X: int256.MustFromDec("21412487523454325295432632543253245215"),
				Y: int256.MustFromDec("642152156540398930532541249827142534246431"),
			}
			// [21412487523454325295432632543253245215, 642152156540398930532541249827142534246431]
			tauBeta = &vector2{
				X: int256.MustFromDec("2154326325523954732954325324134871895445215"),
				Y: int256.MustFromDec("6421521321497195532542124821975921534246431"),
			}
			// [2154326325523954732954325324134871895445215, 6421521321497195532542124821975921534246431]
			dSq = int256.MustFromDec("2412493432598320158430253442171894279431242")
		)

		expected := "59164691021730406971201606740365378897130003125299160"
		actual, err := GyroECLPMath.solveQuadraticSwap(lambda, x, s, c, r, ab, tauBeta, dSq)
		assert.Nil(t, err)
		assert.Equal(t, expected, actual.Dec())
	})
}

func Test_calcYGivenX(t *testing.T) {

}

func Test_calcXGivenY(t *testing.T) {

}
