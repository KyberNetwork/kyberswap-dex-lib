package gyroeclp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 20 {
		err = msgp.ArrayError{Wanted: 20, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_paramsAlpha")
			return
		}
		z._paramsAlpha = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt256(z._paramsAlpha))
			if err != nil {
				err = msgp.WrapError(err, "_paramsAlpha")
				return
			}
			z._paramsAlpha = msgpencode.DecodeInt256(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_paramsBeta")
			return
		}
		z._paramsBeta = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt256(z._paramsBeta))
			if err != nil {
				err = msgp.WrapError(err, "_paramsBeta")
				return
			}
			z._paramsBeta = msgpencode.DecodeInt256(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_paramsC")
			return
		}
		z._paramsC = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt256(z._paramsC))
			if err != nil {
				err = msgp.WrapError(err, "_paramsC")
				return
			}
			z._paramsC = msgpencode.DecodeInt256(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_paramsS")
			return
		}
		z._paramsS = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt256(z._paramsS))
			if err != nil {
				err = msgp.WrapError(err, "_paramsS")
				return
			}
			z._paramsS = msgpencode.DecodeInt256(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_paramsLambda")
			return
		}
		z._paramsLambda = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt256(z._paramsLambda))
			if err != nil {
				err = msgp.WrapError(err, "_paramsLambda")
				return
			}
			z._paramsLambda = msgpencode.DecodeInt256(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_tauAlphaX")
			return
		}
		z._tauAlphaX = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt256(z._tauAlphaX))
			if err != nil {
				err = msgp.WrapError(err, "_tauAlphaX")
				return
			}
			z._tauAlphaX = msgpencode.DecodeInt256(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_tauAlphaY")
			return
		}
		z._tauAlphaY = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt256(z._tauAlphaY))
			if err != nil {
				err = msgp.WrapError(err, "_tauAlphaY")
				return
			}
			z._tauAlphaY = msgpencode.DecodeInt256(zb0008)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_tauBetaX")
			return
		}
		z._tauBetaX = nil
	} else {
		{
			var zb0009 []byte
			zb0009, err = dc.ReadBytes(msgpencode.EncodeInt256(z._tauBetaX))
			if err != nil {
				err = msgp.WrapError(err, "_tauBetaX")
				return
			}
			z._tauBetaX = msgpencode.DecodeInt256(zb0009)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_tauBetaY")
			return
		}
		z._tauBetaY = nil
	} else {
		{
			var zb0010 []byte
			zb0010, err = dc.ReadBytes(msgpencode.EncodeInt256(z._tauBetaY))
			if err != nil {
				err = msgp.WrapError(err, "_tauBetaY")
				return
			}
			z._tauBetaY = msgpencode.DecodeInt256(zb0010)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_u")
			return
		}
		z._u = nil
	} else {
		{
			var zb0011 []byte
			zb0011, err = dc.ReadBytes(msgpencode.EncodeInt256(z._u))
			if err != nil {
				err = msgp.WrapError(err, "_u")
				return
			}
			z._u = msgpencode.DecodeInt256(zb0011)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_v")
			return
		}
		z._v = nil
	} else {
		{
			var zb0012 []byte
			zb0012, err = dc.ReadBytes(msgpencode.EncodeInt256(z._v))
			if err != nil {
				err = msgp.WrapError(err, "_v")
				return
			}
			z._v = msgpencode.DecodeInt256(zb0012)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_w")
			return
		}
		z._w = nil
	} else {
		{
			var zb0013 []byte
			zb0013, err = dc.ReadBytes(msgpencode.EncodeInt256(z._w))
			if err != nil {
				err = msgp.WrapError(err, "_w")
				return
			}
			z._w = msgpencode.DecodeInt256(zb0013)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_z")
			return
		}
		z._z = nil
	} else {
		{
			var zb0014 []byte
			zb0014, err = dc.ReadBytes(msgpencode.EncodeInt256(z._z))
			if err != nil {
				err = msgp.WrapError(err, "_z")
				return
			}
			z._z = msgpencode.DecodeInt256(zb0014)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "_dSq")
			return
		}
		z._dSq = nil
	} else {
		{
			var zb0015 []byte
			zb0015, err = dc.ReadBytes(msgpencode.EncodeInt256(z._dSq))
			if err != nil {
				err = msgp.WrapError(err, "_dSq")
				return
			}
			z._dSq = msgpencode.DecodeInt256(zb0015)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0016 []byte
			zb0016, err = dc.ReadBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0016)
		}
	}
	var zb0017 uint32
	zb0017, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0017) {
		z.scalingFactors = (z.scalingFactors)[:zb0017]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0017)
	}
	for za0001 := range z.scalingFactors {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0018 []byte
				zb0018, err = dc.ReadBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0018)
			}
		}
	}
	z.vault, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.poolID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 20
	err = en.Append(0xdc, 0x0, 0x14)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.paused)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if z._paramsAlpha == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._paramsAlpha))
		if err != nil {
			err = msgp.WrapError(err, "_paramsAlpha")
			return
		}
	}
	if z._paramsBeta == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._paramsBeta))
		if err != nil {
			err = msgp.WrapError(err, "_paramsBeta")
			return
		}
	}
	if z._paramsC == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._paramsC))
		if err != nil {
			err = msgp.WrapError(err, "_paramsC")
			return
		}
	}
	if z._paramsS == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._paramsS))
		if err != nil {
			err = msgp.WrapError(err, "_paramsS")
			return
		}
	}
	if z._paramsLambda == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._paramsLambda))
		if err != nil {
			err = msgp.WrapError(err, "_paramsLambda")
			return
		}
	}
	if z._tauAlphaX == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._tauAlphaX))
		if err != nil {
			err = msgp.WrapError(err, "_tauAlphaX")
			return
		}
	}
	if z._tauAlphaY == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._tauAlphaY))
		if err != nil {
			err = msgp.WrapError(err, "_tauAlphaY")
			return
		}
	}
	if z._tauBetaX == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._tauBetaX))
		if err != nil {
			err = msgp.WrapError(err, "_tauBetaX")
			return
		}
	}
	if z._tauBetaY == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._tauBetaY))
		if err != nil {
			err = msgp.WrapError(err, "_tauBetaY")
			return
		}
	}
	if z._u == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._u))
		if err != nil {
			err = msgp.WrapError(err, "_u")
			return
		}
	}
	if z._v == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._v))
		if err != nil {
			err = msgp.WrapError(err, "_v")
			return
		}
	}
	if z._w == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._w))
		if err != nil {
			err = msgp.WrapError(err, "_w")
			return
		}
	}
	if z._z == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._z))
		if err != nil {
			err = msgp.WrapError(err, "_z")
			return
		}
	}
	if z._dSq == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt256(z._dSq))
		if err != nil {
			err = msgp.WrapError(err, "_dSq")
			return
		}
	}
	if z.swapFeePercentage == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.swapFeePercentage))
		if err != nil {
			err = msgp.WrapError(err, "swapFeePercentage")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.scalingFactors)))
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "scalingFactors", za0001)
				return
			}
		}
	}
	err = en.WriteString(z.vault)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	err = en.WriteString(z.poolID)
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 20
	o = append(o, 0xdc, 0x0, 0x14)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.paused)
	if z._paramsAlpha == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._paramsAlpha))
	}
	if z._paramsBeta == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._paramsBeta))
	}
	if z._paramsC == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._paramsC))
	}
	if z._paramsS == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._paramsS))
	}
	if z._paramsLambda == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._paramsLambda))
	}
	if z._tauAlphaX == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._tauAlphaX))
	}
	if z._tauAlphaY == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._tauAlphaY))
	}
	if z._tauBetaX == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._tauBetaX))
	}
	if z._tauBetaY == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._tauBetaY))
	}
	if z._u == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._u))
	}
	if z._v == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._v))
	}
	if z._w == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._w))
	}
	if z._z == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._z))
	}
	if z._dSq == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt256(z._dSq))
	}
	if z.swapFeePercentage == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.scalingFactors)))
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	o = msgp.AppendString(o, z.vault)
	o = msgp.AppendString(o, z.poolID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 20 {
		err = msgp.ArrayError{Wanted: 20, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._paramsAlpha = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._paramsAlpha))
			if err != nil {
				err = msgp.WrapError(err, "_paramsAlpha")
				return
			}
			z._paramsAlpha = msgpencode.DecodeInt256(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._paramsBeta = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._paramsBeta))
			if err != nil {
				err = msgp.WrapError(err, "_paramsBeta")
				return
			}
			z._paramsBeta = msgpencode.DecodeInt256(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._paramsC = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._paramsC))
			if err != nil {
				err = msgp.WrapError(err, "_paramsC")
				return
			}
			z._paramsC = msgpencode.DecodeInt256(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._paramsS = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._paramsS))
			if err != nil {
				err = msgp.WrapError(err, "_paramsS")
				return
			}
			z._paramsS = msgpencode.DecodeInt256(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._paramsLambda = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._paramsLambda))
			if err != nil {
				err = msgp.WrapError(err, "_paramsLambda")
				return
			}
			z._paramsLambda = msgpencode.DecodeInt256(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._tauAlphaX = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._tauAlphaX))
			if err != nil {
				err = msgp.WrapError(err, "_tauAlphaX")
				return
			}
			z._tauAlphaX = msgpencode.DecodeInt256(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._tauAlphaY = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._tauAlphaY))
			if err != nil {
				err = msgp.WrapError(err, "_tauAlphaY")
				return
			}
			z._tauAlphaY = msgpencode.DecodeInt256(zb0008)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._tauBetaX = nil
	} else {
		{
			var zb0009 []byte
			zb0009, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._tauBetaX))
			if err != nil {
				err = msgp.WrapError(err, "_tauBetaX")
				return
			}
			z._tauBetaX = msgpencode.DecodeInt256(zb0009)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._tauBetaY = nil
	} else {
		{
			var zb0010 []byte
			zb0010, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._tauBetaY))
			if err != nil {
				err = msgp.WrapError(err, "_tauBetaY")
				return
			}
			z._tauBetaY = msgpencode.DecodeInt256(zb0010)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._u = nil
	} else {
		{
			var zb0011 []byte
			zb0011, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._u))
			if err != nil {
				err = msgp.WrapError(err, "_u")
				return
			}
			z._u = msgpencode.DecodeInt256(zb0011)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._v = nil
	} else {
		{
			var zb0012 []byte
			zb0012, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._v))
			if err != nil {
				err = msgp.WrapError(err, "_v")
				return
			}
			z._v = msgpencode.DecodeInt256(zb0012)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._w = nil
	} else {
		{
			var zb0013 []byte
			zb0013, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._w))
			if err != nil {
				err = msgp.WrapError(err, "_w")
				return
			}
			z._w = msgpencode.DecodeInt256(zb0013)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._z = nil
	} else {
		{
			var zb0014 []byte
			zb0014, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._z))
			if err != nil {
				err = msgp.WrapError(err, "_z")
				return
			}
			z._z = msgpencode.DecodeInt256(zb0014)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z._dSq = nil
	} else {
		{
			var zb0015 []byte
			zb0015, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt256(z._dSq))
			if err != nil {
				err = msgp.WrapError(err, "_dSq")
				return
			}
			z._dSq = msgpencode.DecodeInt256(zb0015)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.swapFeePercentage = nil
	} else {
		{
			var zb0016 []byte
			zb0016, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.swapFeePercentage))
			if err != nil {
				err = msgp.WrapError(err, "swapFeePercentage")
				return
			}
			z.swapFeePercentage = msgpencode.DecodeUint256(zb0016)
		}
	}
	var zb0017 uint32
	zb0017, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "scalingFactors")
		return
	}
	if cap(z.scalingFactors) >= int(zb0017) {
		z.scalingFactors = (z.scalingFactors)[:zb0017]
	} else {
		z.scalingFactors = make([]*uint256.Int, zb0017)
	}
	for za0001 := range z.scalingFactors {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.scalingFactors[za0001] = nil
		} else {
			{
				var zb0018 []byte
				zb0018, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.scalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "scalingFactors", za0001)
					return
				}
				z.scalingFactors[za0001] = msgpencode.DecodeUint256(zb0018)
			}
		}
	}
	z.vault, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "vault")
		return
	}
	z.poolID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolID")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 3 + z.Pool.Msgsize() + msgp.BoolSize
	if z._paramsAlpha == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._paramsAlpha))
	}
	if z._paramsBeta == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._paramsBeta))
	}
	if z._paramsC == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._paramsC))
	}
	if z._paramsS == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._paramsS))
	}
	if z._paramsLambda == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._paramsLambda))
	}
	if z._tauAlphaX == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._tauAlphaX))
	}
	if z._tauAlphaY == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._tauAlphaY))
	}
	if z._tauBetaX == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._tauBetaX))
	}
	if z._tauBetaY == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._tauBetaY))
	}
	if z._u == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._u))
	}
	if z._v == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._v))
	}
	if z._w == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._w))
	}
	if z._z == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._z))
	}
	if z._dSq == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt256(z._dSq))
	}
	if z.swapFeePercentage == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.swapFeePercentage))
	}
	s += msgp.ArrayHeaderSize
	for za0001 := range z.scalingFactors {
		if z.scalingFactors[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.scalingFactors[za0001]))
		}
	}
	s += msgp.StringPrefixSize + len(z.vault) + msgp.StringPrefixSize + len(z.poolID)
	return
}
