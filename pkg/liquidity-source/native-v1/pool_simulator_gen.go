package nativev1

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Quote, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Quote)
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.Quote)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Quote, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.MarketMaker, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "MarketMaker")
		return
	}
	err = z.Token0.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Token0")
		return
	}
	err = z.Token1.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Token1")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ZeroToOnePriceLevels")
		return
	}
	if cap(z.ZeroToOnePriceLevels) >= int(zb0002) {
		z.ZeroToOnePriceLevels = (z.ZeroToOnePriceLevels)[:zb0002]
	} else {
		z.ZeroToOnePriceLevels = make([]PriceLevel, zb0002)
	}
	for za0001 := range z.ZeroToOnePriceLevels {
		err = z.ZeroToOnePriceLevels[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "ZeroToOnePriceLevels", za0001)
			return
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "OneToZeroPriceLevels")
		return
	}
	if cap(z.OneToZeroPriceLevels) >= int(zb0003) {
		z.OneToZeroPriceLevels = (z.OneToZeroPriceLevels)[:zb0003]
	} else {
		z.OneToZeroPriceLevels = make([]PriceLevel, zb0003)
	}
	for za0002 := range z.OneToZeroPriceLevels {
		err = z.OneToZeroPriceLevels[za0002].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "OneToZeroPriceLevels", za0002)
			return
		}
	}
	z.timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "timestamp")
		return
	}
	z.priceTolerance, err = dc.ReadUint()
	if err != nil {
		err = msgp.WrapError(err, "priceTolerance")
		return
	}
	z.expirySecs, err = dc.ReadUint()
	if err != nil {
		err = msgp.WrapError(err, "expirySecs")
		return
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0004 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0004}
		return
	}
	z.gas.Quote, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "gas", "Quote")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 10
	err = en.Append(0x9a)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteString(z.MarketMaker)
	if err != nil {
		err = msgp.WrapError(err, "MarketMaker")
		return
	}
	err = z.Token0.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Token0")
		return
	}
	err = z.Token1.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Token1")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ZeroToOnePriceLevels)))
	if err != nil {
		err = msgp.WrapError(err, "ZeroToOnePriceLevels")
		return
	}
	for za0001 := range z.ZeroToOnePriceLevels {
		err = z.ZeroToOnePriceLevels[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ZeroToOnePriceLevels", za0001)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.OneToZeroPriceLevels)))
	if err != nil {
		err = msgp.WrapError(err, "OneToZeroPriceLevels")
		return
	}
	for za0002 := range z.OneToZeroPriceLevels {
		err = z.OneToZeroPriceLevels[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "OneToZeroPriceLevels", za0002)
			return
		}
	}
	err = en.WriteInt64(z.timestamp)
	if err != nil {
		err = msgp.WrapError(err, "timestamp")
		return
	}
	err = en.WriteUint(z.priceTolerance)
	if err != nil {
		err = msgp.WrapError(err, "priceTolerance")
		return
	}
	err = en.WriteUint(z.expirySecs)
	if err != nil {
		err = msgp.WrapError(err, "expirySecs")
		return
	}
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.gas.Quote)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Quote")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 10
	o = append(o, 0x9a)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendString(o, z.MarketMaker)
	o, err = z.Token0.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Token0")
		return
	}
	o, err = z.Token1.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Token1")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.ZeroToOnePriceLevels)))
	for za0001 := range z.ZeroToOnePriceLevels {
		o, err = z.ZeroToOnePriceLevels[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ZeroToOnePriceLevels", za0001)
			return
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.OneToZeroPriceLevels)))
	for za0002 := range z.OneToZeroPriceLevels {
		o, err = z.OneToZeroPriceLevels[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "OneToZeroPriceLevels", za0002)
			return
		}
	}
	o = msgp.AppendInt64(o, z.timestamp)
	o = msgp.AppendUint(o, z.priceTolerance)
	o = msgp.AppendUint(o, z.expirySecs)
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.gas.Quote)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.MarketMaker, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MarketMaker")
		return
	}
	bts, err = z.Token0.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Token0")
		return
	}
	bts, err = z.Token1.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Token1")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ZeroToOnePriceLevels")
		return
	}
	if cap(z.ZeroToOnePriceLevels) >= int(zb0002) {
		z.ZeroToOnePriceLevels = (z.ZeroToOnePriceLevels)[:zb0002]
	} else {
		z.ZeroToOnePriceLevels = make([]PriceLevel, zb0002)
	}
	for za0001 := range z.ZeroToOnePriceLevels {
		bts, err = z.ZeroToOnePriceLevels[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "ZeroToOnePriceLevels", za0001)
			return
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "OneToZeroPriceLevels")
		return
	}
	if cap(z.OneToZeroPriceLevels) >= int(zb0003) {
		z.OneToZeroPriceLevels = (z.OneToZeroPriceLevels)[:zb0003]
	} else {
		z.OneToZeroPriceLevels = make([]PriceLevel, zb0003)
	}
	for za0002 := range z.OneToZeroPriceLevels {
		bts, err = z.OneToZeroPriceLevels[za0002].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "OneToZeroPriceLevels", za0002)
			return
		}
	}
	z.timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "timestamp")
		return
	}
	z.priceTolerance, bts, err = msgp.ReadUintBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "priceTolerance")
		return
	}
	z.expirySecs, bts, err = msgp.ReadUintBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "expirySecs")
		return
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0004 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0004}
		return
	}
	z.gas.Quote, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Quote")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.StringPrefixSize + len(z.MarketMaker) + z.Token0.Msgsize() + z.Token1.Msgsize() + msgp.ArrayHeaderSize
	for za0001 := range z.ZeroToOnePriceLevels {
		s += z.ZeroToOnePriceLevels[za0001].Msgsize()
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.OneToZeroPriceLevels {
		s += z.OneToZeroPriceLevels[za0002].Msgsize()
	}
	s += msgp.Int64Size + msgp.UintSize + msgp.UintSize + 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceLevel) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Quote")
			return
		}
		z.Quote = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeFloat(z.Quote))
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
			z.Quote = msgpencode.DecodeFloat(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
		z.Price = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeFloat(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeFloat(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PriceLevel) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Quote == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.Quote))
		if err != nil {
			err = msgp.WrapError(err, "Quote")
			return
		}
	}
	if z.Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.Price))
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PriceLevel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Quote == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.Quote))
	}
	if z.Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.Price))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceLevel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Quote = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.Quote))
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
			z.Quote = msgpencode.DecodeFloat(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Price = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeFloat(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PriceLevel) Msgsize() (s int) {
	s = 1
	if z.Quote == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.Quote))
	}
	if z.Price == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.Price))
	}
	return
}
