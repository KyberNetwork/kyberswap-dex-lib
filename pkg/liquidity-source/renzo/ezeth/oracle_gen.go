package ezeth

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Oracle) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "RoundId")
			return
		}
		z.RoundId = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.RoundId))
			if err != nil {
				err = msgp.WrapError(err, "RoundId")
				return
			}
			z.RoundId = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Answer")
			return
		}
		z.Answer = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Answer))
			if err != nil {
				err = msgp.WrapError(err, "Answer")
				return
			}
			z.Answer = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "StartedAt")
			return
		}
		z.StartedAt = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.StartedAt))
			if err != nil {
				err = msgp.WrapError(err, "StartedAt")
				return
			}
			z.StartedAt = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "UpdatedAt")
			return
		}
		z.UpdatedAt = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.UpdatedAt))
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
			z.UpdatedAt = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AnsweredInRound")
			return
		}
		z.AnsweredInRound = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.AnsweredInRound))
			if err != nil {
				err = msgp.WrapError(err, "AnsweredInRound")
				return
			}
			z.AnsweredInRound = msgpencode.DecodeInt(zb0006)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Oracle) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	if z.RoundId == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.RoundId))
		if err != nil {
			err = msgp.WrapError(err, "RoundId")
			return
		}
	}
	if z.Answer == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Answer))
		if err != nil {
			err = msgp.WrapError(err, "Answer")
			return
		}
	}
	if z.StartedAt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.StartedAt))
		if err != nil {
			err = msgp.WrapError(err, "StartedAt")
			return
		}
	}
	if z.UpdatedAt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.UpdatedAt))
		if err != nil {
			err = msgp.WrapError(err, "UpdatedAt")
			return
		}
	}
	if z.AnsweredInRound == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AnsweredInRound))
		if err != nil {
			err = msgp.WrapError(err, "AnsweredInRound")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Oracle) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	if z.RoundId == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.RoundId))
	}
	if z.Answer == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Answer))
	}
	if z.StartedAt == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.StartedAt))
	}
	if z.UpdatedAt == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.UpdatedAt))
	}
	if z.AnsweredInRound == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AnsweredInRound))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Oracle) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RoundId = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.RoundId))
			if err != nil {
				err = msgp.WrapError(err, "RoundId")
				return
			}
			z.RoundId = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Answer = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Answer))
			if err != nil {
				err = msgp.WrapError(err, "Answer")
				return
			}
			z.Answer = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.StartedAt = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.StartedAt))
			if err != nil {
				err = msgp.WrapError(err, "StartedAt")
				return
			}
			z.StartedAt = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.UpdatedAt = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.UpdatedAt))
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
			z.UpdatedAt = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AnsweredInRound = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AnsweredInRound))
			if err != nil {
				err = msgp.WrapError(err, "AnsweredInRound")
				return
			}
			z.AnsweredInRound = msgpencode.DecodeInt(zb0006)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Oracle) Msgsize() (s int) {
	s = 1
	if z.RoundId == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.RoundId))
	}
	if z.Answer == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Answer))
	}
	if z.StartedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.StartedAt))
	}
	if z.UpdatedAt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.UpdatedAt))
	}
	if z.AnsweredInRound == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AnsweredInRound))
	}
	return
}
