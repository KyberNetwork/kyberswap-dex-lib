package plain

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Extra) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "InitialA")
			return
		}
		z.InitialA = nil
	} else {
		if z.InitialA == nil {
			z.InitialA = new(uint256.Int)
		}
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.InitialA))
			if err != nil {
				err = msgp.WrapError(err, "InitialA")
				return
			}
			*z.InitialA = msgpencode.DecodeUint256NonPtr(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FutureA")
			return
		}
		z.FutureA = nil
	} else {
		if z.FutureA == nil {
			z.FutureA = new(uint256.Int)
		}
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.FutureA))
			if err != nil {
				err = msgp.WrapError(err, "FutureA")
				return
			}
			*z.FutureA = msgpencode.DecodeUint256NonPtr(zb0003)
		}
	}
	z.InitialATime, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "InitialATime")
		return
	}
	z.FutureATime, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "FutureATime")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SwapFee")
			return
		}
		z.SwapFee = nil
	} else {
		if z.SwapFee == nil {
			z.SwapFee = new(uint256.Int)
		}
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.SwapFee))
			if err != nil {
				err = msgp.WrapError(err, "SwapFee")
				return
			}
			*z.SwapFee = msgpencode.DecodeUint256NonPtr(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AdminFee")
			return
		}
		z.AdminFee = nil
	} else {
		if z.AdminFee == nil {
			z.AdminFee = new(uint256.Int)
		}
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.AdminFee))
			if err != nil {
				err = msgp.WrapError(err, "AdminFee")
				return
			}
			*z.AdminFee = msgpencode.DecodeUint256NonPtr(zb0005)
		}
	}
	var zb0006 uint32
	zb0006, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "RateMultipliers")
		return
	}
	if cap(z.RateMultipliers) >= int(zb0006) {
		z.RateMultipliers = (z.RateMultipliers)[:zb0006]
	} else {
		z.RateMultipliers = make([]uint256.Int, zb0006)
	}
	for za0001 := range z.RateMultipliers {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(z.RateMultipliers[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "RateMultipliers", za0001)
				return
			}
			z.RateMultipliers[za0001] = msgpencode.DecodeUint256NonPtr(zb0007)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Extra) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 7
	err = en.Append(0x97)
	if err != nil {
		return
	}
	if z.InitialA == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.InitialA))
		if err != nil {
			err = msgp.WrapError(err, "InitialA")
			return
		}
	}
	if z.FutureA == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.FutureA))
		if err != nil {
			err = msgp.WrapError(err, "FutureA")
			return
		}
	}
	err = en.WriteInt64(z.InitialATime)
	if err != nil {
		err = msgp.WrapError(err, "InitialATime")
		return
	}
	err = en.WriteInt64(z.FutureATime)
	if err != nil {
		err = msgp.WrapError(err, "FutureATime")
		return
	}
	if z.SwapFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.SwapFee))
		if err != nil {
			err = msgp.WrapError(err, "SwapFee")
			return
		}
	}
	if z.AdminFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.AdminFee))
		if err != nil {
			err = msgp.WrapError(err, "AdminFee")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.RateMultipliers)))
	if err != nil {
		err = msgp.WrapError(err, "RateMultipliers")
		return
	}
	for za0001 := range z.RateMultipliers {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(z.RateMultipliers[za0001]))
		if err != nil {
			err = msgp.WrapError(err, "RateMultipliers", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Extra) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 7
	o = append(o, 0x97)
	if z.InitialA == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.InitialA))
	}
	if z.FutureA == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.FutureA))
	}
	o = msgp.AppendInt64(o, z.InitialATime)
	o = msgp.AppendInt64(o, z.FutureATime)
	if z.SwapFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.SwapFee))
	}
	if z.AdminFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.AdminFee))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.RateMultipliers)))
	for za0001 := range z.RateMultipliers {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(z.RateMultipliers[za0001]))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Extra) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.InitialA = nil
	} else {
		if z.InitialA == nil {
			z.InitialA = new(uint256.Int)
		}
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.InitialA))
			if err != nil {
				err = msgp.WrapError(err, "InitialA")
				return
			}
			*z.InitialA = msgpencode.DecodeUint256NonPtr(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FutureA = nil
	} else {
		if z.FutureA == nil {
			z.FutureA = new(uint256.Int)
		}
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.FutureA))
			if err != nil {
				err = msgp.WrapError(err, "FutureA")
				return
			}
			*z.FutureA = msgpencode.DecodeUint256NonPtr(zb0003)
		}
	}
	z.InitialATime, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "InitialATime")
		return
	}
	z.FutureATime, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FutureATime")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SwapFee = nil
	} else {
		if z.SwapFee == nil {
			z.SwapFee = new(uint256.Int)
		}
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.SwapFee))
			if err != nil {
				err = msgp.WrapError(err, "SwapFee")
				return
			}
			*z.SwapFee = msgpencode.DecodeUint256NonPtr(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AdminFee = nil
	} else {
		if z.AdminFee == nil {
			z.AdminFee = new(uint256.Int)
		}
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.AdminFee))
			if err != nil {
				err = msgp.WrapError(err, "AdminFee")
				return
			}
			*z.AdminFee = msgpencode.DecodeUint256NonPtr(zb0005)
		}
	}
	var zb0006 uint32
	zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RateMultipliers")
		return
	}
	if cap(z.RateMultipliers) >= int(zb0006) {
		z.RateMultipliers = (z.RateMultipliers)[:zb0006]
	} else {
		z.RateMultipliers = make([]uint256.Int, zb0006)
	}
	for za0001 := range z.RateMultipliers {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(z.RateMultipliers[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "RateMultipliers", za0001)
				return
			}
			z.RateMultipliers[za0001] = msgpencode.DecodeUint256NonPtr(zb0007)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Extra) Msgsize() (s int) {
	s = 1
	if z.InitialA == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.InitialA))
	}
	if z.FutureA == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.FutureA))
	}
	s += msgp.Int64Size + msgp.Int64Size
	if z.SwapFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.SwapFee))
	}
	if z.AdminFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.AdminFee))
	}
	s += msgp.ArrayHeaderSize
	for za0001 := range z.RateMultipliers {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(z.RateMultipliers[za0001]))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StaticExtra) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "APrecision")
			return
		}
		z.APrecision = nil
	} else {
		if z.APrecision == nil {
			z.APrecision = new(uint256.Int)
		}
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.APrecision))
			if err != nil {
				err = msgp.WrapError(err, "APrecision")
				return
			}
			*z.APrecision = msgpencode.DecodeUint256NonPtr(zb0002)
		}
	}
	z.LpToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	z.Oracle, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Oracle")
		return
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "IsNativeCoin")
		return
	}
	if cap(z.IsNativeCoin) >= int(zb0003) {
		z.IsNativeCoin = (z.IsNativeCoin)[:zb0003]
	} else {
		z.IsNativeCoin = make([]bool, zb0003)
	}
	for za0001 := range z.IsNativeCoin {
		z.IsNativeCoin[za0001], err = dc.ReadBool()
		if err != nil {
			err = msgp.WrapError(err, "IsNativeCoin", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StaticExtra) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	if z.APrecision == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.APrecision))
		if err != nil {
			err = msgp.WrapError(err, "APrecision")
			return
		}
	}
	err = en.WriteString(z.LpToken)
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	err = en.WriteString(z.Oracle)
	if err != nil {
		err = msgp.WrapError(err, "Oracle")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.IsNativeCoin)))
	if err != nil {
		err = msgp.WrapError(err, "IsNativeCoin")
		return
	}
	for za0001 := range z.IsNativeCoin {
		err = en.WriteBool(z.IsNativeCoin[za0001])
		if err != nil {
			err = msgp.WrapError(err, "IsNativeCoin", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StaticExtra) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	if z.APrecision == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.APrecision))
	}
	o = msgp.AppendString(o, z.LpToken)
	o = msgp.AppendString(o, z.Oracle)
	o = msgp.AppendArrayHeader(o, uint32(len(z.IsNativeCoin)))
	for za0001 := range z.IsNativeCoin {
		o = msgp.AppendBool(o, z.IsNativeCoin[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StaticExtra) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.APrecision = nil
	} else {
		if z.APrecision == nil {
			z.APrecision = new(uint256.Int)
		}
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.APrecision))
			if err != nil {
				err = msgp.WrapError(err, "APrecision")
				return
			}
			*z.APrecision = msgpencode.DecodeUint256NonPtr(zb0002)
		}
	}
	z.LpToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	z.Oracle, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Oracle")
		return
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "IsNativeCoin")
		return
	}
	if cap(z.IsNativeCoin) >= int(zb0003) {
		z.IsNativeCoin = (z.IsNativeCoin)[:zb0003]
	} else {
		z.IsNativeCoin = make([]bool, zb0003)
	}
	for za0001 := range z.IsNativeCoin {
		z.IsNativeCoin[za0001], bts, err = msgp.ReadBoolBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "IsNativeCoin", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StaticExtra) Msgsize() (s int) {
	s = 1
	if z.APrecision == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.APrecision))
	}
	s += msgp.StringPrefixSize + len(z.LpToken) + msgp.StringPrefixSize + len(z.Oracle) + msgp.ArrayHeaderSize + (len(z.IsNativeCoin) * (msgp.BoolSize))
	return
}
