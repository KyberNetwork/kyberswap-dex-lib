package tricryptong

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Extra) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 19 {
		err = msgp.ArrayError{Wanted: 19, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "InitialA")
			return
		}
		z.InitialA = nil
	} else {
		if z.InitialA == nil {
			z.InitialA = new(uint256.Int)
		}
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.InitialA))
			if err != nil {
				err = msgp.WrapError(err, "InitialA")
				return
			}
			*z.InitialA = msgpencode.DecodeUint256NonPtr(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "InitialGamma")
			return
		}
		z.InitialGamma = nil
	} else {
		if z.InitialGamma == nil {
			z.InitialGamma = new(uint256.Int)
		}
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.InitialGamma))
			if err != nil {
				err = msgp.WrapError(err, "InitialGamma")
				return
			}
			*z.InitialGamma = msgpencode.DecodeUint256NonPtr(zb0003)
		}
	}
	z.InitialAGammaTime, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "InitialAGammaTime")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FutureA")
			return
		}
		z.FutureA = nil
	} else {
		if z.FutureA == nil {
			z.FutureA = new(uint256.Int)
		}
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.FutureA))
			if err != nil {
				err = msgp.WrapError(err, "FutureA")
				return
			}
			*z.FutureA = msgpencode.DecodeUint256NonPtr(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FutureGamma")
			return
		}
		z.FutureGamma = nil
	} else {
		if z.FutureGamma == nil {
			z.FutureGamma = new(uint256.Int)
		}
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.FutureGamma))
			if err != nil {
				err = msgp.WrapError(err, "FutureGamma")
				return
			}
			*z.FutureGamma = msgpencode.DecodeUint256NonPtr(zb0005)
		}
	}
	z.FutureAGammaTime, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "FutureAGammaTime")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "D")
			return
		}
		z.D = nil
	} else {
		if z.D == nil {
			z.D = new(uint256.Int)
		}
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.D))
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
			*z.D = msgpencode.DecodeUint256NonPtr(zb0006)
		}
	}
	var zb0007 uint32
	zb0007, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "PriceScale")
		return
	}
	if cap(z.PriceScale) >= int(zb0007) {
		z.PriceScale = (z.PriceScale)[:zb0007]
	} else {
		z.PriceScale = make([]uint256.Int, zb0007)
	}
	for za0001 := range z.PriceScale {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(z.PriceScale[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "PriceScale", za0001)
				return
			}
			z.PriceScale[za0001] = msgpencode.DecodeUint256NonPtr(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "PriceOracle")
		return
	}
	if cap(z.PriceOracle) >= int(zb0009) {
		z.PriceOracle = (z.PriceOracle)[:zb0009]
	} else {
		z.PriceOracle = make([]uint256.Int, zb0009)
	}
	for za0002 := range z.PriceOracle {
		{
			var zb0010 []byte
			zb0010, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(z.PriceOracle[za0002]))
			if err != nil {
				err = msgp.WrapError(err, "PriceOracle", za0002)
				return
			}
			z.PriceOracle[za0002] = msgpencode.DecodeUint256NonPtr(zb0010)
		}
	}
	var zb0011 uint32
	zb0011, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "LastPrices")
		return
	}
	if cap(z.LastPrices) >= int(zb0011) {
		z.LastPrices = (z.LastPrices)[:zb0011]
	} else {
		z.LastPrices = make([]uint256.Int, zb0011)
	}
	for za0003 := range z.LastPrices {
		{
			var zb0012 []byte
			zb0012, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(z.LastPrices[za0003]))
			if err != nil {
				err = msgp.WrapError(err, "LastPrices", za0003)
				return
			}
			z.LastPrices[za0003] = msgpencode.DecodeUint256NonPtr(zb0012)
		}
	}
	z.LastPricesTimestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "LastPricesTimestamp")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeeGamma")
			return
		}
		z.FeeGamma = nil
	} else {
		if z.FeeGamma == nil {
			z.FeeGamma = new(uint256.Int)
		}
		{
			var zb0013 []byte
			zb0013, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.FeeGamma))
			if err != nil {
				err = msgp.WrapError(err, "FeeGamma")
				return
			}
			*z.FeeGamma = msgpencode.DecodeUint256NonPtr(zb0013)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "MidFee")
			return
		}
		z.MidFee = nil
	} else {
		if z.MidFee == nil {
			z.MidFee = new(uint256.Int)
		}
		{
			var zb0014 []byte
			zb0014, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.MidFee))
			if err != nil {
				err = msgp.WrapError(err, "MidFee")
				return
			}
			*z.MidFee = msgpencode.DecodeUint256NonPtr(zb0014)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "OutFee")
			return
		}
		z.OutFee = nil
	} else {
		if z.OutFee == nil {
			z.OutFee = new(uint256.Int)
		}
		{
			var zb0015 []byte
			zb0015, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.OutFee))
			if err != nil {
				err = msgp.WrapError(err, "OutFee")
				return
			}
			*z.OutFee = msgpencode.DecodeUint256NonPtr(zb0015)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LpSupply")
			return
		}
		z.LpSupply = nil
	} else {
		if z.LpSupply == nil {
			z.LpSupply = new(uint256.Int)
		}
		{
			var zb0016 []byte
			zb0016, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.LpSupply))
			if err != nil {
				err = msgp.WrapError(err, "LpSupply")
				return
			}
			*z.LpSupply = msgpencode.DecodeUint256NonPtr(zb0016)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "XcpProfit")
			return
		}
		z.XcpProfit = nil
	} else {
		if z.XcpProfit == nil {
			z.XcpProfit = new(uint256.Int)
		}
		{
			var zb0017 []byte
			zb0017, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.XcpProfit))
			if err != nil {
				err = msgp.WrapError(err, "XcpProfit")
				return
			}
			*z.XcpProfit = msgpencode.DecodeUint256NonPtr(zb0017)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "VirtualPrice")
			return
		}
		z.VirtualPrice = nil
	} else {
		if z.VirtualPrice == nil {
			z.VirtualPrice = new(uint256.Int)
		}
		{
			var zb0018 []byte
			zb0018, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.VirtualPrice))
			if err != nil {
				err = msgp.WrapError(err, "VirtualPrice")
				return
			}
			*z.VirtualPrice = msgpencode.DecodeUint256NonPtr(zb0018)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AllowedExtraProfit")
			return
		}
		z.AllowedExtraProfit = nil
	} else {
		if z.AllowedExtraProfit == nil {
			z.AllowedExtraProfit = new(uint256.Int)
		}
		{
			var zb0019 []byte
			zb0019, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.AllowedExtraProfit))
			if err != nil {
				err = msgp.WrapError(err, "AllowedExtraProfit")
				return
			}
			*z.AllowedExtraProfit = msgpencode.DecodeUint256NonPtr(zb0019)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AdjustmentStep")
			return
		}
		z.AdjustmentStep = nil
	} else {
		if z.AdjustmentStep == nil {
			z.AdjustmentStep = new(uint256.Int)
		}
		{
			var zb0020 []byte
			zb0020, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(*z.AdjustmentStep))
			if err != nil {
				err = msgp.WrapError(err, "AdjustmentStep")
				return
			}
			*z.AdjustmentStep = msgpencode.DecodeUint256NonPtr(zb0020)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Extra) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 19
	err = en.Append(0xdc, 0x0, 0x13)
	if err != nil {
		return
	}
	if z.InitialA == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.InitialA))
		if err != nil {
			err = msgp.WrapError(err, "InitialA")
			return
		}
	}
	if z.InitialGamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.InitialGamma))
		if err != nil {
			err = msgp.WrapError(err, "InitialGamma")
			return
		}
	}
	err = en.WriteInt64(z.InitialAGammaTime)
	if err != nil {
		err = msgp.WrapError(err, "InitialAGammaTime")
		return
	}
	if z.FutureA == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.FutureA))
		if err != nil {
			err = msgp.WrapError(err, "FutureA")
			return
		}
	}
	if z.FutureGamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.FutureGamma))
		if err != nil {
			err = msgp.WrapError(err, "FutureGamma")
			return
		}
	}
	err = en.WriteInt64(z.FutureAGammaTime)
	if err != nil {
		err = msgp.WrapError(err, "FutureAGammaTime")
		return
	}
	if z.D == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.D))
		if err != nil {
			err = msgp.WrapError(err, "D")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.PriceScale)))
	if err != nil {
		err = msgp.WrapError(err, "PriceScale")
		return
	}
	for za0001 := range z.PriceScale {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(z.PriceScale[za0001]))
		if err != nil {
			err = msgp.WrapError(err, "PriceScale", za0001)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.PriceOracle)))
	if err != nil {
		err = msgp.WrapError(err, "PriceOracle")
		return
	}
	for za0002 := range z.PriceOracle {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(z.PriceOracle[za0002]))
		if err != nil {
			err = msgp.WrapError(err, "PriceOracle", za0002)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.LastPrices)))
	if err != nil {
		err = msgp.WrapError(err, "LastPrices")
		return
	}
	for za0003 := range z.LastPrices {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(z.LastPrices[za0003]))
		if err != nil {
			err = msgp.WrapError(err, "LastPrices", za0003)
			return
		}
	}
	err = en.WriteInt64(z.LastPricesTimestamp)
	if err != nil {
		err = msgp.WrapError(err, "LastPricesTimestamp")
		return
	}
	if z.FeeGamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.FeeGamma))
		if err != nil {
			err = msgp.WrapError(err, "FeeGamma")
			return
		}
	}
	if z.MidFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.MidFee))
		if err != nil {
			err = msgp.WrapError(err, "MidFee")
			return
		}
	}
	if z.OutFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.OutFee))
		if err != nil {
			err = msgp.WrapError(err, "OutFee")
			return
		}
	}
	if z.LpSupply == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.LpSupply))
		if err != nil {
			err = msgp.WrapError(err, "LpSupply")
			return
		}
	}
	if z.XcpProfit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.XcpProfit))
		if err != nil {
			err = msgp.WrapError(err, "XcpProfit")
			return
		}
	}
	if z.VirtualPrice == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.VirtualPrice))
		if err != nil {
			err = msgp.WrapError(err, "VirtualPrice")
			return
		}
	}
	if z.AllowedExtraProfit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.AllowedExtraProfit))
		if err != nil {
			err = msgp.WrapError(err, "AllowedExtraProfit")
			return
		}
	}
	if z.AdjustmentStep == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(*z.AdjustmentStep))
		if err != nil {
			err = msgp.WrapError(err, "AdjustmentStep")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Extra) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 19
	o = append(o, 0xdc, 0x0, 0x13)
	if z.InitialA == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.InitialA))
	}
	if z.InitialGamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.InitialGamma))
	}
	o = msgp.AppendInt64(o, z.InitialAGammaTime)
	if z.FutureA == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.FutureA))
	}
	if z.FutureGamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.FutureGamma))
	}
	o = msgp.AppendInt64(o, z.FutureAGammaTime)
	if z.D == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.D))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.PriceScale)))
	for za0001 := range z.PriceScale {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(z.PriceScale[za0001]))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.PriceOracle)))
	for za0002 := range z.PriceOracle {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(z.PriceOracle[za0002]))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.LastPrices)))
	for za0003 := range z.LastPrices {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(z.LastPrices[za0003]))
	}
	o = msgp.AppendInt64(o, z.LastPricesTimestamp)
	if z.FeeGamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.FeeGamma))
	}
	if z.MidFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.MidFee))
	}
	if z.OutFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.OutFee))
	}
	if z.LpSupply == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.LpSupply))
	}
	if z.XcpProfit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.XcpProfit))
	}
	if z.VirtualPrice == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.VirtualPrice))
	}
	if z.AllowedExtraProfit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.AllowedExtraProfit))
	}
	if z.AdjustmentStep == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(*z.AdjustmentStep))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Extra) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 19 {
		err = msgp.ArrayError{Wanted: 19, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.InitialA = nil
	} else {
		if z.InitialA == nil {
			z.InitialA = new(uint256.Int)
		}
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.InitialA))
			if err != nil {
				err = msgp.WrapError(err, "InitialA")
				return
			}
			*z.InitialA = msgpencode.DecodeUint256NonPtr(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.InitialGamma = nil
	} else {
		if z.InitialGamma == nil {
			z.InitialGamma = new(uint256.Int)
		}
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.InitialGamma))
			if err != nil {
				err = msgp.WrapError(err, "InitialGamma")
				return
			}
			*z.InitialGamma = msgpencode.DecodeUint256NonPtr(zb0003)
		}
	}
	z.InitialAGammaTime, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "InitialAGammaTime")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FutureA = nil
	} else {
		if z.FutureA == nil {
			z.FutureA = new(uint256.Int)
		}
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.FutureA))
			if err != nil {
				err = msgp.WrapError(err, "FutureA")
				return
			}
			*z.FutureA = msgpencode.DecodeUint256NonPtr(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FutureGamma = nil
	} else {
		if z.FutureGamma == nil {
			z.FutureGamma = new(uint256.Int)
		}
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.FutureGamma))
			if err != nil {
				err = msgp.WrapError(err, "FutureGamma")
				return
			}
			*z.FutureGamma = msgpencode.DecodeUint256NonPtr(zb0005)
		}
	}
	z.FutureAGammaTime, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FutureAGammaTime")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.D = nil
	} else {
		if z.D == nil {
			z.D = new(uint256.Int)
		}
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.D))
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
			*z.D = msgpencode.DecodeUint256NonPtr(zb0006)
		}
	}
	var zb0007 uint32
	zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "PriceScale")
		return
	}
	if cap(z.PriceScale) >= int(zb0007) {
		z.PriceScale = (z.PriceScale)[:zb0007]
	} else {
		z.PriceScale = make([]uint256.Int, zb0007)
	}
	for za0001 := range z.PriceScale {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(z.PriceScale[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "PriceScale", za0001)
				return
			}
			z.PriceScale[za0001] = msgpencode.DecodeUint256NonPtr(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "PriceOracle")
		return
	}
	if cap(z.PriceOracle) >= int(zb0009) {
		z.PriceOracle = (z.PriceOracle)[:zb0009]
	} else {
		z.PriceOracle = make([]uint256.Int, zb0009)
	}
	for za0002 := range z.PriceOracle {
		{
			var zb0010 []byte
			zb0010, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(z.PriceOracle[za0002]))
			if err != nil {
				err = msgp.WrapError(err, "PriceOracle", za0002)
				return
			}
			z.PriceOracle[za0002] = msgpencode.DecodeUint256NonPtr(zb0010)
		}
	}
	var zb0011 uint32
	zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LastPrices")
		return
	}
	if cap(z.LastPrices) >= int(zb0011) {
		z.LastPrices = (z.LastPrices)[:zb0011]
	} else {
		z.LastPrices = make([]uint256.Int, zb0011)
	}
	for za0003 := range z.LastPrices {
		{
			var zb0012 []byte
			zb0012, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(z.LastPrices[za0003]))
			if err != nil {
				err = msgp.WrapError(err, "LastPrices", za0003)
				return
			}
			z.LastPrices[za0003] = msgpencode.DecodeUint256NonPtr(zb0012)
		}
	}
	z.LastPricesTimestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LastPricesTimestamp")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeeGamma = nil
	} else {
		if z.FeeGamma == nil {
			z.FeeGamma = new(uint256.Int)
		}
		{
			var zb0013 []byte
			zb0013, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.FeeGamma))
			if err != nil {
				err = msgp.WrapError(err, "FeeGamma")
				return
			}
			*z.FeeGamma = msgpencode.DecodeUint256NonPtr(zb0013)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.MidFee = nil
	} else {
		if z.MidFee == nil {
			z.MidFee = new(uint256.Int)
		}
		{
			var zb0014 []byte
			zb0014, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.MidFee))
			if err != nil {
				err = msgp.WrapError(err, "MidFee")
				return
			}
			*z.MidFee = msgpencode.DecodeUint256NonPtr(zb0014)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.OutFee = nil
	} else {
		if z.OutFee == nil {
			z.OutFee = new(uint256.Int)
		}
		{
			var zb0015 []byte
			zb0015, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.OutFee))
			if err != nil {
				err = msgp.WrapError(err, "OutFee")
				return
			}
			*z.OutFee = msgpencode.DecodeUint256NonPtr(zb0015)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LpSupply = nil
	} else {
		if z.LpSupply == nil {
			z.LpSupply = new(uint256.Int)
		}
		{
			var zb0016 []byte
			zb0016, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.LpSupply))
			if err != nil {
				err = msgp.WrapError(err, "LpSupply")
				return
			}
			*z.LpSupply = msgpencode.DecodeUint256NonPtr(zb0016)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.XcpProfit = nil
	} else {
		if z.XcpProfit == nil {
			z.XcpProfit = new(uint256.Int)
		}
		{
			var zb0017 []byte
			zb0017, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.XcpProfit))
			if err != nil {
				err = msgp.WrapError(err, "XcpProfit")
				return
			}
			*z.XcpProfit = msgpencode.DecodeUint256NonPtr(zb0017)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.VirtualPrice = nil
	} else {
		if z.VirtualPrice == nil {
			z.VirtualPrice = new(uint256.Int)
		}
		{
			var zb0018 []byte
			zb0018, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.VirtualPrice))
			if err != nil {
				err = msgp.WrapError(err, "VirtualPrice")
				return
			}
			*z.VirtualPrice = msgpencode.DecodeUint256NonPtr(zb0018)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AllowedExtraProfit = nil
	} else {
		if z.AllowedExtraProfit == nil {
			z.AllowedExtraProfit = new(uint256.Int)
		}
		{
			var zb0019 []byte
			zb0019, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.AllowedExtraProfit))
			if err != nil {
				err = msgp.WrapError(err, "AllowedExtraProfit")
				return
			}
			*z.AllowedExtraProfit = msgpencode.DecodeUint256NonPtr(zb0019)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AdjustmentStep = nil
	} else {
		if z.AdjustmentStep == nil {
			z.AdjustmentStep = new(uint256.Int)
		}
		{
			var zb0020 []byte
			zb0020, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(*z.AdjustmentStep))
			if err != nil {
				err = msgp.WrapError(err, "AdjustmentStep")
				return
			}
			*z.AdjustmentStep = msgpencode.DecodeUint256NonPtr(zb0020)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Extra) Msgsize() (s int) {
	s = 3
	if z.InitialA == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.InitialA))
	}
	if z.InitialGamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.InitialGamma))
	}
	s += msgp.Int64Size
	if z.FutureA == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.FutureA))
	}
	if z.FutureGamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.FutureGamma))
	}
	s += msgp.Int64Size
	if z.D == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.D))
	}
	s += msgp.ArrayHeaderSize
	for za0001 := range z.PriceScale {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(z.PriceScale[za0001]))
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.PriceOracle {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(z.PriceOracle[za0002]))
	}
	s += msgp.ArrayHeaderSize
	for za0003 := range z.LastPrices {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(z.LastPrices[za0003]))
	}
	s += msgp.Int64Size
	if z.FeeGamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.FeeGamma))
	}
	if z.MidFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.MidFee))
	}
	if z.OutFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.OutFee))
	}
	if z.LpSupply == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.LpSupply))
	}
	if z.XcpProfit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.XcpProfit))
	}
	if z.VirtualPrice == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.VirtualPrice))
	}
	if z.AllowedExtraProfit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.AllowedExtraProfit))
	}
	if z.AdjustmentStep == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(*z.AdjustmentStep))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StaticExtra) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "IsNativeCoins")
		return
	}
	if cap(z.IsNativeCoins) >= int(zb0002) {
		z.IsNativeCoins = (z.IsNativeCoins)[:zb0002]
	} else {
		z.IsNativeCoins = make([]bool, zb0002)
	}
	for za0001 := range z.IsNativeCoins {
		z.IsNativeCoins[za0001], err = dc.ReadBool()
		if err != nil {
			err = msgp.WrapError(err, "IsNativeCoins", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *StaticExtra) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.IsNativeCoins)))
	if err != nil {
		err = msgp.WrapError(err, "IsNativeCoins")
		return
	}
	for za0001 := range z.IsNativeCoins {
		err = en.WriteBool(z.IsNativeCoins[za0001])
		if err != nil {
			err = msgp.WrapError(err, "IsNativeCoins", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *StaticExtra) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.IsNativeCoins)))
	for za0001 := range z.IsNativeCoins {
		o = msgp.AppendBool(o, z.IsNativeCoins[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StaticExtra) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "IsNativeCoins")
		return
	}
	if cap(z.IsNativeCoins) >= int(zb0002) {
		z.IsNativeCoins = (z.IsNativeCoins)[:zb0002]
	} else {
		z.IsNativeCoins = make([]bool, zb0002)
	}
	for za0001 := range z.IsNativeCoins {
		z.IsNativeCoins[za0001], bts, err = msgp.ReadBoolBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "IsNativeCoins", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *StaticExtra) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize + (len(z.IsNativeCoins) * (msgp.BoolSize))
	return
}
