package tricryptong

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/holiman/uint256"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "precisionMultipliers")
		return
	}
	if cap(z.precisionMultipliers) >= int(zb0002) {
		z.precisionMultipliers = (z.precisionMultipliers)[:zb0002]
	} else {
		z.precisionMultipliers = make([]uint256.Int, zb0002)
	}
	for za0001 := range z.precisionMultipliers {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(z.precisionMultipliers[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "precisionMultipliers", za0001)
				return
			}
			z.precisionMultipliers[za0001] = msgpencode.DecodeUint256NonPtr(zb0003)
		}
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Reserves")
		return
	}
	if cap(z.Reserves) >= int(zb0004) {
		z.Reserves = (z.Reserves)[:zb0004]
	} else {
		z.Reserves = make([]uint256.Int, zb0004)
	}
	for za0002 := range z.Reserves {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeUint256NonPtr(z.Reserves[za0002]))
			if err != nil {
				err = msgp.WrapError(err, "Reserves", za0002)
				return
			}
			z.Reserves[za0002] = msgpencode.DecodeUint256NonPtr(zb0005)
		}
	}
	z.NotAdjusted, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "NotAdjusted")
		return
	}
	err = z.Extra.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Extra")
		return
	}
	err = z.StaticExtra.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "StaticExtra")
		return
	}
	z.gas, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 7
	err = en.Append(0x97)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.precisionMultipliers)))
	if err != nil {
		err = msgp.WrapError(err, "precisionMultipliers")
		return
	}
	for za0001 := range z.precisionMultipliers {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(z.precisionMultipliers[za0001]))
		if err != nil {
			err = msgp.WrapError(err, "precisionMultipliers", za0001)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.Reserves)))
	if err != nil {
		err = msgp.WrapError(err, "Reserves")
		return
	}
	for za0002 := range z.Reserves {
		err = en.WriteBytes(msgpencode.EncodeUint256NonPtr(z.Reserves[za0002]))
		if err != nil {
			err = msgp.WrapError(err, "Reserves", za0002)
			return
		}
	}
	err = en.WriteBool(z.NotAdjusted)
	if err != nil {
		err = msgp.WrapError(err, "NotAdjusted")
		return
	}
	err = z.Extra.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Extra")
		return
	}
	err = z.StaticExtra.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "StaticExtra")
		return
	}
	err = en.WriteInt64(z.gas)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 7
	o = append(o, 0x97)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.precisionMultipliers)))
	for za0001 := range z.precisionMultipliers {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(z.precisionMultipliers[za0001]))
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.Reserves)))
	for za0002 := range z.Reserves {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256NonPtr(z.Reserves[za0002]))
	}
	o = msgp.AppendBool(o, z.NotAdjusted)
	o, err = z.Extra.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Extra")
		return
	}
	o, err = z.StaticExtra.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "StaticExtra")
		return
	}
	o = msgp.AppendInt64(o, z.gas)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "precisionMultipliers")
		return
	}
	if cap(z.precisionMultipliers) >= int(zb0002) {
		z.precisionMultipliers = (z.precisionMultipliers)[:zb0002]
	} else {
		z.precisionMultipliers = make([]uint256.Int, zb0002)
	}
	for za0001 := range z.precisionMultipliers {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(z.precisionMultipliers[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "precisionMultipliers", za0001)
				return
			}
			z.precisionMultipliers[za0001] = msgpencode.DecodeUint256NonPtr(zb0003)
		}
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Reserves")
		return
	}
	if cap(z.Reserves) >= int(zb0004) {
		z.Reserves = (z.Reserves)[:zb0004]
	} else {
		z.Reserves = make([]uint256.Int, zb0004)
	}
	for za0002 := range z.Reserves {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256NonPtr(z.Reserves[za0002]))
			if err != nil {
				err = msgp.WrapError(err, "Reserves", za0002)
				return
			}
			z.Reserves[za0002] = msgpencode.DecodeUint256NonPtr(zb0005)
		}
	}
	z.NotAdjusted, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "NotAdjusted")
		return
	}
	bts, err = z.Extra.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Extra")
		return
	}
	bts, err = z.StaticExtra.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "StaticExtra")
		return
	}
	z.gas, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.ArrayHeaderSize
	for za0001 := range z.precisionMultipliers {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(z.precisionMultipliers[za0001]))
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.Reserves {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256NonPtr(z.Reserves[za0002]))
	}
	s += msgp.BoolSize + z.Extra.Msgsize() + z.StaticExtra.Msgsize() + msgp.Int64Size
	return
}
