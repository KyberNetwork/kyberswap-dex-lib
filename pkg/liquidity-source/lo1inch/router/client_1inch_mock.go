// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/lo1inch/router (interfaces: I1inchClient)
//
// Generated by this command:
//
//	mockgen -destination ./client_1inch_mock.go -package router github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/lo1inch/router I1inchClient
//

// Package router is a generated GoMock package.
package router

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockI1inchClient is a mock of I1inchClient interface.
type MockI1inchClient struct {
	ctrl     *gomock.Controller
	recorder *MockI1inchClientMockRecorder
	isgomock struct{}
}

// MockI1inchClientMockRecorder is the mock recorder for MockI1inchClient.
type MockI1inchClientMockRecorder struct {
	mock *MockI1inchClient
}

// NewMockI1inchClient creates a new mock instance.
func NewMockI1inchClient(ctrl *gomock.Controller) *MockI1inchClient {
	mock := &MockI1inchClient{ctrl: ctrl}
	mock.recorder = &MockI1inchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockI1inchClient) EXPECT() *MockI1inchClientMockRecorder {
	return m.recorder
}

// GetOrder mocks base method.
func (m *MockI1inchClient) GetOrder(ctx context.Context, getOrderPath string) (*OrderResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, getOrderPath)
	ret0, _ := ret[0].(*OrderResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockI1inchClientMockRecorder) GetOrder(ctx, getOrderPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockI1inchClient)(nil).GetOrder), ctx, getOrderPath)
}
