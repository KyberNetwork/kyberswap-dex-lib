package bancorv3

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *pool) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.PoolToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "PoolToken")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TradingFeePPM")
			return
		}
		z.TradingFeePPM = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.TradingFeePPM))
			if err != nil {
				err = msgp.WrapError(err, "TradingFeePPM")
				return
			}
			z.TradingFeePPM = msgpencode.DecodeUint256(zb0002)
		}
	}
	z.TradingEnabled, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "TradingEnabled")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
		z.Liquidity = nil
	} else {
		if z.Liquidity == nil {
			z.Liquidity = new(poolLiquidity)
		}
		err = z.Liquidity.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *pool) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteString(z.PoolToken)
	if err != nil {
		err = msgp.WrapError(err, "PoolToken")
		return
	}
	if z.TradingFeePPM == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.TradingFeePPM))
		if err != nil {
			err = msgp.WrapError(err, "TradingFeePPM")
			return
		}
	}
	err = en.WriteBool(z.TradingEnabled)
	if err != nil {
		err = msgp.WrapError(err, "TradingEnabled")
		return
	}
	if z.Liquidity == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Liquidity.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *pool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendString(o, z.PoolToken)
	if z.TradingFeePPM == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.TradingFeePPM))
	}
	o = msgp.AppendBool(o, z.TradingEnabled)
	if z.Liquidity == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Liquidity.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *pool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.PoolToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "PoolToken")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TradingFeePPM = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.TradingFeePPM))
			if err != nil {
				err = msgp.WrapError(err, "TradingFeePPM")
				return
			}
			z.TradingFeePPM = msgpencode.DecodeUint256(zb0002)
		}
	}
	z.TradingEnabled, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TradingEnabled")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Liquidity = nil
	} else {
		if z.Liquidity == nil {
			z.Liquidity = new(poolLiquidity)
		}
		bts, err = z.Liquidity.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Liquidity")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *pool) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.PoolToken)
	if z.TradingFeePPM == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.TradingFeePPM))
	}
	s += msgp.BoolSize
	if z.Liquidity == nil {
		s += msgp.NilSize
	} else {
		s += z.Liquidity.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *poolCollection) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "NetworkFeePMM")
			return
		}
		z.NetworkFeePMM = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.NetworkFeePMM))
			if err != nil {
				err = msgp.WrapError(err, "NetworkFeePMM")
				return
			}
			z.NetworkFeePMM = msgpencode.DecodeUint256(zb0002)
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "PoolData")
		return
	}
	if z.PoolData == nil {
		z.PoolData = make(map[string]*pool, zb0003)
	} else if len(z.PoolData) > 0 {
		for key := range z.PoolData {
			delete(z.PoolData, key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var za0001 string
		var za0002 *pool
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "PoolData")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "PoolData", za0001)
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(pool)
			}
			err = za0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "PoolData", za0001)
				return
			}
		}
		z.PoolData[za0001] = za0002
	}
	z.BNT, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "BNT")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *poolCollection) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	if z.NetworkFeePMM == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.NetworkFeePMM))
		if err != nil {
			err = msgp.WrapError(err, "NetworkFeePMM")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.PoolData)))
	if err != nil {
		err = msgp.WrapError(err, "PoolData")
		return
	}
	for za0001, za0002 := range z.PoolData {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "PoolData")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "PoolData", za0001)
				return
			}
		}
	}
	err = en.WriteString(z.BNT)
	if err != nil {
		err = msgp.WrapError(err, "BNT")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *poolCollection) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	if z.NetworkFeePMM == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.NetworkFeePMM))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.PoolData)))
	for za0001, za0002 := range z.PoolData {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PoolData", za0001)
				return
			}
		}
	}
	o = msgp.AppendString(o, z.BNT)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *poolCollection) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.NetworkFeePMM = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.NetworkFeePMM))
			if err != nil {
				err = msgp.WrapError(err, "NetworkFeePMM")
				return
			}
			z.NetworkFeePMM = msgpencode.DecodeUint256(zb0002)
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "PoolData")
		return
	}
	if z.PoolData == nil {
		z.PoolData = make(map[string]*pool, zb0003)
	} else if len(z.PoolData) > 0 {
		for key := range z.PoolData {
			delete(z.PoolData, key)
		}
	}
	for zb0003 > 0 {
		var za0001 string
		var za0002 *pool
		zb0003--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "PoolData")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(pool)
			}
			bts, err = za0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolData", za0001)
				return
			}
		}
		z.PoolData[za0001] = za0002
	}
	z.BNT, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BNT")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *poolCollection) Msgsize() (s int) {
	s = 1
	if z.NetworkFeePMM == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.NetworkFeePMM))
	}
	s += msgp.MapHeaderSize
	if z.PoolData != nil {
		for za0001, za0002 := range z.PoolData {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += msgp.StringPrefixSize + len(z.BNT)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *poolLiquidity) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BNTTradingLiquidity")
			return
		}
		z.BNTTradingLiquidity = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.BNTTradingLiquidity))
			if err != nil {
				err = msgp.WrapError(err, "BNTTradingLiquidity")
				return
			}
			z.BNTTradingLiquidity = msgpencode.DecodeUint256(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BaseTokenTradingLiquidity")
			return
		}
		z.BaseTokenTradingLiquidity = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256(z.BaseTokenTradingLiquidity))
			if err != nil {
				err = msgp.WrapError(err, "BaseTokenTradingLiquidity")
				return
			}
			z.BaseTokenTradingLiquidity = msgpencode.DecodeUint256(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "StakedBalance")
			return
		}
		z.StakedBalance = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeUint256(z.StakedBalance))
			if err != nil {
				err = msgp.WrapError(err, "StakedBalance")
				return
			}
			z.StakedBalance = msgpencode.DecodeUint256(zb0004)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *poolLiquidity) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	if z.BNTTradingLiquidity == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.BNTTradingLiquidity))
		if err != nil {
			err = msgp.WrapError(err, "BNTTradingLiquidity")
			return
		}
	}
	if z.BaseTokenTradingLiquidity == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.BaseTokenTradingLiquidity))
		if err != nil {
			err = msgp.WrapError(err, "BaseTokenTradingLiquidity")
			return
		}
	}
	if z.StakedBalance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.StakedBalance))
		if err != nil {
			err = msgp.WrapError(err, "StakedBalance")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *poolLiquidity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	if z.BNTTradingLiquidity == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.BNTTradingLiquidity))
	}
	if z.BaseTokenTradingLiquidity == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.BaseTokenTradingLiquidity))
	}
	if z.StakedBalance == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.StakedBalance))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *poolLiquidity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BNTTradingLiquidity = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.BNTTradingLiquidity))
			if err != nil {
				err = msgp.WrapError(err, "BNTTradingLiquidity")
				return
			}
			z.BNTTradingLiquidity = msgpencode.DecodeUint256(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BaseTokenTradingLiquidity = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.BaseTokenTradingLiquidity))
			if err != nil {
				err = msgp.WrapError(err, "BaseTokenTradingLiquidity")
				return
			}
			z.BaseTokenTradingLiquidity = msgpencode.DecodeUint256(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.StakedBalance = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.StakedBalance))
			if err != nil {
				err = msgp.WrapError(err, "StakedBalance")
				return
			}
			z.StakedBalance = msgpencode.DecodeUint256(zb0004)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *poolLiquidity) Msgsize() (s int) {
	s = 1
	if z.BNTTradingLiquidity == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.BNTTradingLiquidity))
	}
	if z.BaseTokenTradingLiquidity == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.BaseTokenTradingLiquidity))
	}
	if z.StakedBalance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.StakedBalance))
	}
	return
}
