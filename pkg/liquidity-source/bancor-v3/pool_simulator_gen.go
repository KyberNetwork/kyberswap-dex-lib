package bancorv3

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/valueobject"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "collectionByPool")
		return
	}
	if z.collectionByPool == nil {
		z.collectionByPool = make(map[string]string, zb0002)
	} else if len(z.collectionByPool) > 0 {
		for key := range z.collectionByPool {
			delete(z.collectionByPool, key)
		}
	}
	var field []byte
	_ = field
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 string
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "collectionByPool")
			return
		}
		za0002, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "collectionByPool", za0001)
			return
		}
		z.collectionByPool[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "poolCollections")
		return
	}
	if z.poolCollections == nil {
		z.poolCollections = make(map[string]*poolCollection, zb0003)
	} else if len(z.poolCollections) > 0 {
		for key := range z.poolCollections {
			delete(z.poolCollections, key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var za0003 string
		var za0004 *poolCollection
		za0003, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "poolCollections")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "poolCollections", za0003)
				return
			}
			za0004 = nil
		} else {
			if za0004 == nil {
				za0004 = new(poolCollection)
			}
			err = za0004.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "poolCollections", za0003)
				return
			}
		}
		z.poolCollections[za0003] = za0004
	}
	z.bnt, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "bnt")
		return
	}
	{
		var zb0004 uint
		zb0004, err = dc.ReadUint()
		if err != nil {
			err = msgp.WrapError(err, "chainID")
			return
		}
		z.chainID = valueobject.ChainID(zb0004)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.collectionByPool)))
	if err != nil {
		err = msgp.WrapError(err, "collectionByPool")
		return
	}
	for za0001, za0002 := range z.collectionByPool {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "collectionByPool")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "collectionByPool", za0001)
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.poolCollections)))
	if err != nil {
		err = msgp.WrapError(err, "poolCollections")
		return
	}
	for za0003, za0004 := range z.poolCollections {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "poolCollections")
			return
		}
		if za0004 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0004.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "poolCollections", za0003)
				return
			}
		}
	}
	err = en.WriteString(z.bnt)
	if err != nil {
		err = msgp.WrapError(err, "bnt")
		return
	}
	err = en.WriteUint(uint(z.chainID))
	if err != nil {
		err = msgp.WrapError(err, "chainID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.collectionByPool)))
	for za0001, za0002 := range z.collectionByPool {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.poolCollections)))
	for za0003, za0004 := range z.poolCollections {
		o = msgp.AppendString(o, za0003)
		if za0004 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0004.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "poolCollections", za0003)
				return
			}
		}
	}
	o = msgp.AppendString(o, z.bnt)
	o = msgp.AppendUint(o, uint(z.chainID))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "collectionByPool")
		return
	}
	if z.collectionByPool == nil {
		z.collectionByPool = make(map[string]string, zb0002)
	} else if len(z.collectionByPool) > 0 {
		for key := range z.collectionByPool {
			delete(z.collectionByPool, key)
		}
	}
	var field []byte
	_ = field
	for zb0002 > 0 {
		var za0001 string
		var za0002 string
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "collectionByPool")
			return
		}
		za0002, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "collectionByPool", za0001)
			return
		}
		z.collectionByPool[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "poolCollections")
		return
	}
	if z.poolCollections == nil {
		z.poolCollections = make(map[string]*poolCollection, zb0003)
	} else if len(z.poolCollections) > 0 {
		for key := range z.poolCollections {
			delete(z.poolCollections, key)
		}
	}
	for zb0003 > 0 {
		var za0003 string
		var za0004 *poolCollection
		zb0003--
		za0003, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "poolCollections")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0004 = nil
		} else {
			if za0004 == nil {
				za0004 = new(poolCollection)
			}
			bts, err = za0004.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "poolCollections", za0003)
				return
			}
		}
		z.poolCollections[za0003] = za0004
	}
	z.bnt, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "bnt")
		return
	}
	{
		var zb0004 uint
		zb0004, bts, err = msgp.ReadUintBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "chainID")
			return
		}
		z.chainID = valueobject.ChainID(zb0004)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.MapHeaderSize
	if z.collectionByPool != nil {
		for za0001, za0002 := range z.collectionByPool {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += msgp.MapHeaderSize
	if z.poolCollections != nil {
		for za0003, za0004 := range z.poolCollections {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003)
			if za0004 == nil {
				s += msgp.NilSize
			} else {
				s += za0004.Msgsize()
			}
		}
	}
	s += msgp.StringPrefixSize + len(z.bnt) + msgp.UintSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *tradeParams) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Amount":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Amount")
					return
				}
				z.Amount = nil
			} else {
				{
					var zb0002 []byte
					zb0002, err = dc.ReadBytes(msgpencode.EncodeUint256(z.Amount))
					if err != nil {
						err = msgp.WrapError(err, "Amount")
						return
					}
					z.Amount = msgpencode.DecodeUint256(zb0002)
				}
			}
		case "Limit":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Limit")
					return
				}
				z.Limit = nil
			} else {
				{
					var zb0003 []byte
					zb0003, err = dc.ReadBytes(msgpencode.EncodeUint256(z.Limit))
					if err != nil {
						err = msgp.WrapError(err, "Limit")
						return
					}
					z.Limit = msgpencode.DecodeUint256(zb0003)
				}
			}
		case "BySourceAmount":
			z.BySourceAmount, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "BySourceAmount")
				return
			}
		case "IgnoreFees":
			z.IgnoreFees, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IgnoreFees")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *tradeParams) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "Amount"
	err = en.Append(0x84, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	if z.Amount == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.Amount))
		if err != nil {
			err = msgp.WrapError(err, "Amount")
			return
		}
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	if z.Limit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeUint256(z.Limit))
		if err != nil {
			err = msgp.WrapError(err, "Limit")
			return
		}
	}
	// write "BySourceAmount"
	err = en.Append(0xae, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.BySourceAmount)
	if err != nil {
		err = msgp.WrapError(err, "BySourceAmount")
		return
	}
	// write "IgnoreFees"
	err = en.Append(0xaa, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IgnoreFees)
	if err != nil {
		err = msgp.WrapError(err, "IgnoreFees")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *tradeParams) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "Amount"
	o = append(o, 0x84, 0xa6, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	if z.Amount == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.Amount))
	}
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if z.Limit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeUint256(z.Limit))
	}
	// string "BySourceAmount"
	o = append(o, 0xae, 0x42, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendBool(o, z.BySourceAmount)
	// string "IgnoreFees"
	o = append(o, 0xaa, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x46, 0x65, 0x65, 0x73)
	o = msgp.AppendBool(o, z.IgnoreFees)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *tradeParams) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Amount":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Amount = nil
			} else {
				{
					var zb0002 []byte
					zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.Amount))
					if err != nil {
						err = msgp.WrapError(err, "Amount")
						return
					}
					z.Amount = msgpencode.DecodeUint256(zb0002)
				}
			}
		case "Limit":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Limit = nil
			} else {
				{
					var zb0003 []byte
					zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeUint256(z.Limit))
					if err != nil {
						err = msgp.WrapError(err, "Limit")
						return
					}
					z.Limit = msgpencode.DecodeUint256(zb0003)
				}
			}
		case "BySourceAmount":
			z.BySourceAmount, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BySourceAmount")
				return
			}
		case "IgnoreFees":
			z.IgnoreFees, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IgnoreFees")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *tradeParams) Msgsize() (s int) {
	s = 1 + 7
	if z.Amount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.Amount))
	}
	s += 6
	if z.Limit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeUint256(z.Limit))
	}
	s += 15 + msgp.BoolSize + 11 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *tradeTokens) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SourceToken":
			z.SourceToken, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SourceToken")
				return
			}
		case "TargetToken":
			z.TargetToken, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TargetToken")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z tradeTokens) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "SourceToken"
	err = en.Append(0x82, 0xab, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.SourceToken)
	if err != nil {
		err = msgp.WrapError(err, "SourceToken")
		return
	}
	// write "TargetToken"
	err = en.Append(0xab, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.TargetToken)
	if err != nil {
		err = msgp.WrapError(err, "TargetToken")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z tradeTokens) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "SourceToken"
	o = append(o, 0x82, 0xab, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendString(o, z.SourceToken)
	// string "TargetToken"
	o = append(o, 0xab, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e)
	o = msgp.AppendString(o, z.TargetToken)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *tradeTokens) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SourceToken":
			z.SourceToken, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SourceToken")
				return
			}
		case "TargetToken":
			z.TargetToken, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetToken")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z tradeTokens) Msgsize() (s int) {
	s = 1 + 12 + msgp.StringPrefixSize + len(z.SourceToken) + 12 + msgp.StringPrefixSize + len(z.TargetToken)
	return
}
