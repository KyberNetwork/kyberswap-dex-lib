package swaapv2

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Swap":
			z.Swap, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Swap")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Swap"
	err = en.Append(0x81, 0xa4, 0x53, 0x77, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Swap)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Swap"
	o = append(o, 0x81, 0xa4, 0x53, 0x77, 0x61, 0x70)
	o = msgp.AppendInt64(o, z.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Swap":
			z.Swap, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Swap")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + 5 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.isBaseSwapped, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "isBaseSwapped")
		return
	}
	z.isQuoteSwapped, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "isQuoteSwapped")
		return
	}
	err = z.baseToken.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "baseToken")
		return
	}
	err = z.quoteToken.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "quoteToken")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "baseToQuotePriceLevels")
		return
	}
	if cap(z.baseToQuotePriceLevels) >= int(zb0002) {
		z.baseToQuotePriceLevels = (z.baseToQuotePriceLevels)[:zb0002]
	} else {
		z.baseToQuotePriceLevels = make([]PriceLevel, zb0002)
	}
	for za0001 := range z.baseToQuotePriceLevels {
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001)
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		z.baseToQuotePriceLevels[za0001].Price, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001, "Price")
			return
		}
		z.baseToQuotePriceLevels[za0001].Level, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001, "Level")
			return
		}
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "quoteToBasePriceLevels")
		return
	}
	if cap(z.quoteToBasePriceLevels) >= int(zb0004) {
		z.quoteToBasePriceLevels = (z.quoteToBasePriceLevels)[:zb0004]
	} else {
		z.quoteToBasePriceLevels = make([]PriceLevel, zb0004)
	}
	for za0002 := range z.quoteToBasePriceLevels {
		var zb0005 uint32
		zb0005, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002)
			return
		}
		if zb0005 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0005}
			return
		}
		z.quoteToBasePriceLevels[za0002].Price, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002, "Price")
			return
		}
		z.quoteToBasePriceLevels[za0002].Level, err = dc.ReadFloat64()
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002, "Level")
			return
		}
	}
	z.timestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "timestamp")
		return
	}
	z.priceTolerance, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "priceTolerance")
		return
	}
	var field []byte
	_ = field
	var zb0006 uint32
	zb0006, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	for zb0006 > 0 {
		zb0006--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err, "gas")
			return
		}
		switch msgp.UnsafeString(field) {
		case "Swap":
			z.gas.Swap, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "gas", "Swap")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err, "gas")
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 10
	err = en.Append(0x9a)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.isBaseSwapped)
	if err != nil {
		err = msgp.WrapError(err, "isBaseSwapped")
		return
	}
	err = en.WriteBool(z.isQuoteSwapped)
	if err != nil {
		err = msgp.WrapError(err, "isQuoteSwapped")
		return
	}
	err = z.baseToken.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "baseToken")
		return
	}
	err = z.quoteToken.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "quoteToken")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.baseToQuotePriceLevels)))
	if err != nil {
		err = msgp.WrapError(err, "baseToQuotePriceLevels")
		return
	}
	for za0001 := range z.baseToQuotePriceLevels {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteFloat64(z.baseToQuotePriceLevels[za0001].Price)
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001, "Price")
			return
		}
		err = en.WriteFloat64(z.baseToQuotePriceLevels[za0001].Level)
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001, "Level")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.quoteToBasePriceLevels)))
	if err != nil {
		err = msgp.WrapError(err, "quoteToBasePriceLevels")
		return
	}
	for za0002 := range z.quoteToBasePriceLevels {
		// array header, size 2
		err = en.Append(0x92)
		if err != nil {
			return
		}
		err = en.WriteFloat64(z.quoteToBasePriceLevels[za0002].Price)
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002, "Price")
			return
		}
		err = en.WriteFloat64(z.quoteToBasePriceLevels[za0002].Level)
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002, "Level")
			return
		}
	}
	err = en.WriteInt64(z.timestamp)
	if err != nil {
		err = msgp.WrapError(err, "timestamp")
		return
	}
	err = en.WriteFloat64(z.priceTolerance)
	if err != nil {
		err = msgp.WrapError(err, "priceTolerance")
		return
	}
	// map header, size 1
	// write "Swap"
	err = en.Append(0x81, 0xa4, 0x53, 0x77, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.gas.Swap)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 10
	o = append(o, 0x9a)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.isBaseSwapped)
	o = msgp.AppendBool(o, z.isQuoteSwapped)
	o, err = z.baseToken.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "baseToken")
		return
	}
	o, err = z.quoteToken.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "quoteToken")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.baseToQuotePriceLevels)))
	for za0001 := range z.baseToQuotePriceLevels {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendFloat64(o, z.baseToQuotePriceLevels[za0001].Price)
		o = msgp.AppendFloat64(o, z.baseToQuotePriceLevels[za0001].Level)
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.quoteToBasePriceLevels)))
	for za0002 := range z.quoteToBasePriceLevels {
		// array header, size 2
		o = append(o, 0x92)
		o = msgp.AppendFloat64(o, z.quoteToBasePriceLevels[za0002].Price)
		o = msgp.AppendFloat64(o, z.quoteToBasePriceLevels[za0002].Level)
	}
	o = msgp.AppendInt64(o, z.timestamp)
	o = msgp.AppendFloat64(o, z.priceTolerance)
	// map header, size 1
	// string "Swap"
	o = append(o, 0x81, 0xa4, 0x53, 0x77, 0x61, 0x70)
	o = msgp.AppendInt64(o, z.gas.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.isBaseSwapped, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "isBaseSwapped")
		return
	}
	z.isQuoteSwapped, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "isQuoteSwapped")
		return
	}
	bts, err = z.baseToken.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "baseToken")
		return
	}
	bts, err = z.quoteToken.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "quoteToken")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "baseToQuotePriceLevels")
		return
	}
	if cap(z.baseToQuotePriceLevels) >= int(zb0002) {
		z.baseToQuotePriceLevels = (z.baseToQuotePriceLevels)[:zb0002]
	} else {
		z.baseToQuotePriceLevels = make([]PriceLevel, zb0002)
	}
	for za0001 := range z.baseToQuotePriceLevels {
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001)
			return
		}
		if zb0003 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0003}
			return
		}
		z.baseToQuotePriceLevels[za0001].Price, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001, "Price")
			return
		}
		z.baseToQuotePriceLevels[za0001].Level, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "baseToQuotePriceLevels", za0001, "Level")
			return
		}
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "quoteToBasePriceLevels")
		return
	}
	if cap(z.quoteToBasePriceLevels) >= int(zb0004) {
		z.quoteToBasePriceLevels = (z.quoteToBasePriceLevels)[:zb0004]
	} else {
		z.quoteToBasePriceLevels = make([]PriceLevel, zb0004)
	}
	for za0002 := range z.quoteToBasePriceLevels {
		var zb0005 uint32
		zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002)
			return
		}
		if zb0005 != 2 {
			err = msgp.ArrayError{Wanted: 2, Got: zb0005}
			return
		}
		z.quoteToBasePriceLevels[za0002].Price, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002, "Price")
			return
		}
		z.quoteToBasePriceLevels[za0002].Level, bts, err = msgp.ReadFloat64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "quoteToBasePriceLevels", za0002, "Level")
			return
		}
	}
	z.timestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "timestamp")
		return
	}
	z.priceTolerance, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "priceTolerance")
		return
	}
	var field []byte
	_ = field
	var zb0006 uint32
	zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	for zb0006 > 0 {
		zb0006--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err, "gas")
			return
		}
		switch msgp.UnsafeString(field) {
		case "Swap":
			z.gas.Swap, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "gas", "Swap")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err, "gas")
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.BoolSize + msgp.BoolSize + z.baseToken.Msgsize() + z.quoteToken.Msgsize() + msgp.ArrayHeaderSize + (len(z.baseToQuotePriceLevels) * (13 + msgp.Float64Size + msgp.Float64Size)) + msgp.ArrayHeaderSize + (len(z.quoteToBasePriceLevels) * (13 + msgp.Float64Size + msgp.Float64Size)) + msgp.Int64Size + msgp.Float64Size + 1 + 5 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceLevel) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Price, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	z.Level, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Level")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PriceLevel) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	err = en.WriteFloat64(z.Level)
	if err != nil {
		err = msgp.WrapError(err, "Level")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PriceLevel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendFloat64(o, z.Price)
	o = msgp.AppendFloat64(o, z.Level)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceLevel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Price, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	z.Level, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Level")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PriceLevel) Msgsize() (s int) {
	s = 1 + msgp.Float64Size + msgp.Float64Size
	return
}
