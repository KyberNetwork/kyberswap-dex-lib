package kyberpmm

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Swap)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PairItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Base":
			z.Base, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Base")
				return
			}
		case "Quote":
			z.Quote, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "LiquidityUSD":
			z.LiquidityUSD, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "LiquidityUSD")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PairItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Base"
	err = en.Append(0x83, 0xa4, 0x42, 0x61, 0x73, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Base)
	if err != nil {
		err = msgp.WrapError(err, "Base")
		return
	}
	// write "Quote"
	err = en.Append(0xa5, 0x51, 0x75, 0x6f, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Quote)
	if err != nil {
		err = msgp.WrapError(err, "Quote")
		return
	}
	// write "LiquidityUSD"
	err = en.Append(0xac, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x55, 0x53, 0x44)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.LiquidityUSD)
	if err != nil {
		err = msgp.WrapError(err, "LiquidityUSD")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PairItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Base"
	o = append(o, 0x83, 0xa4, 0x42, 0x61, 0x73, 0x65)
	o = msgp.AppendString(o, z.Base)
	// string "Quote"
	o = append(o, 0xa5, 0x51, 0x75, 0x6f, 0x74, 0x65)
	o = msgp.AppendString(o, z.Quote)
	// string "LiquidityUSD"
	o = append(o, 0xac, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x69, 0x74, 0x79, 0x55, 0x53, 0x44)
	o = msgp.AppendFloat64(o, z.LiquidityUSD)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PairItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Base":
			z.Base, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Base")
				return
			}
		case "Quote":
			z.Quote, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quote")
				return
			}
		case "LiquidityUSD":
			z.LiquidityUSD, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LiquidityUSD")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PairItem) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Base) + 6 + msgp.StringPrefixSize + len(z.Quote) + 13 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceLevel) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Price, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	z.Amount, err = dc.ReadFloat64()
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z PriceLevel) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	err = en.WriteFloat64(z.Amount)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z PriceLevel) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendFloat64(o, z.Price)
	o = msgp.AppendFloat64(o, z.Amount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceLevel) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Price, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	z.Amount, bts, err = msgp.ReadFloat64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Amount")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z PriceLevel) Msgsize() (s int) {
	s = 1 + msgp.Float64Size + msgp.Float64Size
	return
}
