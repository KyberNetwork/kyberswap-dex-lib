package smardex

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FeeToAmount) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Fees0")
			return
		}
		z.Fees0 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Fees0))
			if err != nil {
				err = msgp.WrapError(err, "Fees0")
				return
			}
			z.Fees0 = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Fees1")
			return
		}
		z.Fees1 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Fees1))
			if err != nil {
				err = msgp.WrapError(err, "Fees1")
				return
			}
			z.Fees1 = msgpencode.DecodeInt(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FeeToAmount) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.Fees0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Fees0))
		if err != nil {
			err = msgp.WrapError(err, "Fees0")
			return
		}
	}
	if z.Fees1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Fees1))
		if err != nil {
			err = msgp.WrapError(err, "Fees1")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FeeToAmount) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.Fees0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Fees0))
	}
	if z.Fees1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Fees1))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FeeToAmount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Fees0 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Fees0))
			if err != nil {
				err = msgp.WrapError(err, "Fees0")
				return
			}
			z.Fees0 = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Fees1 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Fees1))
			if err != nil {
				err = msgp.WrapError(err, "Fees1")
				return
			}
			z.Fees1 = msgpencode.DecodeInt(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FeeToAmount) Msgsize() (s int) {
	s = 1
	if z.Fees0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Fees0))
	}
	if z.Fees1 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Fees1))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FictiveReserve) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FictiveReserve0")
			return
		}
		z.FictiveReserve0 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.FictiveReserve0))
			if err != nil {
				err = msgp.WrapError(err, "FictiveReserve0")
				return
			}
			z.FictiveReserve0 = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FictiveReserve1")
			return
		}
		z.FictiveReserve1 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.FictiveReserve1))
			if err != nil {
				err = msgp.WrapError(err, "FictiveReserve1")
				return
			}
			z.FictiveReserve1 = msgpencode.DecodeInt(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FictiveReserve) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.FictiveReserve0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FictiveReserve0))
		if err != nil {
			err = msgp.WrapError(err, "FictiveReserve0")
			return
		}
	}
	if z.FictiveReserve1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FictiveReserve1))
		if err != nil {
			err = msgp.WrapError(err, "FictiveReserve1")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FictiveReserve) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.FictiveReserve0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FictiveReserve0))
	}
	if z.FictiveReserve1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FictiveReserve1))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FictiveReserve) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FictiveReserve0 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FictiveReserve0))
			if err != nil {
				err = msgp.WrapError(err, "FictiveReserve0")
				return
			}
			z.FictiveReserve0 = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FictiveReserve1 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FictiveReserve1))
			if err != nil {
				err = msgp.WrapError(err, "FictiveReserve1")
				return
			}
			z.FictiveReserve1 = msgpencode.DecodeInt(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FictiveReserve) Msgsize() (s int) {
	s = 1
	if z.FictiveReserve0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FictiveReserve0))
	}
	if z.FictiveReserve1 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FictiveReserve1))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Swap)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PairFee) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeesLP")
			return
		}
		z.FeesLP = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeesLP))
			if err != nil {
				err = msgp.WrapError(err, "FeesLP")
				return
			}
			z.FeesLP = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeesPool")
			return
		}
		z.FeesPool = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeesPool))
			if err != nil {
				err = msgp.WrapError(err, "FeesPool")
				return
			}
			z.FeesPool = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeesBase")
			return
		}
		z.FeesBase = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeesBase))
			if err != nil {
				err = msgp.WrapError(err, "FeesBase")
				return
			}
			z.FeesBase = msgpencode.DecodeInt(zb0004)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PairFee) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	if z.FeesLP == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeesLP))
		if err != nil {
			err = msgp.WrapError(err, "FeesLP")
			return
		}
	}
	if z.FeesPool == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeesPool))
		if err != nil {
			err = msgp.WrapError(err, "FeesPool")
			return
		}
	}
	if z.FeesBase == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeesBase))
		if err != nil {
			err = msgp.WrapError(err, "FeesBase")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PairFee) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	if z.FeesLP == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeesLP))
	}
	if z.FeesPool == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeesPool))
	}
	if z.FeesBase == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeesBase))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PairFee) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeesLP = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeesLP))
			if err != nil {
				err = msgp.WrapError(err, "FeesLP")
				return
			}
			z.FeesLP = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeesPool = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeesPool))
			if err != nil {
				err = msgp.WrapError(err, "FeesPool")
				return
			}
			z.FeesPool = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeesBase = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeesBase))
			if err != nil {
				err = msgp.WrapError(err, "FeesBase")
				return
			}
			z.FeesBase = msgpencode.DecodeInt(zb0004)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PairFee) Msgsize() (s int) {
	s = 1
	if z.FeesLP == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeesLP))
	}
	if z.FeesPool == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeesPool))
	}
	if z.FeesBase == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeesBase))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.SmardexPair.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "SmardexPair")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0002 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0002}
		return
	}
	z.gas.Swap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "gas", "Swap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.SmardexPair.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SmardexPair")
		return
	}
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.gas.Swap)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o, err = z.SmardexPair.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SmardexPair")
		return
	}
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.gas.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	bts, err = z.SmardexPair.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "SmardexPair")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0002 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0002}
		return
	}
	z.gas.Swap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Swap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + z.SmardexPair.Msgsize() + 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PriceAverage) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PriceAverage0")
			return
		}
		z.PriceAverage0 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.PriceAverage0))
			if err != nil {
				err = msgp.WrapError(err, "PriceAverage0")
				return
			}
			z.PriceAverage0 = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PriceAverage1")
			return
		}
		z.PriceAverage1 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.PriceAverage1))
			if err != nil {
				err = msgp.WrapError(err, "PriceAverage1")
				return
			}
			z.PriceAverage1 = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PriceAverageLastTimestamp")
			return
		}
		z.PriceAverageLastTimestamp = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.PriceAverageLastTimestamp))
			if err != nil {
				err = msgp.WrapError(err, "PriceAverageLastTimestamp")
				return
			}
			z.PriceAverageLastTimestamp = msgpencode.DecodeInt(zb0004)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PriceAverage) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	if z.PriceAverage0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PriceAverage0))
		if err != nil {
			err = msgp.WrapError(err, "PriceAverage0")
			return
		}
	}
	if z.PriceAverage1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PriceAverage1))
		if err != nil {
			err = msgp.WrapError(err, "PriceAverage1")
			return
		}
	}
	if z.PriceAverageLastTimestamp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PriceAverageLastTimestamp))
		if err != nil {
			err = msgp.WrapError(err, "PriceAverageLastTimestamp")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PriceAverage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	if z.PriceAverage0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PriceAverage0))
	}
	if z.PriceAverage1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PriceAverage1))
	}
	if z.PriceAverageLastTimestamp == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PriceAverageLastTimestamp))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PriceAverage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PriceAverage0 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PriceAverage0))
			if err != nil {
				err = msgp.WrapError(err, "PriceAverage0")
				return
			}
			z.PriceAverage0 = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PriceAverage1 = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PriceAverage1))
			if err != nil {
				err = msgp.WrapError(err, "PriceAverage1")
				return
			}
			z.PriceAverage1 = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PriceAverageLastTimestamp = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PriceAverageLastTimestamp))
			if err != nil {
				err = msgp.WrapError(err, "PriceAverageLastTimestamp")
				return
			}
			z.PriceAverageLastTimestamp = msgpencode.DecodeInt(zb0004)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PriceAverage) Msgsize() (s int) {
	s = 1
	if z.PriceAverage0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PriceAverage0))
	}
	if z.PriceAverage1 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PriceAverage1))
	}
	if z.PriceAverageLastTimestamp == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PriceAverageLastTimestamp))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Reserve) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Reserve0":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Reserve0")
					return
				}
				z.Reserve0 = nil
			} else {
				{
					var zb0002 []byte
					zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Reserve0))
					if err != nil {
						err = msgp.WrapError(err, "Reserve0")
						return
					}
					z.Reserve0 = msgpencode.DecodeInt(zb0002)
				}
			}
		case "Reserve1":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Reserve1")
					return
				}
				z.Reserve1 = nil
			} else {
				{
					var zb0003 []byte
					zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Reserve1))
					if err != nil {
						err = msgp.WrapError(err, "Reserve1")
						return
					}
					z.Reserve1 = msgpencode.DecodeInt(zb0003)
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Reserve) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Reserve0"
	err = en.Append(0x82, 0xa8, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30)
	if err != nil {
		return
	}
	if z.Reserve0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Reserve0))
		if err != nil {
			err = msgp.WrapError(err, "Reserve0")
			return
		}
	}
	// write "Reserve1"
	err = en.Append(0xa8, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31)
	if err != nil {
		return
	}
	if z.Reserve1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Reserve1))
		if err != nil {
			err = msgp.WrapError(err, "Reserve1")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Reserve) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Reserve0"
	o = append(o, 0x82, 0xa8, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x30)
	if z.Reserve0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Reserve0))
	}
	// string "Reserve1"
	o = append(o, 0xa8, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x31)
	if z.Reserve1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Reserve1))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Reserve) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Reserve0":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Reserve0 = nil
			} else {
				{
					var zb0002 []byte
					zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Reserve0))
					if err != nil {
						err = msgp.WrapError(err, "Reserve0")
						return
					}
					z.Reserve0 = msgpencode.DecodeInt(zb0002)
				}
			}
		case "Reserve1":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Reserve1 = nil
			} else {
				{
					var zb0003 []byte
					zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Reserve1))
					if err != nil {
						err = msgp.WrapError(err, "Reserve1")
						return
					}
					z.Reserve1 = msgpencode.DecodeInt(zb0003)
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Reserve) Msgsize() (s int) {
	s = 1 + 9
	if z.Reserve0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Reserve0))
	}
	s += 9
	if z.Reserve1 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Reserve1))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SmardexPair) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.PairFee.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "PairFee")
		return
	}
	err = z.FictiveReserve.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "FictiveReserve")
		return
	}
	err = z.PriceAverage.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "PriceAverage")
		return
	}
	err = z.FeeToAmount.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "FeeToAmount")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SmardexPair) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = z.PairFee.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PairFee")
		return
	}
	err = z.FictiveReserve.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "FictiveReserve")
		return
	}
	err = z.PriceAverage.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PriceAverage")
		return
	}
	err = z.FeeToAmount.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "FeeToAmount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SmardexPair) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o, err = z.PairFee.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PairFee")
		return
	}
	o, err = z.FictiveReserve.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "FictiveReserve")
		return
	}
	o, err = z.PriceAverage.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PriceAverage")
		return
	}
	o, err = z.FeeToAmount.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "FeeToAmount")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SmardexPair) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.PairFee.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "PairFee")
		return
	}
	bts, err = z.FictiveReserve.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "FictiveReserve")
		return
	}
	bts, err = z.PriceAverage.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "PriceAverage")
		return
	}
	bts, err = z.FeeToAmount.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "FeeToAmount")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SmardexPair) Msgsize() (s int) {
	s = 1 + z.PairFee.Msgsize() + z.FictiveReserve.Msgsize() + z.PriceAverage.Msgsize() + z.FeeToAmount.Msgsize()
	return
}
