package maverickv1

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Pool) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "decimals")
		return
	}
	if cap(z.decimals) >= int(zb0002) {
		z.decimals = (z.decimals)[:zb0002]
	} else {
		z.decimals = make([]uint8, zb0002)
	}
	for za0001 := range z.decimals {
		z.decimals[za0001], err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err, "decimals", za0001)
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "state")
			return
		}
		z.state = nil
	} else {
		if z.state == nil {
			z.state = new(MaverickPoolState)
		}
		err = z.state.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "state")
			return
		}
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pool) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.decimals)))
	if err != nil {
		err = msgp.WrapError(err, "decimals")
		return
	}
	for za0001 := range z.decimals {
		err = en.WriteUint8(z.decimals[za0001])
		if err != nil {
			err = msgp.WrapError(err, "decimals", za0001)
			return
		}
	}
	if z.state == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.state.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "state")
			return
		}
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.decimals)))
	for za0001 := range z.decimals {
		o = msgp.AppendUint8(o, z.decimals[za0001])
	}
	if z.state == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.state.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "state")
			return
		}
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "decimals")
		return
	}
	if cap(z.decimals) >= int(zb0002) {
		z.decimals = (z.decimals)[:zb0002]
	} else {
		z.decimals = make([]uint8, zb0002)
	}
	for za0001 := range z.decimals {
		z.decimals[za0001], bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "decimals", za0001)
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.state = nil
	} else {
		if z.state == nil {
			z.state = new(MaverickPoolState)
		}
		bts, err = z.state.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "state")
			return
		}
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pool) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.ArrayHeaderSize + (len(z.decimals) * (msgp.Uint8Size))
	if z.state == nil {
		s += msgp.NilSize
	} else {
		s += z.state.Msgsize()
	}
	s += z.gas.Msgsize()
	return
}
