package camelot

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.StableSwap, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "StableSwap")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token0FeePercent")
			return
		}
		z.Token0FeePercent = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Token0FeePercent))
			if err != nil {
				err = msgp.WrapError(err, "Token0FeePercent")
				return
			}
			z.Token0FeePercent = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Token1FeePercent")
			return
		}
		z.Token1FeePercent = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Token1FeePercent))
			if err != nil {
				err = msgp.WrapError(err, "Token1FeePercent")
				return
			}
			z.Token1FeePercent = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PrecisionMultiplier0")
			return
		}
		z.PrecisionMultiplier0 = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.PrecisionMultiplier0))
			if err != nil {
				err = msgp.WrapError(err, "PrecisionMultiplier0")
				return
			}
			z.PrecisionMultiplier0 = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PrecisionMultiplier1")
			return
		}
		z.PrecisionMultiplier1 = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.PrecisionMultiplier1))
			if err != nil {
				err = msgp.WrapError(err, "PrecisionMultiplier1")
				return
			}
			z.PrecisionMultiplier1 = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeeDenominator")
			return
		}
		z.FeeDenominator = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeeDenominator))
			if err != nil {
				err = msgp.WrapError(err, "FeeDenominator")
				return
			}
			z.FeeDenominator = msgpencode.DecodeInt(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Factory")
			return
		}
		z.Factory = nil
	} else {
		if z.Factory == nil {
			z.Factory = new(Factory)
		}
		err = z.Factory.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "Factory")
			return
		}
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 9
	err = en.Append(0x99)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.StableSwap)
	if err != nil {
		err = msgp.WrapError(err, "StableSwap")
		return
	}
	if z.Token0FeePercent == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Token0FeePercent))
		if err != nil {
			err = msgp.WrapError(err, "Token0FeePercent")
			return
		}
	}
	if z.Token1FeePercent == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Token1FeePercent))
		if err != nil {
			err = msgp.WrapError(err, "Token1FeePercent")
			return
		}
	}
	if z.PrecisionMultiplier0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PrecisionMultiplier0))
		if err != nil {
			err = msgp.WrapError(err, "PrecisionMultiplier0")
			return
		}
	}
	if z.PrecisionMultiplier1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PrecisionMultiplier1))
		if err != nil {
			err = msgp.WrapError(err, "PrecisionMultiplier1")
			return
		}
	}
	if z.FeeDenominator == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeeDenominator))
		if err != nil {
			err = msgp.WrapError(err, "FeeDenominator")
			return
		}
	}
	if z.Factory == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Factory.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Factory")
			return
		}
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.StableSwap)
	if z.Token0FeePercent == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Token0FeePercent))
	}
	if z.Token1FeePercent == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Token1FeePercent))
	}
	if z.PrecisionMultiplier0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PrecisionMultiplier0))
	}
	if z.PrecisionMultiplier1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PrecisionMultiplier1))
	}
	if z.FeeDenominator == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeeDenominator))
	}
	if z.Factory == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Factory.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Factory")
			return
		}
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.StableSwap, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "StableSwap")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token0FeePercent = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Token0FeePercent))
			if err != nil {
				err = msgp.WrapError(err, "Token0FeePercent")
				return
			}
			z.Token0FeePercent = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Token1FeePercent = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Token1FeePercent))
			if err != nil {
				err = msgp.WrapError(err, "Token1FeePercent")
				return
			}
			z.Token1FeePercent = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PrecisionMultiplier0 = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PrecisionMultiplier0))
			if err != nil {
				err = msgp.WrapError(err, "PrecisionMultiplier0")
				return
			}
			z.PrecisionMultiplier0 = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PrecisionMultiplier1 = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PrecisionMultiplier1))
			if err != nil {
				err = msgp.WrapError(err, "PrecisionMultiplier1")
				return
			}
			z.PrecisionMultiplier1 = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeeDenominator = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeeDenominator))
			if err != nil {
				err = msgp.WrapError(err, "FeeDenominator")
				return
			}
			z.FeeDenominator = msgpencode.DecodeInt(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Factory = nil
	} else {
		if z.Factory == nil {
			z.Factory = new(Factory)
		}
		bts, err = z.Factory.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "Factory")
			return
		}
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.BoolSize
	if z.Token0FeePercent == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Token0FeePercent))
	}
	if z.Token1FeePercent == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Token1FeePercent))
	}
	if z.PrecisionMultiplier0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PrecisionMultiplier0))
	}
	if z.PrecisionMultiplier1 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PrecisionMultiplier1))
	}
	if z.FeeDenominator == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeeDenominator))
	}
	if z.Factory == nil {
		s += msgp.NilSize
	} else {
		s += z.Factory.Msgsize()
	}
	s += z.gas.Msgsize()
	return
}
