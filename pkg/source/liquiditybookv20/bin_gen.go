package liquiditybookv20

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Bin) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.ID, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "ReserveX")
			return
		}
		z.ReserveX = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.ReserveX))
			if err != nil {
				err = msgp.WrapError(err, "ReserveX")
				return
			}
			z.ReserveX = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "ReserveY")
			return
		}
		z.ReserveY = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.ReserveY))
			if err != nil {
				err = msgp.WrapError(err, "ReserveY")
				return
			}
			z.ReserveY = msgpencode.DecodeInt(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Bin) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	if z.ReserveX == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.ReserveX))
		if err != nil {
			err = msgp.WrapError(err, "ReserveX")
			return
		}
	}
	if z.ReserveY == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.ReserveY))
		if err != nil {
			err = msgp.WrapError(err, "ReserveY")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Bin) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendUint32(o, z.ID)
	if z.ReserveX == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.ReserveX))
	}
	if z.ReserveY == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.ReserveY))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Bin) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.ID, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.ReserveX = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.ReserveX))
			if err != nil {
				err = msgp.WrapError(err, "ReserveX")
				return
			}
			z.ReserveX = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.ReserveY = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.ReserveY))
			if err != nil {
				err = msgp.WrapError(err, "ReserveY")
				return
			}
			z.ReserveY = msgpencode.DecodeInt(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Bin) Msgsize() (s int) {
	s = 1 + msgp.Uint32Size
	if z.ReserveX == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.ReserveX))
	}
	if z.ReserveY == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.ReserveY))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *binReserveChanges) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BinID":
			z.BinID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "BinID")
				return
			}
		case "AmountXIn":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AmountXIn")
					return
				}
				z.AmountXIn = nil
			} else {
				{
					var zb0002 []byte
					zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.AmountXIn))
					if err != nil {
						err = msgp.WrapError(err, "AmountXIn")
						return
					}
					z.AmountXIn = msgpencode.DecodeInt(zb0002)
				}
			}
		case "AmountXOut":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AmountXOut")
					return
				}
				z.AmountXOut = nil
			} else {
				{
					var zb0003 []byte
					zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.AmountXOut))
					if err != nil {
						err = msgp.WrapError(err, "AmountXOut")
						return
					}
					z.AmountXOut = msgpencode.DecodeInt(zb0003)
				}
			}
		case "AmountYIn":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AmountYIn")
					return
				}
				z.AmountYIn = nil
			} else {
				{
					var zb0004 []byte
					zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.AmountYIn))
					if err != nil {
						err = msgp.WrapError(err, "AmountYIn")
						return
					}
					z.AmountYIn = msgpencode.DecodeInt(zb0004)
				}
			}
		case "AmountYOut":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "AmountYOut")
					return
				}
				z.AmountYOut = nil
			} else {
				{
					var zb0005 []byte
					zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.AmountYOut))
					if err != nil {
						err = msgp.WrapError(err, "AmountYOut")
						return
					}
					z.AmountYOut = msgpencode.DecodeInt(zb0005)
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *binReserveChanges) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "BinID"
	err = en.Append(0x85, 0xa5, 0x42, 0x69, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.BinID)
	if err != nil {
		err = msgp.WrapError(err, "BinID")
		return
	}
	// write "AmountXIn"
	err = en.Append(0xa9, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x49, 0x6e)
	if err != nil {
		return
	}
	if z.AmountXIn == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AmountXIn))
		if err != nil {
			err = msgp.WrapError(err, "AmountXIn")
			return
		}
	}
	// write "AmountXOut"
	err = en.Append(0xaa, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x4f, 0x75, 0x74)
	if err != nil {
		return
	}
	if z.AmountXOut == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AmountXOut))
		if err != nil {
			err = msgp.WrapError(err, "AmountXOut")
			return
		}
	}
	// write "AmountYIn"
	err = en.Append(0xa9, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x49, 0x6e)
	if err != nil {
		return
	}
	if z.AmountYIn == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AmountYIn))
		if err != nil {
			err = msgp.WrapError(err, "AmountYIn")
			return
		}
	}
	// write "AmountYOut"
	err = en.Append(0xaa, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x4f, 0x75, 0x74)
	if err != nil {
		return
	}
	if z.AmountYOut == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AmountYOut))
		if err != nil {
			err = msgp.WrapError(err, "AmountYOut")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *binReserveChanges) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "BinID"
	o = append(o, 0x85, 0xa5, 0x42, 0x69, 0x6e, 0x49, 0x44)
	o = msgp.AppendUint32(o, z.BinID)
	// string "AmountXIn"
	o = append(o, 0xa9, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x49, 0x6e)
	if z.AmountXIn == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AmountXIn))
	}
	// string "AmountXOut"
	o = append(o, 0xaa, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x58, 0x4f, 0x75, 0x74)
	if z.AmountXOut == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AmountXOut))
	}
	// string "AmountYIn"
	o = append(o, 0xa9, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x49, 0x6e)
	if z.AmountYIn == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AmountYIn))
	}
	// string "AmountYOut"
	o = append(o, 0xaa, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x59, 0x4f, 0x75, 0x74)
	if z.AmountYOut == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AmountYOut))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *binReserveChanges) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "BinID":
			z.BinID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BinID")
				return
			}
		case "AmountXIn":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AmountXIn = nil
			} else {
				{
					var zb0002 []byte
					zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AmountXIn))
					if err != nil {
						err = msgp.WrapError(err, "AmountXIn")
						return
					}
					z.AmountXIn = msgpencode.DecodeInt(zb0002)
				}
			}
		case "AmountXOut":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AmountXOut = nil
			} else {
				{
					var zb0003 []byte
					zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AmountXOut))
					if err != nil {
						err = msgp.WrapError(err, "AmountXOut")
						return
					}
					z.AmountXOut = msgpencode.DecodeInt(zb0003)
				}
			}
		case "AmountYIn":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AmountYIn = nil
			} else {
				{
					var zb0004 []byte
					zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AmountYIn))
					if err != nil {
						err = msgp.WrapError(err, "AmountYIn")
						return
					}
					z.AmountYIn = msgpencode.DecodeInt(zb0004)
				}
			}
		case "AmountYOut":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.AmountYOut = nil
			} else {
				{
					var zb0005 []byte
					zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AmountYOut))
					if err != nil {
						err = msgp.WrapError(err, "AmountYOut")
						return
					}
					z.AmountYOut = msgpencode.DecodeInt(zb0005)
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *binReserveChanges) Msgsize() (s int) {
	s = 1 + 6 + msgp.Uint32Size + 10
	if z.AmountXIn == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AmountXIn))
	}
	s += 11
	if z.AmountXOut == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AmountXOut))
	}
	s += 10
	if z.AmountYIn == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AmountYIn))
	}
	s += 11
	if z.AmountYOut == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AmountYOut))
	}
	return
}
