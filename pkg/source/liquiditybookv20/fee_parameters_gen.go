package liquiditybookv20

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *feeParameters) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 12 {
		err = msgp.ArrayError{Wanted: 12, Got: zb0001}
		return
	}
	z.BinStep, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "BinStep")
		return
	}
	z.BaseFactor, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "BaseFactor")
		return
	}
	z.FilterPeriod, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "FilterPeriod")
		return
	}
	z.DecayPeriod, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "DecayPeriod")
		return
	}
	z.ReductionFactor, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "ReductionFactor")
		return
	}
	z.VariableFeeControl, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "VariableFeeControl")
		return
	}
	z.ProtocolShare, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "ProtocolShare")
		return
	}
	z.MaxVolatilityAccumulated, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "MaxVolatilityAccumulated")
		return
	}
	z.VolatilityAccumulated, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "VolatilityAccumulated")
		return
	}
	z.VolatilityReference, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "VolatilityReference")
		return
	}
	z.IndexRef, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "IndexRef")
		return
	}
	z.Time, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *feeParameters) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 12
	err = en.Append(0x9c)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.BinStep)
	if err != nil {
		err = msgp.WrapError(err, "BinStep")
		return
	}
	err = en.WriteUint16(z.BaseFactor)
	if err != nil {
		err = msgp.WrapError(err, "BaseFactor")
		return
	}
	err = en.WriteUint16(z.FilterPeriod)
	if err != nil {
		err = msgp.WrapError(err, "FilterPeriod")
		return
	}
	err = en.WriteUint16(z.DecayPeriod)
	if err != nil {
		err = msgp.WrapError(err, "DecayPeriod")
		return
	}
	err = en.WriteUint16(z.ReductionFactor)
	if err != nil {
		err = msgp.WrapError(err, "ReductionFactor")
		return
	}
	err = en.WriteUint32(z.VariableFeeControl)
	if err != nil {
		err = msgp.WrapError(err, "VariableFeeControl")
		return
	}
	err = en.WriteUint16(z.ProtocolShare)
	if err != nil {
		err = msgp.WrapError(err, "ProtocolShare")
		return
	}
	err = en.WriteUint32(z.MaxVolatilityAccumulated)
	if err != nil {
		err = msgp.WrapError(err, "MaxVolatilityAccumulated")
		return
	}
	err = en.WriteUint32(z.VolatilityAccumulated)
	if err != nil {
		err = msgp.WrapError(err, "VolatilityAccumulated")
		return
	}
	err = en.WriteUint32(z.VolatilityReference)
	if err != nil {
		err = msgp.WrapError(err, "VolatilityReference")
		return
	}
	err = en.WriteUint32(z.IndexRef)
	if err != nil {
		err = msgp.WrapError(err, "IndexRef")
		return
	}
	err = en.WriteUint64(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *feeParameters) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 12
	o = append(o, 0x9c)
	o = msgp.AppendUint16(o, z.BinStep)
	o = msgp.AppendUint16(o, z.BaseFactor)
	o = msgp.AppendUint16(o, z.FilterPeriod)
	o = msgp.AppendUint16(o, z.DecayPeriod)
	o = msgp.AppendUint16(o, z.ReductionFactor)
	o = msgp.AppendUint32(o, z.VariableFeeControl)
	o = msgp.AppendUint16(o, z.ProtocolShare)
	o = msgp.AppendUint32(o, z.MaxVolatilityAccumulated)
	o = msgp.AppendUint32(o, z.VolatilityAccumulated)
	o = msgp.AppendUint32(o, z.VolatilityReference)
	o = msgp.AppendUint32(o, z.IndexRef)
	o = msgp.AppendUint64(o, z.Time)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *feeParameters) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 12 {
		err = msgp.ArrayError{Wanted: 12, Got: zb0001}
		return
	}
	z.BinStep, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BinStep")
		return
	}
	z.BaseFactor, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BaseFactor")
		return
	}
	z.FilterPeriod, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FilterPeriod")
		return
	}
	z.DecayPeriod, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DecayPeriod")
		return
	}
	z.ReductionFactor, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ReductionFactor")
		return
	}
	z.VariableFeeControl, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "VariableFeeControl")
		return
	}
	z.ProtocolShare, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ProtocolShare")
		return
	}
	z.MaxVolatilityAccumulated, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MaxVolatilityAccumulated")
		return
	}
	z.VolatilityAccumulated, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "VolatilityAccumulated")
		return
	}
	z.VolatilityReference, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "VolatilityReference")
		return
	}
	z.IndexRef, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "IndexRef")
		return
	}
	z.Time, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *feeParameters) Msgsize() (s int) {
	s = 1 + msgp.Uint16Size + msgp.Uint16Size + msgp.Uint16Size + msgp.Uint16Size + msgp.Uint16Size + msgp.Uint32Size + msgp.Uint16Size + msgp.Uint32Size + msgp.Uint32Size + msgp.Uint32Size + msgp.Uint32Size + msgp.Uint64Size
	return
}
