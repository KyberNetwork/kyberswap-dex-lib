package swap

import (
	"strings"
	"testing"

	"github.com/holiman/uint256"

	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/iziswap/library/calc"
)

func TestSqrtPrice(t *testing.T) {
	points := []int{
		-799982, -635215,
		-533123, -178798,
		-8998, 10023,
		230891, 324207,
		666666, 789982,
	}
	results_10 := []string{
		"337566766863",
		"1276587970199157",
		"210300120878001721",
		"10387821050578843637143455",
		"50524295339119081554095691615",
		"130772185468403270901693042611",
		"8172657046834771496447728984379562",
		"868146779769835510208114198087099700",
		"23693218645774009984854696030236055954050718",
		"11278805281235809828707633169889851504228842668",
	}
	for idx, p := range points {
		res, _ := calc.GetSqrtPrice(p)
		resStr := res.String()
		if strings.Compare(resStr, results_10[idx]) != 0 {
			t.Fatalf("value not equal: %s, %s, at point: (%v)", resStr, results_10[idx], p)
		}
	}
}

func TestLog(t *testing.T) {
	points := []int{
		-800048, -799982, -799929,
		-635281, -635215, -635162,
		-533189, -533123, -533070,
		-178864, -178798, -178745,
		-9064, -8998, -8945,
		9957, 10023, 10076,
		230825, 230891, 230944,
		324141, 324207, 324260,
		666600, 666666, 666719,
		789916, 789982, 790035,
	}
	sqrtList := []string{
		"336467332825",
		"337566766863",
		"338472532704",
		"1272430202299311",
		"1276587970199157",
		"1280013336350556",
		"209615186418072661",
		"210300120878001721",
		"210864402331772802",
		"10353988561223093595142271",
		"10387821050578843637143455",
		"10415693857971735721271850",
		"50359740840543822938057319426",
		"50524295339119081554095691615",
		"50659863130072737696630463974",
		"130346268565200420223595749045",
		"130772185468403270901693042611",
		"131123075989154516873286554607",
		"8146039209349996437362431766418337",
		"8172657046834771496447728984379562",
		"8194586082254754431577860696512769",
		"865319279513258125746461786312223671",
		"868146779769835510208114198087099700",
		"870476208421278803243840419040499909",
		"23616051301079336043469841116605072985748415",
		"23693218645774009984854696030236055954050718",
		"23756792759788473001426157511352074304449696",
		"11242070911461339711247318162468501228142896005",
		"11278805281235809828707633169889851504228842668",
		"11309068795181143139949310736151705943338174407",
	}
	for idx, sqrtPrice := range sqrtList {
		sqrtPriceInt := uint256.MustFromDecimal(sqrtPrice)
		pt, _ := calc.GetLogSqrtPriceFloor(sqrtPriceInt)
		if points[idx] != pt {
			t.Fatalf("value not equal: point[%v] %v, %v, at sqrtprice: %s", idx, pt, points[idx], sqrtPrice)
		}
	}
}
