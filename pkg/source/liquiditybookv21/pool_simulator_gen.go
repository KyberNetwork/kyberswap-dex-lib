package liquiditybookv21

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.blockTimestamp, err = dc.ReadUint64()
	if err != nil {
		err = msgp.WrapError(err, "blockTimestamp")
		return
	}
	err = z.staticFeeParams.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "staticFeeParams")
		return
	}
	err = z.variableFeeParams.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "variableFeeParams")
		return
	}
	z.activeBinID, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "activeBinID")
		return
	}
	z.binStep, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "binStep")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "bins")
		return
	}
	if cap(z.bins) >= int(zb0002) {
		z.bins = (z.bins)[:zb0002]
	} else {
		z.bins = make([]Bin, zb0002)
	}
	for za0001 := range z.bins {
		err = z.bins[za0001].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "bins", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 7
	err = en.Append(0x97)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteUint64(z.blockTimestamp)
	if err != nil {
		err = msgp.WrapError(err, "blockTimestamp")
		return
	}
	err = z.staticFeeParams.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "staticFeeParams")
		return
	}
	err = z.variableFeeParams.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "variableFeeParams")
		return
	}
	err = en.WriteUint32(z.activeBinID)
	if err != nil {
		err = msgp.WrapError(err, "activeBinID")
		return
	}
	err = en.WriteUint16(z.binStep)
	if err != nil {
		err = msgp.WrapError(err, "binStep")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.bins)))
	if err != nil {
		err = msgp.WrapError(err, "bins")
		return
	}
	for za0001 := range z.bins {
		err = z.bins[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "bins", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 7
	o = append(o, 0x97)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendUint64(o, z.blockTimestamp)
	o, err = z.staticFeeParams.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "staticFeeParams")
		return
	}
	o, err = z.variableFeeParams.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "variableFeeParams")
		return
	}
	o = msgp.AppendUint32(o, z.activeBinID)
	o = msgp.AppendUint16(o, z.binStep)
	o = msgp.AppendArrayHeader(o, uint32(len(z.bins)))
	for za0001 := range z.bins {
		o, err = z.bins[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "bins", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.blockTimestamp, bts, err = msgp.ReadUint64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "blockTimestamp")
		return
	}
	bts, err = z.staticFeeParams.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "staticFeeParams")
		return
	}
	bts, err = z.variableFeeParams.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "variableFeeParams")
		return
	}
	z.activeBinID, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "activeBinID")
		return
	}
	z.binStep, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "binStep")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "bins")
		return
	}
	if cap(z.bins) >= int(zb0002) {
		z.bins = (z.bins)[:zb0002]
	} else {
		z.bins = make([]Bin, zb0002)
	}
	for za0001 := range z.bins {
		bts, err = z.bins[za0001].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "bins", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.Uint64Size + z.staticFeeParams.Msgsize() + z.variableFeeParams.Msgsize() + msgp.Uint32Size + msgp.Uint16Size + msgp.ArrayHeaderSize
	for za0001 := range z.bins {
		s += z.bins[za0001].Msgsize()
	}
	return
}
