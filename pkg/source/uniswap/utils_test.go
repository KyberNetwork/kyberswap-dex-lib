package uniswap

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/assert"
)

func TestIsSyncEvent(t *testing.T) {
	tests := []struct {
		event  types.Log
		expect bool
	}{
		{
			event: types.Log{
				Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
				Topics: []common.Hash{
					common.HexToHash("0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1"),
				},
				Data: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x06, 0xe3, 0x44, 0x3f, 0xa8, 0x12, 0xce, 0x2b,
					0xc8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x65, 0xf4, 0xd2,
					0xb7, 0x4b, 0x08, 0xd8,
				},
				BlockNumber: 48301060,
				TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
				TxIndex:     0,
				BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
				Index:       0,
				Removed:     false,
			},
			expect: true,
		},
		{
			event: types.Log{
				Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
				Topics: []common.Hash{
					common.HexToHash("0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"),
					common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
					common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
				},
				Data: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01, 0x15, 0x8e, 0x46, 0x09, 0x13, 0xd0,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x18, 0x1a, 0x71, 0x06, 0x54, 0x72, 0x71,
				},
				BlockNumber: 48301060,
				TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
				TxIndex:     0,
				BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
				Index:       1,
				Removed:     false,
			},
			expect: false,
		},
	}

	for _, test := range tests {
		assert.Equal(t, test.expect, isSyncEvent(test.event))
	}
}

func TestDecodeSyncEvent(t *testing.T) {
	tests := []struct {
		event   types.Log
		expect  Reserves
		success bool
	}{
		{
			event: types.Log{
				Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
				Topics: []common.Hash{
					common.HexToHash("0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1"),
				},
				Data: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x06, 0xe3, 0x44, 0x3f, 0xa8, 0x12, 0xce, 0x2b,
					0xc8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x65, 0xf4, 0xd2,
					0xb7, 0x4b, 0x08, 0xd8,
				},
				BlockNumber: 48301060,
				TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
				TxIndex:     0,
				BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
				Index:       0,
				Removed:     false,
			},
			expect: Reserves{
				Reserve0: new(big.Int).SetBytes([]byte{0x06, 0xe3, 0x44, 0x3f, 0xa8, 0x12, 0xce, 0x2b, 0xc8, 0xff}),
				Reserve1: new(big.Int).SetBytes([]byte{0x99, 0x65, 0xf4, 0xd2, 0xb7, 0x4b, 0x08, 0xd8}),
			},
			success: true,
		},
		{
			event: types.Log{
				Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
				Topics: []common.Hash{
					common.HexToHash("0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"),
					common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
					common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
				},
				Data: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x01, 0x15, 0x8e, 0x46, 0x09, 0x13, 0xd0,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x18, 0x1a, 0x71, 0x06, 0x54, 0x72, 0x71,
				},
				BlockNumber: 48301060,
				TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
				TxIndex:     0,
				BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
				Index:       1,
				Removed:     false,
			},
			success: false,
		},
	}

	for _, test := range tests {
		reserves, err := decodeSyncEvent(test.event)
		if test.success {
			if assert.NoError(t, err) {
				assert.Equal(t, test.expect.Reserve0, reserves.Reserve0)
				assert.Equal(t, test.expect.Reserve1, reserves.Reserve1)
			}
		} else {
			assert.NotNil(t, err)
		}
	}
}

func TestFindLatestSyncEvent(t *testing.T) {
	tests := []struct {
		events []types.Log
		expect *types.Log
	}{
		{
			events: []types.Log{
				{
					Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
					Topics: []common.Hash{
						common.HexToHash("0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1"),
					},
					Data: []byte{
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x06, 0xe3, 0x44, 0x3f, 0xa8, 0x12, 0xce, 0x2b,
						0xc8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x65, 0xf4, 0xd2,
						0xb7, 0x4b, 0x08, 0xd8,
					},
					BlockNumber: 48301060,
					TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
					TxIndex:     0,
					BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
					Index:       0,
					Removed:     false,
				},
				{
					Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
					Topics: []common.Hash{
						common.HexToHash("0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"),
						common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
						common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
					},
					Data: []byte{
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x01, 0x15, 0x8e, 0x46, 0x09, 0x13, 0xd0,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x18, 0x1a, 0x71, 0x06, 0x54, 0x72, 0x71,
					},
					BlockNumber: 48301060,
					TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
					TxIndex:     0,
					BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
					Index:       1,
					Removed:     false,
				},
			},
			expect: &types.Log{
				Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
				Topics: []common.Hash{
					common.HexToHash("0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1"),
				},
				Data: []byte{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x06, 0xe3, 0x44, 0x3f, 0xa8, 0x12, 0xce, 0x2b,
					0xc8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x65, 0xf4, 0xd2,
					0xb7, 0x4b, 0x08, 0xd8,
				},
				BlockNumber: 48301060,
				TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
				TxIndex:     0,
				BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
				Index:       0,
				Removed:     false,
			},
		},
		{
			events: []types.Log{
				{
					Address: common.HexToAddress("0xC4e90AE0298E0e7BE0102Cce64089231e1E2D67C"),
					Topics: []common.Hash{
						common.HexToHash("0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822"),
						common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
						common.HexToHash("0x0000000000000000000000001aa298ae7c53d8dafa200ed49608649bfa76a446"),
					},
					Data: []byte{
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x01, 0x15, 0x8e, 0x46, 0x09, 0x13, 0xd0,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
						0x00, 0x18, 0x1a, 0x71, 0x06, 0x54, 0x72, 0x71,
					},
					BlockNumber: 48301060,
					TxHash:      common.HexToHash("0x569a3f5a884616deb9be40b336c13560d525193b998e0fa52aafd4077529a825"),
					TxIndex:     0,
					BlockHash:   common.HexToHash("0x6df5adbb361590d47513b9274b670626f0ba369797b527af6c88385b45b14e3a"),
					Index:       1,
					Removed:     false,
				},
			},
			expect: nil,
		},
	}

	for _, test := range tests {
		event := findLatestSyncEvent(test.events)
		assert.Equal(t, test.expect, event)
	}
}
