package algebrav1

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *GlobalState) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
		z.Price = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Tick")
			return
		}
		z.Tick = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Tick))
			if err != nil {
				err = msgp.WrapError(err, "Tick")
				return
			}
			z.Tick = msgpencode.DecodeInt(zb0003)
		}
	}
	z.FeeZto, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "FeeZto")
		return
	}
	z.FeeOtz, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "FeeOtz")
		return
	}
	z.TimepointIndex, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "TimepointIndex")
		return
	}
	z.CommunityFeeToken0, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "CommunityFeeToken0")
		return
	}
	z.CommunityFeeToken1, err = dc.ReadUint16()
	if err != nil {
		err = msgp.WrapError(err, "CommunityFeeToken1")
		return
	}
	z.Unlocked, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Unlocked")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GlobalState) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	if z.Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Price))
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
	}
	if z.Tick == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Tick))
		if err != nil {
			err = msgp.WrapError(err, "Tick")
			return
		}
	}
	err = en.WriteUint16(z.FeeZto)
	if err != nil {
		err = msgp.WrapError(err, "FeeZto")
		return
	}
	err = en.WriteUint16(z.FeeOtz)
	if err != nil {
		err = msgp.WrapError(err, "FeeOtz")
		return
	}
	err = en.WriteUint16(z.TimepointIndex)
	if err != nil {
		err = msgp.WrapError(err, "TimepointIndex")
		return
	}
	err = en.WriteUint16(z.CommunityFeeToken0)
	if err != nil {
		err = msgp.WrapError(err, "CommunityFeeToken0")
		return
	}
	err = en.WriteUint16(z.CommunityFeeToken1)
	if err != nil {
		err = msgp.WrapError(err, "CommunityFeeToken1")
		return
	}
	err = en.WriteBool(z.Unlocked)
	if err != nil {
		err = msgp.WrapError(err, "Unlocked")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GlobalState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	if z.Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Price))
	}
	if z.Tick == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Tick))
	}
	o = msgp.AppendUint16(o, z.FeeZto)
	o = msgp.AppendUint16(o, z.FeeOtz)
	o = msgp.AppendUint16(o, z.TimepointIndex)
	o = msgp.AppendUint16(o, z.CommunityFeeToken0)
	o = msgp.AppendUint16(o, z.CommunityFeeToken1)
	o = msgp.AppendBool(o, z.Unlocked)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GlobalState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Price = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Tick = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Tick))
			if err != nil {
				err = msgp.WrapError(err, "Tick")
				return
			}
			z.Tick = msgpencode.DecodeInt(zb0003)
		}
	}
	z.FeeZto, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FeeZto")
		return
	}
	z.FeeOtz, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FeeOtz")
		return
	}
	z.TimepointIndex, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TimepointIndex")
		return
	}
	z.CommunityFeeToken0, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "CommunityFeeToken0")
		return
	}
	z.CommunityFeeToken1, bts, err = msgp.ReadUint16Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "CommunityFeeToken1")
		return
	}
	z.Unlocked, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Unlocked")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GlobalState) Msgsize() (s int) {
	s = 1
	if z.Price == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Price))
	}
	if z.Tick == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Tick))
	}
	s += msgp.Uint16Size + msgp.Uint16Size + msgp.Uint16Size + msgp.Uint16Size + msgp.Uint16Size + msgp.BoolSize
	return
}
