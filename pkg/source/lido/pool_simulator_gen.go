package lido

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Wrap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Wrap")
		return
	}
	z.Unwrap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Unwrap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Wrap)
	if err != nil {
		err = msgp.WrapError(err, "Wrap")
		return
	}
	err = en.WriteInt64(z.Unwrap)
	if err != nil {
		err = msgp.WrapError(err, "Unwrap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt64(o, z.Wrap)
	o = msgp.AppendInt64(o, z.Unwrap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Wrap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Wrap")
		return
	}
	z.Unwrap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Unwrap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "StEthPerToken")
			return
		}
		z.StEthPerToken = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.StEthPerToken))
			if err != nil {
				err = msgp.WrapError(err, "StEthPerToken")
				return
			}
			z.StEthPerToken = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TokensPerStEth")
			return
		}
		z.TokensPerStEth = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.TokensPerStEth))
			if err != nil {
				err = msgp.WrapError(err, "TokensPerStEth")
				return
			}
			z.TokensPerStEth = msgpencode.DecodeInt(zb0003)
		}
	}
	z.LpToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0004 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0004}
		return
	}
	z.gas.Wrap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "gas", "Wrap")
		return
	}
	z.gas.Unwrap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "gas", "Unwrap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if z.StEthPerToken == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.StEthPerToken))
		if err != nil {
			err = msgp.WrapError(err, "StEthPerToken")
			return
		}
	}
	if z.TokensPerStEth == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TokensPerStEth))
		if err != nil {
			err = msgp.WrapError(err, "TokensPerStEth")
			return
		}
	}
	err = en.WriteString(z.LpToken)
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.gas.Wrap)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Wrap")
		return
	}
	err = en.WriteInt64(z.gas.Unwrap)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Unwrap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if z.StEthPerToken == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.StEthPerToken))
	}
	if z.TokensPerStEth == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TokensPerStEth))
	}
	o = msgp.AppendString(o, z.LpToken)
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendInt64(o, z.gas.Wrap)
	o = msgp.AppendInt64(o, z.gas.Unwrap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.StEthPerToken = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.StEthPerToken))
			if err != nil {
				err = msgp.WrapError(err, "StEthPerToken")
				return
			}
			z.StEthPerToken = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TokensPerStEth = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TokensPerStEth))
			if err != nil {
				err = msgp.WrapError(err, "TokensPerStEth")
				return
			}
			z.TokensPerStEth = msgpencode.DecodeInt(zb0003)
		}
	}
	z.LpToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0004 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0004}
		return
	}
	z.gas.Wrap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Wrap")
		return
	}
	z.gas.Unwrap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Unwrap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize()
	if z.StEthPerToken == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.StEthPerToken))
	}
	if z.TokensPerStEth == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TokensPerStEth))
	}
	s += msgp.StringPrefixSize + len(z.LpToken) + 1 + msgp.Int64Size + msgp.Int64Size
	return
}
