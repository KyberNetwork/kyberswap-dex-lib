// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go

// Package swapbasedperp is a generated GoMock package.
package swapbasedperp

import (
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIVaultReader is a mock of IVaultReader interface.
type MockIVaultReader struct {
	ctrl     *gomock.Controller
	recorder *MockIVaultReaderMockRecorder
}

// MockIVaultReaderMockRecorder is the mock recorder for MockIVaultReader.
type MockIVaultReaderMockRecorder struct {
	mock *MockIVaultReader
}

// NewMockIVaultReader creates a new mock instance.
func NewMockIVaultReader(ctrl *gomock.Controller) *MockIVaultReader {
	mock := &MockIVaultReader{ctrl: ctrl}
	mock.recorder = &MockIVaultReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVaultReader) EXPECT() *MockIVaultReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIVaultReader) Read(ctx context.Context, address string) (*Vault, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address)
	ret0, _ := ret[0].(*Vault)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIVaultReaderMockRecorder) Read(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIVaultReader)(nil).Read), ctx, address)
}

// MockIVaultPriceFeedReader is a mock of IVaultPriceFeedReader interface.
type MockIVaultPriceFeedReader struct {
	ctrl     *gomock.Controller
	recorder *MockIVaultPriceFeedReaderMockRecorder
}

// MockIVaultPriceFeedReaderMockRecorder is the mock recorder for MockIVaultPriceFeedReader.
type MockIVaultPriceFeedReaderMockRecorder struct {
	mock *MockIVaultPriceFeedReader
}

// NewMockIVaultPriceFeedReader creates a new mock instance.
func NewMockIVaultPriceFeedReader(ctrl *gomock.Controller) *MockIVaultPriceFeedReader {
	mock := &MockIVaultPriceFeedReader{ctrl: ctrl}
	mock.recorder = &MockIVaultPriceFeedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIVaultPriceFeedReader) EXPECT() *MockIVaultPriceFeedReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIVaultPriceFeedReader) Read(ctx context.Context, address string, tokens []string) (*VaultPriceFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address, tokens)
	ret0, _ := ret[0].(*VaultPriceFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIVaultPriceFeedReaderMockRecorder) Read(ctx, address, tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIVaultPriceFeedReader)(nil).Read), ctx, address, tokens)
}

// MockIFastPriceFeedV1Reader is a mock of IFastPriceFeedV1Reader interface.
type MockIFastPriceFeedV1Reader struct {
	ctrl     *gomock.Controller
	recorder *MockIFastPriceFeedV1ReaderMockRecorder
}

// MockIFastPriceFeedV1ReaderMockRecorder is the mock recorder for MockIFastPriceFeedV1Reader.
type MockIFastPriceFeedV1ReaderMockRecorder struct {
	mock *MockIFastPriceFeedV1Reader
}

// NewMockIFastPriceFeedV1Reader creates a new mock instance.
func NewMockIFastPriceFeedV1Reader(ctrl *gomock.Controller) *MockIFastPriceFeedV1Reader {
	mock := &MockIFastPriceFeedV1Reader{ctrl: ctrl}
	mock.recorder = &MockIFastPriceFeedV1ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFastPriceFeedV1Reader) EXPECT() *MockIFastPriceFeedV1ReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIFastPriceFeedV1Reader) Read(ctx context.Context, address string, tokens []string) (*FastPriceFeedV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address, tokens)
	ret0, _ := ret[0].(*FastPriceFeedV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIFastPriceFeedV1ReaderMockRecorder) Read(ctx, address, tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIFastPriceFeedV1Reader)(nil).Read), ctx, address, tokens)
}

// MockIFastPriceFeedV2Reader is a mock of IFastPriceFeedV2Reader interface.
type MockIFastPriceFeedV2Reader struct {
	ctrl     *gomock.Controller
	recorder *MockIFastPriceFeedV2ReaderMockRecorder
}

// MockIFastPriceFeedV2ReaderMockRecorder is the mock recorder for MockIFastPriceFeedV2Reader.
type MockIFastPriceFeedV2ReaderMockRecorder struct {
	mock *MockIFastPriceFeedV2Reader
}

// NewMockIFastPriceFeedV2Reader creates a new mock instance.
func NewMockIFastPriceFeedV2Reader(ctrl *gomock.Controller) *MockIFastPriceFeedV2Reader {
	mock := &MockIFastPriceFeedV2Reader{ctrl: ctrl}
	mock.recorder = &MockIFastPriceFeedV2ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFastPriceFeedV2Reader) EXPECT() *MockIFastPriceFeedV2ReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIFastPriceFeedV2Reader) Read(ctx context.Context, address string, tokens []string) (*FastPriceFeedV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address, tokens)
	ret0, _ := ret[0].(*FastPriceFeedV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIFastPriceFeedV2ReaderMockRecorder) Read(ctx, address, tokens interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIFastPriceFeedV2Reader)(nil).Read), ctx, address, tokens)
}

// MockIPriceFeedReader is a mock of IPriceFeedReader interface.
type MockIPriceFeedReader struct {
	ctrl     *gomock.Controller
	recorder *MockIPriceFeedReaderMockRecorder
}

// MockIPriceFeedReaderMockRecorder is the mock recorder for MockIPriceFeedReader.
type MockIPriceFeedReaderMockRecorder struct {
	mock *MockIPriceFeedReader
}

// NewMockIPriceFeedReader creates a new mock instance.
func NewMockIPriceFeedReader(ctrl *gomock.Controller) *MockIPriceFeedReader {
	mock := &MockIPriceFeedReader{ctrl: ctrl}
	mock.recorder = &MockIPriceFeedReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPriceFeedReader) EXPECT() *MockIPriceFeedReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIPriceFeedReader) Read(ctx context.Context, address string, roundCount int) (*PriceFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address, roundCount)
	ret0, _ := ret[0].(*PriceFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIPriceFeedReaderMockRecorder) Read(ctx, address, roundCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIPriceFeedReader)(nil).Read), ctx, address, roundCount)
}

// MockIUSDBReader is a mock of IUSDBReader interface.
type MockIUSDBReader struct {
	ctrl     *gomock.Controller
	recorder *MockIUSDBReaderMockRecorder
}

// MockIUSDBReaderMockRecorder is the mock recorder for MockIUSDBReader.
type MockIUSDBReaderMockRecorder struct {
	mock *MockIUSDBReader
}

// NewMockIUSDBReader creates a new mock instance.
func NewMockIUSDBReader(ctrl *gomock.Controller) *MockIUSDBReader {
	mock := &MockIUSDBReader{ctrl: ctrl}
	mock.recorder = &MockIUSDBReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUSDBReader) EXPECT() *MockIUSDBReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIUSDBReader) Read(ctx context.Context, address string) (*USDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address)
	ret0, _ := ret[0].(*USDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIUSDBReaderMockRecorder) Read(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIUSDBReader)(nil).Read), ctx, address)
}

// MockIChainlinkFlagsReader is a mock of IChainlinkFlagsReader interface.
type MockIChainlinkFlagsReader struct {
	ctrl     *gomock.Controller
	recorder *MockIChainlinkFlagsReaderMockRecorder
}

// MockIChainlinkFlagsReaderMockRecorder is the mock recorder for MockIChainlinkFlagsReader.
type MockIChainlinkFlagsReaderMockRecorder struct {
	mock *MockIChainlinkFlagsReader
}

// NewMockIChainlinkFlagsReader creates a new mock instance.
func NewMockIChainlinkFlagsReader(ctrl *gomock.Controller) *MockIChainlinkFlagsReader {
	mock := &MockIChainlinkFlagsReader{ctrl: ctrl}
	mock.recorder = &MockIChainlinkFlagsReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIChainlinkFlagsReader) EXPECT() *MockIChainlinkFlagsReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIChainlinkFlagsReader) Read(ctx context.Context, address string) (*ChainlinkFlags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address)
	ret0, _ := ret[0].(*ChainlinkFlags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIChainlinkFlagsReaderMockRecorder) Read(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIChainlinkFlagsReader)(nil).Read), ctx, address)
}

// MockIPancakePairReader is a mock of IPancakePairReader interface.
type MockIPancakePairReader struct {
	ctrl     *gomock.Controller
	recorder *MockIPancakePairReaderMockRecorder
}

// MockIPancakePairReaderMockRecorder is the mock recorder for MockIPancakePairReader.
type MockIPancakePairReaderMockRecorder struct {
	mock *MockIPancakePairReader
}

// NewMockIPancakePairReader creates a new mock instance.
func NewMockIPancakePairReader(ctrl *gomock.Controller) *MockIPancakePairReader {
	mock := &MockIPancakePairReader{ctrl: ctrl}
	mock.recorder = &MockIPancakePairReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPancakePairReader) EXPECT() *MockIPancakePairReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIPancakePairReader) Read(ctx context.Context, address string) (*PancakePair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, address)
	ret0, _ := ret[0].(*PancakePair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIPancakePairReaderMockRecorder) Read(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIPancakePairReader)(nil).Read), ctx, address)
}

// MockIFastPriceFeed is a mock of IFastPriceFeed interface.
type MockIFastPriceFeed struct {
	ctrl     *gomock.Controller
	recorder *MockIFastPriceFeedMockRecorder
}

// MockIFastPriceFeedMockRecorder is the mock recorder for MockIFastPriceFeed.
type MockIFastPriceFeedMockRecorder struct {
	mock *MockIFastPriceFeed
}

// NewMockIFastPriceFeed creates a new mock instance.
func NewMockIFastPriceFeed(ctrl *gomock.Controller) *MockIFastPriceFeed {
	mock := &MockIFastPriceFeed{ctrl: ctrl}
	mock.recorder = &MockIFastPriceFeedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFastPriceFeed) EXPECT() *MockIFastPriceFeedMockRecorder {
	return m.recorder
}

// GetPrice mocks base method.
func (m *MockIFastPriceFeed) GetPrice(token string, refPrice *big.Int, maximise bool) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrice", token, refPrice, maximise)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetPrice indicates an expected call of GetPrice.
func (mr *MockIFastPriceFeedMockRecorder) GetPrice(token, refPrice, maximise interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrice", reflect.TypeOf((*MockIFastPriceFeed)(nil).GetPrice), token, refPrice, maximise)
}

// GetVersion mocks base method.
func (m *MockIFastPriceFeed) GetVersion() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockIFastPriceFeedMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockIFastPriceFeed)(nil).GetVersion))
}
