package balancerweighted

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"math/big"

	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *WeightedPool2Tokens) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pool":
			err = z.Pool.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Pool")
				return
			}
		case "VaultAddress":
			z.VaultAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "VaultAddress")
				return
			}
		case "PoolId":
			z.PoolId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PoolId")
				return
			}
		case "Decimals":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Decimals")
				return
			}
			if cap(z.Decimals) >= int(zb0002) {
				z.Decimals = (z.Decimals)[:zb0002]
			} else {
				z.Decimals = make([]uint, zb0002)
			}
			for za0001 := range z.Decimals {
				z.Decimals[za0001], err = dc.ReadUint()
				if err != nil {
					err = msgp.WrapError(err, "Decimals", za0001)
					return
				}
			}
		case "Weights":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Weights")
				return
			}
			if cap(z.Weights) >= int(zb0003) {
				z.Weights = (z.Weights)[:zb0003]
			} else {
				z.Weights = make([]*big.Int, zb0003)
			}
			for za0002 := range z.Weights {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Weights", za0002)
						return
					}
					z.Weights[za0002] = nil
				} else {
					{
						var zb0004 []byte
						zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.Weights[za0002]))
						if err != nil {
							err = msgp.WrapError(err, "Weights", za0002)
							return
						}
						z.Weights[za0002] = msgpencode.DecodeInt(zb0004)
					}
				}
			}
		case "gas":
			err = z.gas.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "gas")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WeightedPool2Tokens) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Pool"
	err = en.Append(0x86, 0xa4, 0x50, 0x6f, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	// write "VaultAddress"
	err = en.Append(0xac, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.VaultAddress)
	if err != nil {
		err = msgp.WrapError(err, "VaultAddress")
		return
	}
	// write "PoolId"
	err = en.Append(0xa6, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.PoolId)
	if err != nil {
		err = msgp.WrapError(err, "PoolId")
		return
	}
	// write "Decimals"
	err = en.Append(0xa8, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Decimals)))
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	for za0001 := range z.Decimals {
		err = en.WriteUint(z.Decimals[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Decimals", za0001)
			return
		}
	}
	// write "Weights"
	err = en.Append(0xa7, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Weights)))
	if err != nil {
		err = msgp.WrapError(err, "Weights")
		return
	}
	for za0002 := range z.Weights {
		if z.Weights[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeInt(z.Weights[za0002]))
			if err != nil {
				err = msgp.WrapError(err, "Weights", za0002)
				return
			}
		}
	}
	// write "gas"
	err = en.Append(0xa3, 0x67, 0x61, 0x73)
	if err != nil {
		return
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WeightedPool2Tokens) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Pool"
	o = append(o, 0x86, 0xa4, 0x50, 0x6f, 0x6f, 0x6c)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	// string "VaultAddress"
	o = append(o, 0xac, 0x56, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.VaultAddress)
	// string "PoolId"
	o = append(o, 0xa6, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x64)
	o = msgp.AppendString(o, z.PoolId)
	// string "Decimals"
	o = append(o, 0xa8, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Decimals)))
	for za0001 := range z.Decimals {
		o = msgp.AppendUint(o, z.Decimals[za0001])
	}
	// string "Weights"
	o = append(o, 0xa7, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Weights)))
	for za0002 := range z.Weights {
		if z.Weights[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Weights[za0002]))
		}
	}
	// string "gas"
	o = append(o, 0xa3, 0x67, 0x61, 0x73)
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WeightedPool2Tokens) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Pool":
			bts, err = z.Pool.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pool")
				return
			}
		case "VaultAddress":
			z.VaultAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VaultAddress")
				return
			}
		case "PoolId":
			z.PoolId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PoolId")
				return
			}
		case "Decimals":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Decimals")
				return
			}
			if cap(z.Decimals) >= int(zb0002) {
				z.Decimals = (z.Decimals)[:zb0002]
			} else {
				z.Decimals = make([]uint, zb0002)
			}
			for za0001 := range z.Decimals {
				z.Decimals[za0001], bts, err = msgp.ReadUintBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Decimals", za0001)
					return
				}
			}
		case "Weights":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Weights")
				return
			}
			if cap(z.Weights) >= int(zb0003) {
				z.Weights = (z.Weights)[:zb0003]
			} else {
				z.Weights = make([]*big.Int, zb0003)
			}
			for za0002 := range z.Weights {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Weights[za0002] = nil
				} else {
					{
						var zb0004 []byte
						zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Weights[za0002]))
						if err != nil {
							err = msgp.WrapError(err, "Weights", za0002)
							return
						}
						z.Weights[za0002] = msgpencode.DecodeInt(zb0004)
					}
				}
			}
		case "gas":
			bts, err = z.gas.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "gas")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WeightedPool2Tokens) Msgsize() (s int) {
	s = 1 + 5 + z.Pool.Msgsize() + 13 + msgp.StringPrefixSize + len(z.VaultAddress) + 7 + msgp.StringPrefixSize + len(z.PoolId) + 9 + msgp.ArrayHeaderSize + (len(z.Decimals) * (msgp.UintSize)) + 8 + msgp.ArrayHeaderSize
	for za0002 := range z.Weights {
		if z.Weights[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Weights[za0002]))
		}
	}
	s += 4 + z.gas.Msgsize()
	return
}
