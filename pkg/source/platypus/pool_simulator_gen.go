package platypus

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/valueobject"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 11 {
		err = msgp.ArrayError{Wanted: 11, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "C1")
			return
		}
		z.C1 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.C1))
			if err != nil {
				err = msgp.WrapError(err, "C1")
				return
			}
			z.C1 = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "RetentionRatio")
			return
		}
		z.RetentionRatio = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.RetentionRatio))
			if err != nil {
				err = msgp.WrapError(err, "RetentionRatio")
				return
			}
			z.RetentionRatio = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SlippageParamK")
			return
		}
		z.SlippageParamK = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.SlippageParamK))
			if err != nil {
				err = msgp.WrapError(err, "SlippageParamK")
				return
			}
			z.SlippageParamK = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SlippageParamN")
			return
		}
		z.SlippageParamN = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.SlippageParamN))
			if err != nil {
				err = msgp.WrapError(err, "SlippageParamN")
				return
			}
			z.SlippageParamN = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "XThreshold")
			return
		}
		z.XThreshold = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.XThreshold))
			if err != nil {
				err = msgp.WrapError(err, "XThreshold")
				return
			}
			z.XThreshold = msgpencode.DecodeInt(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "HaircutRate")
			return
		}
		z.HaircutRate = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.HaircutRate))
			if err != nil {
				err = msgp.WrapError(err, "HaircutRate")
				return
			}
			z.HaircutRate = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SAvaxRate")
			return
		}
		z.SAvaxRate = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.SAvaxRate))
			if err != nil {
				err = msgp.WrapError(err, "SAvaxRate")
				return
			}
			z.SAvaxRate = msgpencode.DecodeInt(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "AssetByToken")
		return
	}
	if z.AssetByToken == nil {
		z.AssetByToken = make(map[string]Asset, zb0009)
	} else if len(z.AssetByToken) > 0 {
		for key := range z.AssetByToken {
			delete(z.AssetByToken, key)
		}
	}
	var field []byte
	_ = field
	for zb0009 > 0 {
		zb0009--
		var za0001 string
		var za0002 Asset
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken")
			return
		}
		err = za0002.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken", za0001)
			return
		}
		z.AssetByToken[za0001] = za0002
	}
	{
		var zb0010 uint
		zb0010, err = dc.ReadUint()
		if err != nil {
			err = msgp.WrapError(err, "ChainID")
			return
		}
		z.ChainID = valueobject.ChainID(zb0010)
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 11
	err = en.Append(0x9b)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if z.C1 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.C1))
		if err != nil {
			err = msgp.WrapError(err, "C1")
			return
		}
	}
	if z.RetentionRatio == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.RetentionRatio))
		if err != nil {
			err = msgp.WrapError(err, "RetentionRatio")
			return
		}
	}
	if z.SlippageParamK == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SlippageParamK))
		if err != nil {
			err = msgp.WrapError(err, "SlippageParamK")
			return
		}
	}
	if z.SlippageParamN == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SlippageParamN))
		if err != nil {
			err = msgp.WrapError(err, "SlippageParamN")
			return
		}
	}
	if z.XThreshold == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.XThreshold))
		if err != nil {
			err = msgp.WrapError(err, "XThreshold")
			return
		}
	}
	if z.HaircutRate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.HaircutRate))
		if err != nil {
			err = msgp.WrapError(err, "HaircutRate")
			return
		}
	}
	if z.SAvaxRate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SAvaxRate))
		if err != nil {
			err = msgp.WrapError(err, "SAvaxRate")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.AssetByToken)))
	if err != nil {
		err = msgp.WrapError(err, "AssetByToken")
		return
	}
	for za0001, za0002 := range z.AssetByToken {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken", za0001)
			return
		}
	}
	err = en.WriteUint(uint(z.ChainID))
	if err != nil {
		err = msgp.WrapError(err, "ChainID")
		return
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 11
	o = append(o, 0x9b)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if z.C1 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.C1))
	}
	if z.RetentionRatio == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.RetentionRatio))
	}
	if z.SlippageParamK == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SlippageParamK))
	}
	if z.SlippageParamN == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SlippageParamN))
	}
	if z.XThreshold == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.XThreshold))
	}
	if z.HaircutRate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.HaircutRate))
	}
	if z.SAvaxRate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SAvaxRate))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.AssetByToken)))
	for za0001, za0002 := range z.AssetByToken {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken", za0001)
			return
		}
	}
	o = msgp.AppendUint(o, uint(z.ChainID))
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 11 {
		err = msgp.ArrayError{Wanted: 11, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.C1 = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.C1))
			if err != nil {
				err = msgp.WrapError(err, "C1")
				return
			}
			z.C1 = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.RetentionRatio = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.RetentionRatio))
			if err != nil {
				err = msgp.WrapError(err, "RetentionRatio")
				return
			}
			z.RetentionRatio = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SlippageParamK = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SlippageParamK))
			if err != nil {
				err = msgp.WrapError(err, "SlippageParamK")
				return
			}
			z.SlippageParamK = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SlippageParamN = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SlippageParamN))
			if err != nil {
				err = msgp.WrapError(err, "SlippageParamN")
				return
			}
			z.SlippageParamN = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.XThreshold = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.XThreshold))
			if err != nil {
				err = msgp.WrapError(err, "XThreshold")
				return
			}
			z.XThreshold = msgpencode.DecodeInt(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.HaircutRate = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.HaircutRate))
			if err != nil {
				err = msgp.WrapError(err, "HaircutRate")
				return
			}
			z.HaircutRate = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SAvaxRate = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SAvaxRate))
			if err != nil {
				err = msgp.WrapError(err, "SAvaxRate")
				return
			}
			z.SAvaxRate = msgpencode.DecodeInt(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "AssetByToken")
		return
	}
	if z.AssetByToken == nil {
		z.AssetByToken = make(map[string]Asset, zb0009)
	} else if len(z.AssetByToken) > 0 {
		for key := range z.AssetByToken {
			delete(z.AssetByToken, key)
		}
	}
	var field []byte
	_ = field
	for zb0009 > 0 {
		var za0001 string
		var za0002 Asset
		zb0009--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken")
			return
		}
		bts, err = za0002.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "AssetByToken", za0001)
			return
		}
		z.AssetByToken[za0001] = za0002
	}
	{
		var zb0010 uint
		zb0010, bts, err = msgp.ReadUintBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ChainID")
			return
		}
		z.ChainID = valueobject.ChainID(zb0010)
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize()
	if z.C1 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.C1))
	}
	if z.RetentionRatio == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.RetentionRatio))
	}
	if z.SlippageParamK == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SlippageParamK))
	}
	if z.SlippageParamN == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SlippageParamN))
	}
	if z.XThreshold == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.XThreshold))
	}
	if z.HaircutRate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.HaircutRate))
	}
	if z.SAvaxRate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SAvaxRate))
	}
	s += msgp.MapHeaderSize
	if z.AssetByToken != nil {
		for za0001, za0002 := range z.AssetByToken {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += msgp.UintSize + z.gas.Msgsize()
	return
}
