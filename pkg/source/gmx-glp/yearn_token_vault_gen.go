package gmxglp

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *YearnStrategy) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TotalDebt")
			return
		}
		z.TotalDebt = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.TotalDebt))
			if err != nil {
				err = msgp.WrapError(err, "TotalDebt")
				return
			}
			z.TotalDebt = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "EstimatedTotalAssets")
			return
		}
		z.EstimatedTotalAssets = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.EstimatedTotalAssets))
			if err != nil {
				err = msgp.WrapError(err, "EstimatedTotalAssets")
				return
			}
			z.EstimatedTotalAssets = msgpencode.DecodeInt(zb0003)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *YearnStrategy) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	if z.TotalDebt == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TotalDebt))
		if err != nil {
			err = msgp.WrapError(err, "TotalDebt")
			return
		}
	}
	if z.EstimatedTotalAssets == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.EstimatedTotalAssets))
		if err != nil {
			err = msgp.WrapError(err, "EstimatedTotalAssets")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *YearnStrategy) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	if z.TotalDebt == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TotalDebt))
	}
	if z.EstimatedTotalAssets == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.EstimatedTotalAssets))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *YearnStrategy) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TotalDebt = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TotalDebt))
			if err != nil {
				err = msgp.WrapError(err, "TotalDebt")
				return
			}
			z.TotalDebt = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.EstimatedTotalAssets = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.EstimatedTotalAssets))
			if err != nil {
				err = msgp.WrapError(err, "EstimatedTotalAssets")
				return
			}
			z.EstimatedTotalAssets = msgpencode.DecodeInt(zb0003)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *YearnStrategy) Msgsize() (s int) {
	s = 1
	if z.TotalDebt == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TotalDebt))
	}
	if z.EstimatedTotalAssets == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.EstimatedTotalAssets))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *YearnTokenVault) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	z.Address, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TotalSupply")
			return
		}
		z.TotalSupply = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.TotalSupply))
			if err != nil {
				err = msgp.WrapError(err, "TotalSupply")
				return
			}
			z.TotalSupply = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TotalAsset")
			return
		}
		z.TotalAsset = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.TotalAsset))
			if err != nil {
				err = msgp.WrapError(err, "TotalAsset")
				return
			}
			z.TotalAsset = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LastReport")
			return
		}
		z.LastReport = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.LastReport))
			if err != nil {
				err = msgp.WrapError(err, "LastReport")
				return
			}
			z.LastReport = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LockedProfitDegradation")
			return
		}
		z.LockedProfitDegradation = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.LockedProfitDegradation))
			if err != nil {
				err = msgp.WrapError(err, "LockedProfitDegradation")
				return
			}
			z.LockedProfitDegradation = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LockedProfit")
			return
		}
		z.LockedProfit = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.LockedProfit))
			if err != nil {
				err = msgp.WrapError(err, "LockedProfit")
				return
			}
			z.LockedProfit = msgpencode.DecodeInt(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "DepositLimit")
			return
		}
		z.DepositLimit = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.DepositLimit))
			if err != nil {
				err = msgp.WrapError(err, "DepositLimit")
				return
			}
			z.DepositLimit = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TotalIdle")
			return
		}
		z.TotalIdle = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.TotalIdle))
			if err != nil {
				err = msgp.WrapError(err, "TotalIdle")
				return
			}
			z.TotalIdle = msgpencode.DecodeInt(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "YearnStrategyMap")
		return
	}
	if z.YearnStrategyMap == nil {
		z.YearnStrategyMap = make(map[string]*YearnStrategy, zb0009)
	} else if len(z.YearnStrategyMap) > 0 {
		for key := range z.YearnStrategyMap {
			delete(z.YearnStrategyMap, key)
		}
	}
	var field []byte
	_ = field
	for zb0009 > 0 {
		zb0009--
		var za0001 string
		var za0002 *YearnStrategy
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "YearnStrategyMap")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "YearnStrategyMap", za0001)
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(YearnStrategy)
			}
			err = za0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "YearnStrategyMap", za0001)
				return
			}
		}
		z.YearnStrategyMap[za0001] = za0002
	}
	var zb0010 uint32
	zb0010, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "WithdrawalQueue")
		return
	}
	if cap(z.WithdrawalQueue) >= int(zb0010) {
		z.WithdrawalQueue = (z.WithdrawalQueue)[:zb0010]
	} else {
		z.WithdrawalQueue = make([]string, zb0010)
	}
	for za0003 := range z.WithdrawalQueue {
		z.WithdrawalQueue[za0003], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "WithdrawalQueue", za0003)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *YearnTokenVault) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 10
	err = en.Append(0x9a)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	if z.TotalSupply == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TotalSupply))
		if err != nil {
			err = msgp.WrapError(err, "TotalSupply")
			return
		}
	}
	if z.TotalAsset == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TotalAsset))
		if err != nil {
			err = msgp.WrapError(err, "TotalAsset")
			return
		}
	}
	if z.LastReport == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LastReport))
		if err != nil {
			err = msgp.WrapError(err, "LastReport")
			return
		}
	}
	if z.LockedProfitDegradation == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LockedProfitDegradation))
		if err != nil {
			err = msgp.WrapError(err, "LockedProfitDegradation")
			return
		}
	}
	if z.LockedProfit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LockedProfit))
		if err != nil {
			err = msgp.WrapError(err, "LockedProfit")
			return
		}
	}
	if z.DepositLimit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.DepositLimit))
		if err != nil {
			err = msgp.WrapError(err, "DepositLimit")
			return
		}
	}
	if z.TotalIdle == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TotalIdle))
		if err != nil {
			err = msgp.WrapError(err, "TotalIdle")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.YearnStrategyMap)))
	if err != nil {
		err = msgp.WrapError(err, "YearnStrategyMap")
		return
	}
	for za0001, za0002 := range z.YearnStrategyMap {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "YearnStrategyMap")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "YearnStrategyMap", za0001)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.WithdrawalQueue)))
	if err != nil {
		err = msgp.WrapError(err, "WithdrawalQueue")
		return
	}
	for za0003 := range z.WithdrawalQueue {
		err = en.WriteString(z.WithdrawalQueue[za0003])
		if err != nil {
			err = msgp.WrapError(err, "WithdrawalQueue", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *YearnTokenVault) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 10
	o = append(o, 0x9a)
	o = msgp.AppendString(o, z.Address)
	if z.TotalSupply == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TotalSupply))
	}
	if z.TotalAsset == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TotalAsset))
	}
	if z.LastReport == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LastReport))
	}
	if z.LockedProfitDegradation == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LockedProfitDegradation))
	}
	if z.LockedProfit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LockedProfit))
	}
	if z.DepositLimit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.DepositLimit))
	}
	if z.TotalIdle == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TotalIdle))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.YearnStrategyMap)))
	for za0001, za0002 := range z.YearnStrategyMap {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "YearnStrategyMap", za0001)
				return
			}
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.WithdrawalQueue)))
	for za0003 := range z.WithdrawalQueue {
		o = msgp.AppendString(o, z.WithdrawalQueue[za0003])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *YearnTokenVault) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 10 {
		err = msgp.ArrayError{Wanted: 10, Got: zb0001}
		return
	}
	z.Address, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TotalSupply = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TotalSupply))
			if err != nil {
				err = msgp.WrapError(err, "TotalSupply")
				return
			}
			z.TotalSupply = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TotalAsset = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TotalAsset))
			if err != nil {
				err = msgp.WrapError(err, "TotalAsset")
				return
			}
			z.TotalAsset = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LastReport = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LastReport))
			if err != nil {
				err = msgp.WrapError(err, "LastReport")
				return
			}
			z.LastReport = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LockedProfitDegradation = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LockedProfitDegradation))
			if err != nil {
				err = msgp.WrapError(err, "LockedProfitDegradation")
				return
			}
			z.LockedProfitDegradation = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LockedProfit = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LockedProfit))
			if err != nil {
				err = msgp.WrapError(err, "LockedProfit")
				return
			}
			z.LockedProfit = msgpencode.DecodeInt(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.DepositLimit = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.DepositLimit))
			if err != nil {
				err = msgp.WrapError(err, "DepositLimit")
				return
			}
			z.DepositLimit = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TotalIdle = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TotalIdle))
			if err != nil {
				err = msgp.WrapError(err, "TotalIdle")
				return
			}
			z.TotalIdle = msgpencode.DecodeInt(zb0008)
		}
	}
	var zb0009 uint32
	zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "YearnStrategyMap")
		return
	}
	if z.YearnStrategyMap == nil {
		z.YearnStrategyMap = make(map[string]*YearnStrategy, zb0009)
	} else if len(z.YearnStrategyMap) > 0 {
		for key := range z.YearnStrategyMap {
			delete(z.YearnStrategyMap, key)
		}
	}
	var field []byte
	_ = field
	for zb0009 > 0 {
		var za0001 string
		var za0002 *YearnStrategy
		zb0009--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "YearnStrategyMap")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(YearnStrategy)
			}
			bts, err = za0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "YearnStrategyMap", za0001)
				return
			}
		}
		z.YearnStrategyMap[za0001] = za0002
	}
	var zb0010 uint32
	zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "WithdrawalQueue")
		return
	}
	if cap(z.WithdrawalQueue) >= int(zb0010) {
		z.WithdrawalQueue = (z.WithdrawalQueue)[:zb0010]
	} else {
		z.WithdrawalQueue = make([]string, zb0010)
	}
	for za0003 := range z.WithdrawalQueue {
		z.WithdrawalQueue[za0003], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "WithdrawalQueue", za0003)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *YearnTokenVault) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Address)
	if z.TotalSupply == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TotalSupply))
	}
	if z.TotalAsset == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TotalAsset))
	}
	if z.LastReport == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LastReport))
	}
	if z.LockedProfitDegradation == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LockedProfitDegradation))
	}
	if z.LockedProfit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LockedProfit))
	}
	if z.DepositLimit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.DepositLimit))
	}
	if z.TotalIdle == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TotalIdle))
	}
	s += msgp.MapHeaderSize
	if z.YearnStrategyMap != nil {
		for za0001, za0002 := range z.YearnStrategyMap {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += msgp.ArrayHeaderSize
	for za0003 := range z.WithdrawalQueue {
		s += msgp.StringPrefixSize + len(z.WithdrawalQueue[za0003])
	}
	return
}
