// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/gmx (interfaces: IFastPriceFeedV1Reader)

// package gmxglp is a generated GoMock package.
package gmxglp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFastPriceFeedV1Reader is a mock of IFastPriceFeedV1Reader interface.
type MockIFastPriceFeedV1Reader struct {
	ctrl     *gomock.Controller
	recorder *MockIFastPriceFeedV1ReaderMockRecorder
}

// MockIFastPriceFeedV1ReaderMockRecorder is the mock recorder for MockIFastPriceFeedV1Reader.
type MockIFastPriceFeedV1ReaderMockRecorder struct {
	mock *MockIFastPriceFeedV1Reader
}

// NewMockIFastPriceFeedV1Reader creates a new mock instance.
func NewMockIFastPriceFeedV1Reader(ctrl *gomock.Controller) *MockIFastPriceFeedV1Reader {
	mock := &MockIFastPriceFeedV1Reader{ctrl: ctrl}
	mock.recorder = &MockIFastPriceFeedV1ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFastPriceFeedV1Reader) EXPECT() *MockIFastPriceFeedV1ReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIFastPriceFeedV1Reader) Read(arg0 context.Context, arg1 string, arg2 []string) (*FastPriceFeedV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(*FastPriceFeedV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIFastPriceFeedV1ReaderMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIFastPriceFeedV1Reader)(nil).Read), arg0, arg1, arg2)
}
