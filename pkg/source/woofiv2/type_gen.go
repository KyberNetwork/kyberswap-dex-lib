package woofiv2

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Swap)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OracleState) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
		z.Price = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Spread")
			return
		}
		z.Spread = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Spread))
			if err != nil {
				err = msgp.WrapError(err, "Spread")
				return
			}
			z.Spread = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Coeff")
			return
		}
		z.Coeff = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.Coeff))
			if err != nil {
				err = msgp.WrapError(err, "Coeff")
				return
			}
			z.Coeff = msgpencode.DecodeInt(zb0004)
		}
	}
	z.WoFeasible, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "WoFeasible")
		return
	}
	z.Decimals, err = dc.ReadUint8()
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "CloPrice")
			return
		}
		z.CloPrice = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.CloPrice))
			if err != nil {
				err = msgp.WrapError(err, "CloPrice")
				return
			}
			z.CloPrice = msgpencode.DecodeInt(zb0005)
		}
	}
	z.CloPreferred, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "CloPreferred")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OracleState) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 7
	err = en.Append(0x97)
	if err != nil {
		return
	}
	if z.Price == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Price))
		if err != nil {
			err = msgp.WrapError(err, "Price")
			return
		}
	}
	if z.Spread == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Spread))
		if err != nil {
			err = msgp.WrapError(err, "Spread")
			return
		}
	}
	if z.Coeff == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Coeff))
		if err != nil {
			err = msgp.WrapError(err, "Coeff")
			return
		}
	}
	err = en.WriteBool(z.WoFeasible)
	if err != nil {
		err = msgp.WrapError(err, "WoFeasible")
		return
	}
	err = en.WriteUint8(z.Decimals)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if z.CloPrice == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.CloPrice))
		if err != nil {
			err = msgp.WrapError(err, "CloPrice")
			return
		}
	}
	err = en.WriteBool(z.CloPreferred)
	if err != nil {
		err = msgp.WrapError(err, "CloPreferred")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OracleState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 7
	o = append(o, 0x97)
	if z.Price == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Price))
	}
	if z.Spread == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Spread))
	}
	if z.Coeff == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Coeff))
	}
	o = msgp.AppendBool(o, z.WoFeasible)
	o = msgp.AppendUint8(o, z.Decimals)
	if z.CloPrice == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.CloPrice))
	}
	o = msgp.AppendBool(o, z.CloPreferred)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OracleState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 7 {
		err = msgp.ArrayError{Wanted: 7, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Price = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Price))
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
			z.Price = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Spread = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Spread))
			if err != nil {
				err = msgp.WrapError(err, "Spread")
				return
			}
			z.Spread = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Coeff = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Coeff))
			if err != nil {
				err = msgp.WrapError(err, "Coeff")
				return
			}
			z.Coeff = msgpencode.DecodeInt(zb0004)
		}
	}
	z.WoFeasible, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "WoFeasible")
		return
	}
	z.Decimals, bts, err = msgp.ReadUint8Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.CloPrice = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.CloPrice))
			if err != nil {
				err = msgp.WrapError(err, "CloPrice")
				return
			}
			z.CloPrice = msgpencode.DecodeInt(zb0005)
		}
	}
	z.CloPreferred, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "CloPreferred")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OracleState) Msgsize() (s int) {
	s = 1
	if z.Price == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Price))
	}
	if z.Spread == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Spread))
	}
	if z.Coeff == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Coeff))
	}
	s += msgp.BoolSize + msgp.Uint8Size
	if z.CloPrice == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.CloPrice))
	}
	s += msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TokenInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Reserve")
			return
		}
		z.Reserve = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Reserve))
			if err != nil {
				err = msgp.WrapError(err, "Reserve")
				return
			}
			z.Reserve = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeeRate")
			return
		}
		z.FeeRate = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeeRate))
			if err != nil {
				err = msgp.WrapError(err, "FeeRate")
				return
			}
			z.FeeRate = msgpencode.DecodeInt(zb0003)
		}
	}
	z.Decimals, err = dc.ReadUint8()
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "State")
			return
		}
		z.State = nil
	} else {
		if z.State == nil {
			z.State = new(OracleState)
		}
		err = z.State.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "State")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TokenInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	if z.Reserve == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Reserve))
		if err != nil {
			err = msgp.WrapError(err, "Reserve")
			return
		}
	}
	if z.FeeRate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeeRate))
		if err != nil {
			err = msgp.WrapError(err, "FeeRate")
			return
		}
	}
	err = en.WriteUint8(z.Decimals)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if z.State == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.State.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "State")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TokenInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	if z.Reserve == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Reserve))
	}
	if z.FeeRate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeeRate))
	}
	o = msgp.AppendUint8(o, z.Decimals)
	if z.State == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.State.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "State")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TokenInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Reserve = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Reserve))
			if err != nil {
				err = msgp.WrapError(err, "Reserve")
				return
			}
			z.Reserve = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeeRate = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeeRate))
			if err != nil {
				err = msgp.WrapError(err, "FeeRate")
				return
			}
			z.FeeRate = msgpencode.DecodeInt(zb0003)
		}
	}
	z.Decimals, bts, err = msgp.ReadUint8Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.State = nil
	} else {
		if z.State == nil {
			z.State = new(OracleState)
		}
		bts, err = z.State.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "State")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TokenInfo) Msgsize() (s int) {
	s = 1
	if z.Reserve == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Reserve))
	}
	if z.FeeRate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeeRate))
	}
	s += msgp.Uint8Size
	if z.State == nil {
		s += msgp.NilSize
	} else {
		s += z.State.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WooFiV2State) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.QuoteToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "QuoteToken")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "UnclaimedFee")
			return
		}
		z.UnclaimedFee = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.UnclaimedFee))
			if err != nil {
				err = msgp.WrapError(err, "UnclaimedFee")
				return
			}
			z.UnclaimedFee = msgpencode.DecodeInt(zb0002)
		}
	}
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "TokenInfos")
		return
	}
	if z.TokenInfos == nil {
		z.TokenInfos = make(map[string]*TokenInfo, zb0003)
	} else if len(z.TokenInfos) > 0 {
		for key := range z.TokenInfos {
			delete(z.TokenInfos, key)
		}
	}
	var field []byte
	_ = field
	for zb0003 > 0 {
		zb0003--
		var za0001 string
		var za0002 *TokenInfo
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "TokenInfos")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "TokenInfos", za0001)
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(TokenInfo)
			}
			err = za0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "TokenInfos", za0001)
				return
			}
		}
		z.TokenInfos[za0001] = za0002
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Timestamp")
			return
		}
		z.Timestamp = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.Timestamp))
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
			z.Timestamp = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "StaleDuration")
			return
		}
		z.StaleDuration = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.StaleDuration))
			if err != nil {
				err = msgp.WrapError(err, "StaleDuration")
				return
			}
			z.StaleDuration = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Bound")
			return
		}
		z.Bound = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.Bound))
			if err != nil {
				err = msgp.WrapError(err, "Bound")
				return
			}
			z.Bound = msgpencode.DecodeInt(zb0006)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WooFiV2State) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 6
	err = en.Append(0x96)
	if err != nil {
		return
	}
	err = en.WriteString(z.QuoteToken)
	if err != nil {
		err = msgp.WrapError(err, "QuoteToken")
		return
	}
	if z.UnclaimedFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.UnclaimedFee))
		if err != nil {
			err = msgp.WrapError(err, "UnclaimedFee")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.TokenInfos)))
	if err != nil {
		err = msgp.WrapError(err, "TokenInfos")
		return
	}
	for za0001, za0002 := range z.TokenInfos {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "TokenInfos")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "TokenInfos", za0001)
				return
			}
		}
	}
	if z.Timestamp == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Timestamp))
		if err != nil {
			err = msgp.WrapError(err, "Timestamp")
			return
		}
	}
	if z.StaleDuration == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.StaleDuration))
		if err != nil {
			err = msgp.WrapError(err, "StaleDuration")
			return
		}
	}
	if z.Bound == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Bound))
		if err != nil {
			err = msgp.WrapError(err, "Bound")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WooFiV2State) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 6
	o = append(o, 0x96)
	o = msgp.AppendString(o, z.QuoteToken)
	if z.UnclaimedFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.UnclaimedFee))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.TokenInfos)))
	for za0001, za0002 := range z.TokenInfos {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "TokenInfos", za0001)
				return
			}
		}
	}
	if z.Timestamp == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Timestamp))
	}
	if z.StaleDuration == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.StaleDuration))
	}
	if z.Bound == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Bound))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WooFiV2State) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 6 {
		err = msgp.ArrayError{Wanted: 6, Got: zb0001}
		return
	}
	z.QuoteToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "QuoteToken")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.UnclaimedFee = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.UnclaimedFee))
			if err != nil {
				err = msgp.WrapError(err, "UnclaimedFee")
				return
			}
			z.UnclaimedFee = msgpencode.DecodeInt(zb0002)
		}
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TokenInfos")
		return
	}
	if z.TokenInfos == nil {
		z.TokenInfos = make(map[string]*TokenInfo, zb0003)
	} else if len(z.TokenInfos) > 0 {
		for key := range z.TokenInfos {
			delete(z.TokenInfos, key)
		}
	}
	var field []byte
	_ = field
	for zb0003 > 0 {
		var za0001 string
		var za0002 *TokenInfo
		zb0003--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "TokenInfos")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(TokenInfo)
			}
			bts, err = za0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "TokenInfos", za0001)
				return
			}
		}
		z.TokenInfos[za0001] = za0002
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Timestamp = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Timestamp))
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
			z.Timestamp = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.StaleDuration = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.StaleDuration))
			if err != nil {
				err = msgp.WrapError(err, "StaleDuration")
				return
			}
			z.StaleDuration = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Bound = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Bound))
			if err != nil {
				err = msgp.WrapError(err, "Bound")
				return
			}
			z.Bound = msgpencode.DecodeInt(zb0006)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WooFiV2State) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.QuoteToken)
	if z.UnclaimedFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.UnclaimedFee))
	}
	s += msgp.MapHeaderSize
	if z.TokenInfos != nil {
		for za0001, za0002 := range z.TokenInfos {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	if z.Timestamp == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Timestamp))
	}
	if z.StaleDuration == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.StaleDuration))
	}
	if z.Bound == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Bound))
	}
	return
}
