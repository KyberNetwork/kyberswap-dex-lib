package tricrypto

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"math/big"

	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Exchange, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Exchange")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Exchange)
	if err != nil {
		err = msgp.WrapError(err, "Exchange")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.Exchange)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Exchange, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Exchange")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Pool) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 25 {
		err = msgp.ArrayError{Wanted: 25, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Precisions")
		return
	}
	if cap(z.Precisions) >= int(zb0002) {
		z.Precisions = (z.Precisions)[:zb0002]
	} else {
		z.Precisions = make([]*big.Int, zb0002)
	}
	for za0001 := range z.Precisions {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "Precisions", za0001)
				return
			}
			z.Precisions[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Precisions[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "Precisions", za0001)
					return
				}
				z.Precisions[za0001] = msgpencode.DecodeInt(zb0003)
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "A")
			return
		}
		z.A = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.A))
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
			z.A = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Gamma")
			return
		}
		z.Gamma = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.Gamma))
			if err != nil {
				err = msgp.WrapError(err, "Gamma")
				return
			}
			z.Gamma = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "D")
			return
		}
		z.D = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.D))
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
			z.D = msgpencode.DecodeInt(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeeGamma")
			return
		}
		z.FeeGamma = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeeGamma))
			if err != nil {
				err = msgp.WrapError(err, "FeeGamma")
				return
			}
			z.FeeGamma = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "MidFee")
			return
		}
		z.MidFee = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.MidFee))
			if err != nil {
				err = msgp.WrapError(err, "MidFee")
				return
			}
			z.MidFee = msgpencode.DecodeInt(zb0008)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "OutFee")
			return
		}
		z.OutFee = nil
	} else {
		{
			var zb0009 []byte
			zb0009, err = dc.ReadBytes(msgpencode.EncodeInt(z.OutFee))
			if err != nil {
				err = msgp.WrapError(err, "OutFee")
				return
			}
			z.OutFee = msgpencode.DecodeInt(zb0009)
		}
	}
	z.FutureAGammaTime, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "FutureAGammaTime")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FutureAGamma")
			return
		}
		z.FutureAGamma = nil
	} else {
		{
			var zb0010 []byte
			zb0010, err = dc.ReadBytes(msgpencode.EncodeInt(z.FutureAGamma))
			if err != nil {
				err = msgp.WrapError(err, "FutureAGamma")
				return
			}
			z.FutureAGamma = msgpencode.DecodeInt(zb0010)
		}
	}
	z.InitialAGammaTime, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "InitialAGammaTime")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "InitialAGamma")
			return
		}
		z.InitialAGamma = nil
	} else {
		{
			var zb0011 []byte
			zb0011, err = dc.ReadBytes(msgpencode.EncodeInt(z.InitialAGamma))
			if err != nil {
				err = msgp.WrapError(err, "InitialAGamma")
				return
			}
			z.InitialAGamma = msgpencode.DecodeInt(zb0011)
		}
	}
	z.LastPricesTimestamp, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "LastPricesTimestamp")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PriceScalePacked")
			return
		}
		z.PriceScalePacked = nil
	} else {
		{
			var zb0012 []byte
			zb0012, err = dc.ReadBytes(msgpencode.EncodeInt(z.PriceScalePacked))
			if err != nil {
				err = msgp.WrapError(err, "PriceScalePacked")
				return
			}
			z.PriceScalePacked = msgpencode.DecodeInt(zb0012)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "PriceOraclePacked")
			return
		}
		z.PriceOraclePacked = nil
	} else {
		{
			var zb0013 []byte
			zb0013, err = dc.ReadBytes(msgpencode.EncodeInt(z.PriceOraclePacked))
			if err != nil {
				err = msgp.WrapError(err, "PriceOraclePacked")
				return
			}
			z.PriceOraclePacked = msgpencode.DecodeInt(zb0013)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LastPricesPacked")
			return
		}
		z.LastPricesPacked = nil
	} else {
		{
			var zb0014 []byte
			zb0014, err = dc.ReadBytes(msgpencode.EncodeInt(z.LastPricesPacked))
			if err != nil {
				err = msgp.WrapError(err, "LastPricesPacked")
				return
			}
			z.LastPricesPacked = msgpencode.DecodeInt(zb0014)
		}
	}
	z.LpToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LpSupply")
			return
		}
		z.LpSupply = nil
	} else {
		{
			var zb0015 []byte
			zb0015, err = dc.ReadBytes(msgpencode.EncodeInt(z.LpSupply))
			if err != nil {
				err = msgp.WrapError(err, "LpSupply")
				return
			}
			z.LpSupply = msgpencode.DecodeInt(zb0015)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "XcpProfit")
			return
		}
		z.XcpProfit = nil
	} else {
		{
			var zb0016 []byte
			zb0016, err = dc.ReadBytes(msgpencode.EncodeInt(z.XcpProfit))
			if err != nil {
				err = msgp.WrapError(err, "XcpProfit")
				return
			}
			z.XcpProfit = msgpencode.DecodeInt(zb0016)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "VirtualPrice")
			return
		}
		z.VirtualPrice = nil
	} else {
		{
			var zb0017 []byte
			zb0017, err = dc.ReadBytes(msgpencode.EncodeInt(z.VirtualPrice))
			if err != nil {
				err = msgp.WrapError(err, "VirtualPrice")
				return
			}
			z.VirtualPrice = msgpencode.DecodeInt(zb0017)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AllowedExtraProfit")
			return
		}
		z.AllowedExtraProfit = nil
	} else {
		{
			var zb0018 []byte
			zb0018, err = dc.ReadBytes(msgpencode.EncodeInt(z.AllowedExtraProfit))
			if err != nil {
				err = msgp.WrapError(err, "AllowedExtraProfit")
				return
			}
			z.AllowedExtraProfit = msgpencode.DecodeInt(zb0018)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AdjustmentStep")
			return
		}
		z.AdjustmentStep = nil
	} else {
		{
			var zb0019 []byte
			zb0019, err = dc.ReadBytes(msgpencode.EncodeInt(z.AdjustmentStep))
			if err != nil {
				err = msgp.WrapError(err, "AdjustmentStep")
				return
			}
			z.AdjustmentStep = msgpencode.DecodeInt(zb0019)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "MaHalfTime")
			return
		}
		z.MaHalfTime = nil
	} else {
		{
			var zb0020 []byte
			zb0020, err = dc.ReadBytes(msgpencode.EncodeInt(z.MaHalfTime))
			if err != nil {
				err = msgp.WrapError(err, "MaHalfTime")
				return
			}
			z.MaHalfTime = msgpencode.DecodeInt(zb0020)
		}
	}
	z.NotAdjusted, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "NotAdjusted")
		return
	}
	var zb0021 uint32
	zb0021, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0021 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0021}
		return
	}
	z.gas.Exchange, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "gas", "Exchange")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pool) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 25
	err = en.Append(0xdc, 0x0, 0x19)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Precisions)))
	if err != nil {
		err = msgp.WrapError(err, "Precisions")
		return
	}
	for za0001 := range z.Precisions {
		if z.Precisions[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeInt(z.Precisions[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "Precisions", za0001)
				return
			}
		}
	}
	if z.A == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.A))
		if err != nil {
			err = msgp.WrapError(err, "A")
			return
		}
	}
	if z.Gamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Gamma))
		if err != nil {
			err = msgp.WrapError(err, "Gamma")
			return
		}
	}
	if z.D == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.D))
		if err != nil {
			err = msgp.WrapError(err, "D")
			return
		}
	}
	if z.FeeGamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeeGamma))
		if err != nil {
			err = msgp.WrapError(err, "FeeGamma")
			return
		}
	}
	if z.MidFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.MidFee))
		if err != nil {
			err = msgp.WrapError(err, "MidFee")
			return
		}
	}
	if z.OutFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.OutFee))
		if err != nil {
			err = msgp.WrapError(err, "OutFee")
			return
		}
	}
	err = en.WriteInt64(z.FutureAGammaTime)
	if err != nil {
		err = msgp.WrapError(err, "FutureAGammaTime")
		return
	}
	if z.FutureAGamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FutureAGamma))
		if err != nil {
			err = msgp.WrapError(err, "FutureAGamma")
			return
		}
	}
	err = en.WriteInt64(z.InitialAGammaTime)
	if err != nil {
		err = msgp.WrapError(err, "InitialAGammaTime")
		return
	}
	if z.InitialAGamma == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.InitialAGamma))
		if err != nil {
			err = msgp.WrapError(err, "InitialAGamma")
			return
		}
	}
	err = en.WriteInt64(z.LastPricesTimestamp)
	if err != nil {
		err = msgp.WrapError(err, "LastPricesTimestamp")
		return
	}
	if z.PriceScalePacked == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PriceScalePacked))
		if err != nil {
			err = msgp.WrapError(err, "PriceScalePacked")
			return
		}
	}
	if z.PriceOraclePacked == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.PriceOraclePacked))
		if err != nil {
			err = msgp.WrapError(err, "PriceOraclePacked")
			return
		}
	}
	if z.LastPricesPacked == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LastPricesPacked))
		if err != nil {
			err = msgp.WrapError(err, "LastPricesPacked")
			return
		}
	}
	err = en.WriteString(z.LpToken)
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	if z.LpSupply == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LpSupply))
		if err != nil {
			err = msgp.WrapError(err, "LpSupply")
			return
		}
	}
	if z.XcpProfit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.XcpProfit))
		if err != nil {
			err = msgp.WrapError(err, "XcpProfit")
			return
		}
	}
	if z.VirtualPrice == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.VirtualPrice))
		if err != nil {
			err = msgp.WrapError(err, "VirtualPrice")
			return
		}
	}
	if z.AllowedExtraProfit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AllowedExtraProfit))
		if err != nil {
			err = msgp.WrapError(err, "AllowedExtraProfit")
			return
		}
	}
	if z.AdjustmentStep == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AdjustmentStep))
		if err != nil {
			err = msgp.WrapError(err, "AdjustmentStep")
			return
		}
	}
	if z.MaHalfTime == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.MaHalfTime))
		if err != nil {
			err = msgp.WrapError(err, "MaHalfTime")
			return
		}
	}
	err = en.WriteBool(z.NotAdjusted)
	if err != nil {
		err = msgp.WrapError(err, "NotAdjusted")
		return
	}
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.gas.Exchange)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Exchange")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 25
	o = append(o, 0xdc, 0x0, 0x19)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.Precisions)))
	for za0001 := range z.Precisions {
		if z.Precisions[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Precisions[za0001]))
		}
	}
	if z.A == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.A))
	}
	if z.Gamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Gamma))
	}
	if z.D == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.D))
	}
	if z.FeeGamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeeGamma))
	}
	if z.MidFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.MidFee))
	}
	if z.OutFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.OutFee))
	}
	o = msgp.AppendInt64(o, z.FutureAGammaTime)
	if z.FutureAGamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FutureAGamma))
	}
	o = msgp.AppendInt64(o, z.InitialAGammaTime)
	if z.InitialAGamma == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.InitialAGamma))
	}
	o = msgp.AppendInt64(o, z.LastPricesTimestamp)
	if z.PriceScalePacked == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PriceScalePacked))
	}
	if z.PriceOraclePacked == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.PriceOraclePacked))
	}
	if z.LastPricesPacked == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LastPricesPacked))
	}
	o = msgp.AppendString(o, z.LpToken)
	if z.LpSupply == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LpSupply))
	}
	if z.XcpProfit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.XcpProfit))
	}
	if z.VirtualPrice == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.VirtualPrice))
	}
	if z.AllowedExtraProfit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AllowedExtraProfit))
	}
	if z.AdjustmentStep == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AdjustmentStep))
	}
	if z.MaHalfTime == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.MaHalfTime))
	}
	o = msgp.AppendBool(o, z.NotAdjusted)
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.gas.Exchange)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 25 {
		err = msgp.ArrayError{Wanted: 25, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Precisions")
		return
	}
	if cap(z.Precisions) >= int(zb0002) {
		z.Precisions = (z.Precisions)[:zb0002]
	} else {
		z.Precisions = make([]*big.Int, zb0002)
	}
	for za0001 := range z.Precisions {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.Precisions[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Precisions[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "Precisions", za0001)
					return
				}
				z.Precisions[za0001] = msgpencode.DecodeInt(zb0003)
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.A = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.A))
			if err != nil {
				err = msgp.WrapError(err, "A")
				return
			}
			z.A = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Gamma = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Gamma))
			if err != nil {
				err = msgp.WrapError(err, "Gamma")
				return
			}
			z.Gamma = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.D = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.D))
			if err != nil {
				err = msgp.WrapError(err, "D")
				return
			}
			z.D = msgpencode.DecodeInt(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeeGamma = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeeGamma))
			if err != nil {
				err = msgp.WrapError(err, "FeeGamma")
				return
			}
			z.FeeGamma = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.MidFee = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.MidFee))
			if err != nil {
				err = msgp.WrapError(err, "MidFee")
				return
			}
			z.MidFee = msgpencode.DecodeInt(zb0008)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.OutFee = nil
	} else {
		{
			var zb0009 []byte
			zb0009, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.OutFee))
			if err != nil {
				err = msgp.WrapError(err, "OutFee")
				return
			}
			z.OutFee = msgpencode.DecodeInt(zb0009)
		}
	}
	z.FutureAGammaTime, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FutureAGammaTime")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FutureAGamma = nil
	} else {
		{
			var zb0010 []byte
			zb0010, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FutureAGamma))
			if err != nil {
				err = msgp.WrapError(err, "FutureAGamma")
				return
			}
			z.FutureAGamma = msgpencode.DecodeInt(zb0010)
		}
	}
	z.InitialAGammaTime, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "InitialAGammaTime")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.InitialAGamma = nil
	} else {
		{
			var zb0011 []byte
			zb0011, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.InitialAGamma))
			if err != nil {
				err = msgp.WrapError(err, "InitialAGamma")
				return
			}
			z.InitialAGamma = msgpencode.DecodeInt(zb0011)
		}
	}
	z.LastPricesTimestamp, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LastPricesTimestamp")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PriceScalePacked = nil
	} else {
		{
			var zb0012 []byte
			zb0012, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PriceScalePacked))
			if err != nil {
				err = msgp.WrapError(err, "PriceScalePacked")
				return
			}
			z.PriceScalePacked = msgpencode.DecodeInt(zb0012)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.PriceOraclePacked = nil
	} else {
		{
			var zb0013 []byte
			zb0013, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.PriceOraclePacked))
			if err != nil {
				err = msgp.WrapError(err, "PriceOraclePacked")
				return
			}
			z.PriceOraclePacked = msgpencode.DecodeInt(zb0013)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LastPricesPacked = nil
	} else {
		{
			var zb0014 []byte
			zb0014, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LastPricesPacked))
			if err != nil {
				err = msgp.WrapError(err, "LastPricesPacked")
				return
			}
			z.LastPricesPacked = msgpencode.DecodeInt(zb0014)
		}
	}
	z.LpToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LpToken")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LpSupply = nil
	} else {
		{
			var zb0015 []byte
			zb0015, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LpSupply))
			if err != nil {
				err = msgp.WrapError(err, "LpSupply")
				return
			}
			z.LpSupply = msgpencode.DecodeInt(zb0015)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.XcpProfit = nil
	} else {
		{
			var zb0016 []byte
			zb0016, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.XcpProfit))
			if err != nil {
				err = msgp.WrapError(err, "XcpProfit")
				return
			}
			z.XcpProfit = msgpencode.DecodeInt(zb0016)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.VirtualPrice = nil
	} else {
		{
			var zb0017 []byte
			zb0017, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.VirtualPrice))
			if err != nil {
				err = msgp.WrapError(err, "VirtualPrice")
				return
			}
			z.VirtualPrice = msgpencode.DecodeInt(zb0017)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AllowedExtraProfit = nil
	} else {
		{
			var zb0018 []byte
			zb0018, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AllowedExtraProfit))
			if err != nil {
				err = msgp.WrapError(err, "AllowedExtraProfit")
				return
			}
			z.AllowedExtraProfit = msgpencode.DecodeInt(zb0018)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AdjustmentStep = nil
	} else {
		{
			var zb0019 []byte
			zb0019, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AdjustmentStep))
			if err != nil {
				err = msgp.WrapError(err, "AdjustmentStep")
				return
			}
			z.AdjustmentStep = msgpencode.DecodeInt(zb0019)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.MaHalfTime = nil
	} else {
		{
			var zb0020 []byte
			zb0020, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.MaHalfTime))
			if err != nil {
				err = msgp.WrapError(err, "MaHalfTime")
				return
			}
			z.MaHalfTime = msgpencode.DecodeInt(zb0020)
		}
	}
	z.NotAdjusted, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "NotAdjusted")
		return
	}
	var zb0021 uint32
	zb0021, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	if zb0021 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0021}
		return
	}
	z.gas.Exchange, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas", "Exchange")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pool) Msgsize() (s int) {
	s = 3 + z.Pool.Msgsize() + msgp.ArrayHeaderSize
	for za0001 := range z.Precisions {
		if z.Precisions[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Precisions[za0001]))
		}
	}
	if z.A == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.A))
	}
	if z.Gamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Gamma))
	}
	if z.D == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.D))
	}
	if z.FeeGamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeeGamma))
	}
	if z.MidFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.MidFee))
	}
	if z.OutFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.OutFee))
	}
	s += msgp.Int64Size
	if z.FutureAGamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FutureAGamma))
	}
	s += msgp.Int64Size
	if z.InitialAGamma == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.InitialAGamma))
	}
	s += msgp.Int64Size
	if z.PriceScalePacked == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PriceScalePacked))
	}
	if z.PriceOraclePacked == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.PriceOraclePacked))
	}
	if z.LastPricesPacked == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LastPricesPacked))
	}
	s += msgp.StringPrefixSize + len(z.LpToken)
	if z.LpSupply == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LpSupply))
	}
	if z.XcpProfit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.XcpProfit))
	}
	if z.VirtualPrice == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.VirtualPrice))
	}
	if z.AllowedExtraProfit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AllowedExtraProfit))
	}
	if z.AdjustmentStep == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AdjustmentStep))
	}
	if z.MaHalfTime == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.MaHalfTime))
	}
	s += msgp.BoolSize + 1 + msgp.Int64Size
	return
}
