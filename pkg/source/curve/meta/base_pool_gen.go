package meta

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/liquidity-source/curve/plain"
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/aave"
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/base"
	plainoracle "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/curve/plain-oracle"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *basePool) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "aave")
			return
		}
		z.aave = nil
	} else {
		if z.aave == nil {
			z.aave = new(aave.AavePool)
		}
		err = z.aave.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "aave")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "base")
			return
		}
		z.base = nil
	} else {
		if z.base == nil {
			z.base = new(base.PoolBaseSimulator)
		}
		err = z.base.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "base")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "plainOracle")
			return
		}
		z.plainOracle = nil
	} else {
		if z.plainOracle == nil {
			z.plainOracle = new(plainoracle.Pool)
		}
		err = z.plainOracle.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "plainOracle")
			return
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "plain")
			return
		}
		z.plain = nil
	} else {
		if z.plain == nil {
			z.plain = new(plain.PoolSimulator)
		}
		err = z.plain.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "plain")
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *basePool) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	if z.aave == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.aave.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "aave")
			return
		}
	}
	if z.base == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.base.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "base")
			return
		}
	}
	if z.plainOracle == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.plainOracle.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "plainOracle")
			return
		}
	}
	if z.plain == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.plain.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "plain")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *basePool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	if z.aave == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.aave.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "aave")
			return
		}
	}
	if z.base == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.base.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "base")
			return
		}
	}
	if z.plainOracle == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.plainOracle.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "plainOracle")
			return
		}
	}
	if z.plain == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.plain.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "plain")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *basePool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.aave = nil
	} else {
		if z.aave == nil {
			z.aave = new(aave.AavePool)
		}
		bts, err = z.aave.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "aave")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.base = nil
	} else {
		if z.base == nil {
			z.base = new(base.PoolBaseSimulator)
		}
		bts, err = z.base.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "base")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.plainOracle = nil
	} else {
		if z.plainOracle == nil {
			z.plainOracle = new(plainoracle.Pool)
		}
		bts, err = z.plainOracle.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "plainOracle")
			return
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.plain = nil
	} else {
		if z.plain == nil {
			z.plain = new(plain.PoolSimulator)
		}
		bts, err = z.plain.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "plain")
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *basePool) Msgsize() (s int) {
	s = 1
	if z.aave == nil {
		s += msgp.NilSize
	} else {
		s += z.aave.Msgsize()
	}
	if z.base == nil {
		s += msgp.NilSize
	} else {
		s += z.base.Msgsize()
	}
	if z.plainOracle == nil {
		s += msgp.NilSize
	} else {
		s += z.plainOracle.Msgsize()
	}
	if z.plain == nil {
		s += msgp.NilSize
	} else {
		s += z.plain.Msgsize()
	}
	return
}
