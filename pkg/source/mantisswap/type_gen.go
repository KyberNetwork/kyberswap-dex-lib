package mantisswap

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Swap)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendInt64(o, z.Swap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Swap, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Swap")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LP) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Address, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	z.Decimals, err = dc.ReadUint8()
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Asset")
			return
		}
		z.Asset = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.Asset))
			if err != nil {
				err = msgp.WrapError(err, "Asset")
				return
			}
			z.Asset = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Liability")
			return
		}
		z.Liability = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.Liability))
			if err != nil {
				err = msgp.WrapError(err, "Liability")
				return
			}
			z.Liability = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LiabilityLimit")
			return
		}
		z.LiabilityLimit = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.LiabilityLimit))
			if err != nil {
				err = msgp.WrapError(err, "LiabilityLimit")
				return
			}
			z.LiabilityLimit = msgpencode.DecodeInt(zb0004)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *LP) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = en.WriteString(z.Address)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	err = en.WriteUint8(z.Decimals)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if z.Asset == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Asset))
		if err != nil {
			err = msgp.WrapError(err, "Asset")
			return
		}
	}
	if z.Liability == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.Liability))
		if err != nil {
			err = msgp.WrapError(err, "Liability")
			return
		}
	}
	if z.LiabilityLimit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LiabilityLimit))
		if err != nil {
			err = msgp.WrapError(err, "LiabilityLimit")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *LP) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o = msgp.AppendString(o, z.Address)
	o = msgp.AppendUint8(o, z.Decimals)
	if z.Asset == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Asset))
	}
	if z.Liability == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.Liability))
	}
	if z.LiabilityLimit == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LiabilityLimit))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LP) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	z.Address, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Address")
		return
	}
	z.Decimals, bts, err = msgp.ReadUint8Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Decimals")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Asset = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Asset))
			if err != nil {
				err = msgp.WrapError(err, "Asset")
				return
			}
			z.Asset = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Liability = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.Liability))
			if err != nil {
				err = msgp.WrapError(err, "Liability")
				return
			}
			z.Liability = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LiabilityLimit = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LiabilityLimit))
			if err != nil {
				err = msgp.WrapError(err, "LiabilityLimit")
				return
			}
			z.LiabilityLimit = msgpencode.DecodeInt(zb0004)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *LP) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Address) + msgp.Uint8Size
	if z.Asset == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Asset))
	}
	if z.Liability == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.Liability))
	}
	if z.LiabilityLimit == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LiabilityLimit))
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolState) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	z.Paused, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Paused")
		return
	}
	z.SwapAllowed, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "SwapAllowed")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BaseFee")
			return
		}
		z.BaseFee = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.BaseFee))
			if err != nil {
				err = msgp.WrapError(err, "BaseFee")
				return
			}
			z.BaseFee = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LpRatio")
			return
		}
		z.LpRatio = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.LpRatio))
			if err != nil {
				err = msgp.WrapError(err, "LpRatio")
				return
			}
			z.LpRatio = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SlippageA")
			return
		}
		z.SlippageA = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.SlippageA))
			if err != nil {
				err = msgp.WrapError(err, "SlippageA")
				return
			}
			z.SlippageA = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SlippageN")
			return
		}
		z.SlippageN = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.SlippageN))
			if err != nil {
				err = msgp.WrapError(err, "SlippageN")
				return
			}
			z.SlippageN = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "SlippageK")
			return
		}
		z.SlippageK = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.SlippageK))
			if err != nil {
				err = msgp.WrapError(err, "SlippageK")
				return
			}
			z.SlippageK = msgpencode.DecodeInt(zb0006)
		}
	}
	var zb0007 uint32
	zb0007, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "LPs")
		return
	}
	if z.LPs == nil {
		z.LPs = make(map[string]*LP, zb0007)
	} else if len(z.LPs) > 0 {
		for key := range z.LPs {
			delete(z.LPs, key)
		}
	}
	for zb0007 > 0 {
		zb0007--
		var za0001 string
		var za0002 *LP
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "LPs")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "LPs", za0001)
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(LP)
			}
			err = za0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LPs", za0001)
				return
			}
		}
		z.LPs[za0001] = za0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolState) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Paused)
	if err != nil {
		err = msgp.WrapError(err, "Paused")
		return
	}
	err = en.WriteBool(z.SwapAllowed)
	if err != nil {
		err = msgp.WrapError(err, "SwapAllowed")
		return
	}
	if z.BaseFee == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.BaseFee))
		if err != nil {
			err = msgp.WrapError(err, "BaseFee")
			return
		}
	}
	if z.LpRatio == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.LpRatio))
		if err != nil {
			err = msgp.WrapError(err, "LpRatio")
			return
		}
	}
	if z.SlippageA == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SlippageA))
		if err != nil {
			err = msgp.WrapError(err, "SlippageA")
			return
		}
	}
	if z.SlippageN == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SlippageN))
		if err != nil {
			err = msgp.WrapError(err, "SlippageN")
			return
		}
	}
	if z.SlippageK == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.SlippageK))
		if err != nil {
			err = msgp.WrapError(err, "SlippageK")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.LPs)))
	if err != nil {
		err = msgp.WrapError(err, "LPs")
		return
	}
	for za0001, za0002 := range z.LPs {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "LPs")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "LPs", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	o = msgp.AppendBool(o, z.Paused)
	o = msgp.AppendBool(o, z.SwapAllowed)
	if z.BaseFee == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.BaseFee))
	}
	if z.LpRatio == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.LpRatio))
	}
	if z.SlippageA == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SlippageA))
	}
	if z.SlippageN == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SlippageN))
	}
	if z.SlippageK == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.SlippageK))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.LPs)))
	for za0001, za0002 := range z.LPs {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "LPs", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	z.Paused, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Paused")
		return
	}
	z.SwapAllowed, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SwapAllowed")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BaseFee = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.BaseFee))
			if err != nil {
				err = msgp.WrapError(err, "BaseFee")
				return
			}
			z.BaseFee = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LpRatio = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.LpRatio))
			if err != nil {
				err = msgp.WrapError(err, "LpRatio")
				return
			}
			z.LpRatio = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SlippageA = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SlippageA))
			if err != nil {
				err = msgp.WrapError(err, "SlippageA")
				return
			}
			z.SlippageA = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SlippageN = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SlippageN))
			if err != nil {
				err = msgp.WrapError(err, "SlippageN")
				return
			}
			z.SlippageN = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.SlippageK = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.SlippageK))
			if err != nil {
				err = msgp.WrapError(err, "SlippageK")
				return
			}
			z.SlippageK = msgpencode.DecodeInt(zb0006)
		}
	}
	var zb0007 uint32
	zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "LPs")
		return
	}
	if z.LPs == nil {
		z.LPs = make(map[string]*LP, zb0007)
	} else if len(z.LPs) > 0 {
		for key := range z.LPs {
			delete(z.LPs, key)
		}
	}
	for zb0007 > 0 {
		var za0001 string
		var za0002 *LP
		zb0007--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "LPs")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(LP)
			}
			bts, err = za0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LPs", za0001)
				return
			}
		}
		z.LPs[za0001] = za0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolState) Msgsize() (s int) {
	s = 1 + msgp.BoolSize + msgp.BoolSize
	if z.BaseFee == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.BaseFee))
	}
	if z.LpRatio == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.LpRatio))
	}
	if z.SlippageA == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SlippageA))
	}
	if z.SlippageN == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SlippageN))
	}
	if z.SlippageK == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.SlippageK))
	}
	s += msgp.MapHeaderSize
	if z.LPs != nil {
		for za0001, za0002 := range z.LPs {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	return
}
