package dodo

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Gas) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.SellBaseV1, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "SellBaseV1")
		return
	}
	z.BuyBaseV1, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "BuyBaseV1")
		return
	}
	z.SellBaseV2, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "SellBaseV2")
		return
	}
	z.BuyBaseV2, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "BuyBaseV2")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Gas) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.SellBaseV1)
	if err != nil {
		err = msgp.WrapError(err, "SellBaseV1")
		return
	}
	err = en.WriteInt64(z.BuyBaseV1)
	if err != nil {
		err = msgp.WrapError(err, "BuyBaseV1")
		return
	}
	err = en.WriteInt64(z.SellBaseV2)
	if err != nil {
		err = msgp.WrapError(err, "SellBaseV2")
		return
	}
	err = en.WriteInt64(z.BuyBaseV2)
	if err != nil {
		err = msgp.WrapError(err, "BuyBaseV2")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Gas) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendInt64(o, z.SellBaseV1)
	o = msgp.AppendInt64(o, z.BuyBaseV1)
	o = msgp.AppendInt64(o, z.SellBaseV2)
	o = msgp.AppendInt64(o, z.BuyBaseV2)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Gas) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.SellBaseV1, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SellBaseV1")
		return
	}
	z.BuyBaseV1, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BuyBaseV1")
		return
	}
	z.SellBaseV2, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "SellBaseV2")
		return
	}
	z.BuyBaseV2, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BuyBaseV2")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Gas) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.Int64Size + msgp.Int64Size + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Meta) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Type, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	z.DodoV1SellHelper, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "DodoV1SellHelper")
		return
	}
	z.BaseToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "BaseToken")
		return
	}
	z.QuoteToken, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "QuoteToken")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Meta) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 4
	err = en.Append(0x94)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	err = en.WriteString(z.DodoV1SellHelper)
	if err != nil {
		err = msgp.WrapError(err, "DodoV1SellHelper")
		return
	}
	err = en.WriteString(z.BaseToken)
	if err != nil {
		err = msgp.WrapError(err, "BaseToken")
		return
	}
	err = en.WriteString(z.QuoteToken)
	if err != nil {
		err = msgp.WrapError(err, "QuoteToken")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Meta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 4
	o = append(o, 0x94)
	o = msgp.AppendString(o, z.Type)
	o = msgp.AppendString(o, z.DodoV1SellHelper)
	o = msgp.AppendString(o, z.BaseToken)
	o = msgp.AppendString(o, z.QuoteToken)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Meta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 4 {
		err = msgp.ArrayError{Wanted: 4, Got: zb0001}
		return
	}
	z.Type, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	z.DodoV1SellHelper, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "DodoV1SellHelper")
		return
	}
	z.BaseToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "BaseToken")
		return
	}
	z.QuoteToken, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "QuoteToken")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Meta) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Type) + msgp.StringPrefixSize + len(z.DodoV1SellHelper) + msgp.StringPrefixSize + len(z.BaseToken) + msgp.StringPrefixSize + len(z.QuoteToken)
	return
}
