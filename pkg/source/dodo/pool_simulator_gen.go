package dodo

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.PoolSimulatorState.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "PoolSimulatorState")
		return
	}
	err = z.Tokens.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	err = z.Meta.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Meta")
		return
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.PoolSimulatorState.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "PoolSimulatorState")
		return
	}
	err = z.Tokens.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	err = z.Meta.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Meta")
		return
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o, err = z.PoolSimulatorState.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "PoolSimulatorState")
		return
	}
	o, err = z.Tokens.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	o, err = z.Meta.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Meta")
		return
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	bts, err = z.PoolSimulatorState.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "PoolSimulatorState")
		return
	}
	bts, err = z.Tokens.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Tokens")
		return
	}
	bts, err = z.Meta.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Meta")
		return
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + z.PoolSimulatorState.Msgsize() + z.Tokens.Msgsize() + z.Meta.Msgsize() + z.gas.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulatorState) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "B")
			return
		}
		z.B = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeFloat(z.B))
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
			z.B = msgpencode.DecodeFloat(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Q")
			return
		}
		z.Q = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeFloat(z.Q))
			if err != nil {
				err = msgp.WrapError(err, "Q")
				return
			}
			z.Q = msgpencode.DecodeFloat(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "B0")
			return
		}
		z.B0 = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeFloat(z.B0))
			if err != nil {
				err = msgp.WrapError(err, "B0")
				return
			}
			z.B0 = msgpencode.DecodeFloat(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "Q0")
			return
		}
		z.Q0 = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeFloat(z.Q0))
			if err != nil {
				err = msgp.WrapError(err, "Q0")
				return
			}
			z.Q0 = msgpencode.DecodeFloat(zb0005)
		}
	}
	z.RStatus, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "RStatus")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "OraclePrice")
			return
		}
		z.OraclePrice = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeFloat(z.OraclePrice))
			if err != nil {
				err = msgp.WrapError(err, "OraclePrice")
				return
			}
			z.OraclePrice = msgpencode.DecodeFloat(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "k")
			return
		}
		z.k = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeFloat(z.k))
			if err != nil {
				err = msgp.WrapError(err, "k")
				return
			}
			z.k = msgpencode.DecodeFloat(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "mtFeeRate")
			return
		}
		z.mtFeeRate = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeFloat(z.mtFeeRate))
			if err != nil {
				err = msgp.WrapError(err, "mtFeeRate")
				return
			}
			z.mtFeeRate = msgpencode.DecodeFloat(zb0008)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "lpFeeRate")
			return
		}
		z.lpFeeRate = nil
	} else {
		{
			var zb0009 []byte
			zb0009, err = dc.ReadBytes(msgpencode.EncodeFloat(z.lpFeeRate))
			if err != nil {
				err = msgp.WrapError(err, "lpFeeRate")
				return
			}
			z.lpFeeRate = msgpencode.DecodeFloat(zb0009)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulatorState) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 9
	err = en.Append(0x99)
	if err != nil {
		return
	}
	if z.B == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.B))
		if err != nil {
			err = msgp.WrapError(err, "B")
			return
		}
	}
	if z.Q == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.Q))
		if err != nil {
			err = msgp.WrapError(err, "Q")
			return
		}
	}
	if z.B0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.B0))
		if err != nil {
			err = msgp.WrapError(err, "B0")
			return
		}
	}
	if z.Q0 == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.Q0))
		if err != nil {
			err = msgp.WrapError(err, "Q0")
			return
		}
	}
	err = en.WriteInt(z.RStatus)
	if err != nil {
		err = msgp.WrapError(err, "RStatus")
		return
	}
	if z.OraclePrice == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.OraclePrice))
		if err != nil {
			err = msgp.WrapError(err, "OraclePrice")
			return
		}
	}
	if z.k == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.k))
		if err != nil {
			err = msgp.WrapError(err, "k")
			return
		}
	}
	if z.mtFeeRate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.mtFeeRate))
		if err != nil {
			err = msgp.WrapError(err, "mtFeeRate")
			return
		}
	}
	if z.lpFeeRate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeFloat(z.lpFeeRate))
		if err != nil {
			err = msgp.WrapError(err, "lpFeeRate")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulatorState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 9
	o = append(o, 0x99)
	if z.B == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.B))
	}
	if z.Q == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.Q))
	}
	if z.B0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.B0))
	}
	if z.Q0 == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.Q0))
	}
	o = msgp.AppendInt(o, z.RStatus)
	if z.OraclePrice == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.OraclePrice))
	}
	if z.k == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.k))
	}
	if z.mtFeeRate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.mtFeeRate))
	}
	if z.lpFeeRate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeFloat(z.lpFeeRate))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulatorState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 9 {
		err = msgp.ArrayError{Wanted: 9, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.B = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.B))
			if err != nil {
				err = msgp.WrapError(err, "B")
				return
			}
			z.B = msgpencode.DecodeFloat(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Q = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.Q))
			if err != nil {
				err = msgp.WrapError(err, "Q")
				return
			}
			z.Q = msgpencode.DecodeFloat(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.B0 = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.B0))
			if err != nil {
				err = msgp.WrapError(err, "B0")
				return
			}
			z.B0 = msgpencode.DecodeFloat(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.Q0 = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.Q0))
			if err != nil {
				err = msgp.WrapError(err, "Q0")
				return
			}
			z.Q0 = msgpencode.DecodeFloat(zb0005)
		}
	}
	z.RStatus, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RStatus")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.OraclePrice = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.OraclePrice))
			if err != nil {
				err = msgp.WrapError(err, "OraclePrice")
				return
			}
			z.OraclePrice = msgpencode.DecodeFloat(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.k = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.k))
			if err != nil {
				err = msgp.WrapError(err, "k")
				return
			}
			z.k = msgpencode.DecodeFloat(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.mtFeeRate = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.mtFeeRate))
			if err != nil {
				err = msgp.WrapError(err, "mtFeeRate")
				return
			}
			z.mtFeeRate = msgpencode.DecodeFloat(zb0008)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.lpFeeRate = nil
	} else {
		{
			var zb0009 []byte
			zb0009, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeFloat(z.lpFeeRate))
			if err != nil {
				err = msgp.WrapError(err, "lpFeeRate")
				return
			}
			z.lpFeeRate = msgpencode.DecodeFloat(zb0009)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulatorState) Msgsize() (s int) {
	s = 1
	if z.B == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.B))
	}
	if z.Q == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.Q))
	}
	if z.B0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.B0))
	}
	if z.Q0 == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.Q0))
	}
	s += msgp.IntSize
	if z.OraclePrice == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.OraclePrice))
	}
	if z.k == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.k))
	}
	if z.mtFeeRate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.mtFeeRate))
	}
	if z.lpFeeRate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeFloat(z.lpFeeRate))
	}
	return
}
