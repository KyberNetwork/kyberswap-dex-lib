package solidlyv3

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode/uniswapv3mspg"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "V3Pool")
			return
		}
		z.V3Pool = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(uniswapv3mspg.EncodePool(z.V3Pool))
			if err != nil {
				err = msgp.WrapError(err, "V3Pool")
				return
			}
			z.V3Pool = uniswapv3mspg.DecodePool(zb0002)
		}
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	z.tickMin, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "tickMin")
		return
	}
	z.tickMax, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "tickMax")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	if z.V3Pool == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(uniswapv3mspg.EncodePool(z.V3Pool))
		if err != nil {
			err = msgp.WrapError(err, "V3Pool")
			return
		}
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	err = en.WriteInt(z.tickMin)
	if err != nil {
		err = msgp.WrapError(err, "tickMin")
		return
	}
	err = en.WriteInt(z.tickMax)
	if err != nil {
		err = msgp.WrapError(err, "tickMax")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	if z.V3Pool == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, uniswapv3mspg.EncodePool(z.V3Pool))
	}
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = msgp.AppendInt(o, z.tickMin)
	o = msgp.AppendInt(o, z.tickMax)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.V3Pool = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, uniswapv3mspg.EncodePool(z.V3Pool))
			if err != nil {
				err = msgp.WrapError(err, "V3Pool")
				return
			}
			z.V3Pool = uniswapv3mspg.DecodePool(zb0002)
		}
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	z.tickMin, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "tickMin")
		return
	}
	z.tickMax, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "tickMax")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1
	if z.V3Pool == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(uniswapv3mspg.EncodePool(z.V3Pool))
	}
	s += z.Pool.Msgsize() + z.gas.Msgsize() + msgp.IntSize + msgp.IntSize
	return
}
