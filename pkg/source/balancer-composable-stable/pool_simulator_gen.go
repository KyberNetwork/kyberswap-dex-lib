package balancercomposablestable

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"math/big"

	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 14 {
		err = msgp.ArrayError{Wanted: 14, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.VaultAddress, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "VaultAddress")
		return
	}
	z.PoolId, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "PoolId")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "ScalingFactors")
		return
	}
	if cap(z.ScalingFactors) >= int(zb0002) {
		z.ScalingFactors = (z.ScalingFactors)[:zb0002]
	} else {
		z.ScalingFactors = make([]*big.Int, zb0002)
	}
	for za0001 := range z.ScalingFactors {
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "ScalingFactors", za0001)
				return
			}
			z.ScalingFactors[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.ScalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "ScalingFactors", za0001)
					return
				}
				z.ScalingFactors[za0001] = msgpencode.DecodeInt(zb0003)
			}
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "BptIndex")
			return
		}
		z.BptIndex = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.BptIndex))
			if err != nil {
				err = msgp.WrapError(err, "BptIndex")
				return
			}
			z.BptIndex = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AmplificationParameter")
			return
		}
		z.AmplificationParameter = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.AmplificationParameter))
			if err != nil {
				err = msgp.WrapError(err, "AmplificationParameter")
				return
			}
			z.AmplificationParameter = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TotalSupply")
			return
		}
		z.TotalSupply = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.TotalSupply))
			if err != nil {
				err = msgp.WrapError(err, "TotalSupply")
				return
			}
			z.TotalSupply = msgpencode.DecodeInt(zb0006)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "ProtocolFeePercentageCacheSwapType")
			return
		}
		z.ProtocolFeePercentageCacheSwapType = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.ProtocolFeePercentageCacheSwapType))
			if err != nil {
				err = msgp.WrapError(err, "ProtocolFeePercentageCacheSwapType")
				return
			}
			z.ProtocolFeePercentageCacheSwapType = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "ProtocolFeePercentageCacheYieldType")
			return
		}
		z.ProtocolFeePercentageCacheYieldType = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.ProtocolFeePercentageCacheYieldType))
			if err != nil {
				err = msgp.WrapError(err, "ProtocolFeePercentageCacheYieldType")
				return
			}
			z.ProtocolFeePercentageCacheYieldType = msgpencode.DecodeInt(zb0008)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "LastJoinExit")
			return
		}
		z.LastJoinExit = nil
	} else {
		if z.LastJoinExit == nil {
			z.LastJoinExit = new(LastJoinExitData)
		}
		err = z.LastJoinExit.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "LastJoinExit")
			return
		}
	}
	var zb0009 uint32
	zb0009, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "RateProviders")
		return
	}
	if cap(z.RateProviders) >= int(zb0009) {
		z.RateProviders = (z.RateProviders)[:zb0009]
	} else {
		z.RateProviders = make([]string, zb0009)
	}
	for za0002 := range z.RateProviders {
		z.RateProviders[za0002], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "RateProviders", za0002)
			return
		}
	}
	var zb0010 uint32
	zb0010, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "TokensExemptFromYieldProtocolFee")
		return
	}
	if cap(z.TokensExemptFromYieldProtocolFee) >= int(zb0010) {
		z.TokensExemptFromYieldProtocolFee = (z.TokensExemptFromYieldProtocolFee)[:zb0010]
	} else {
		z.TokensExemptFromYieldProtocolFee = make([]bool, zb0010)
	}
	for za0003 := range z.TokensExemptFromYieldProtocolFee {
		z.TokensExemptFromYieldProtocolFee[za0003], err = dc.ReadBool()
		if err != nil {
			err = msgp.WrapError(err, "TokensExemptFromYieldProtocolFee", za0003)
			return
		}
	}
	var zb0011 uint32
	zb0011, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "TokenRateCaches")
		return
	}
	if cap(z.TokenRateCaches) >= int(zb0011) {
		z.TokenRateCaches = (z.TokenRateCaches)[:zb0011]
	} else {
		z.TokenRateCaches = make([]TokenRateCache, zb0011)
	}
	for za0004 := range z.TokenRateCaches {
		err = z.TokenRateCaches[za0004].DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "TokenRateCaches", za0004)
			return
		}
	}
	var zb0012 uint32
	zb0012, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "mapTokenAddressToIndex")
		return
	}
	if z.mapTokenAddressToIndex == nil {
		z.mapTokenAddressToIndex = make(map[string]int, zb0012)
	} else if len(z.mapTokenAddressToIndex) > 0 {
		for key := range z.mapTokenAddressToIndex {
			delete(z.mapTokenAddressToIndex, key)
		}
	}
	for zb0012 > 0 {
		zb0012--
		var za0005 string
		var za0006 int
		za0005, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "mapTokenAddressToIndex")
			return
		}
		za0006, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err, "mapTokenAddressToIndex", za0005)
			return
		}
		z.mapTokenAddressToIndex[za0005] = za0006
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 14
	err = en.Append(0x9e)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteString(z.VaultAddress)
	if err != nil {
		err = msgp.WrapError(err, "VaultAddress")
		return
	}
	err = en.WriteString(z.PoolId)
	if err != nil {
		err = msgp.WrapError(err, "PoolId")
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ScalingFactors)))
	if err != nil {
		err = msgp.WrapError(err, "ScalingFactors")
		return
	}
	for za0001 := range z.ScalingFactors {
		if z.ScalingFactors[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = en.WriteBytes(msgpencode.EncodeInt(z.ScalingFactors[za0001]))
			if err != nil {
				err = msgp.WrapError(err, "ScalingFactors", za0001)
				return
			}
		}
	}
	if z.BptIndex == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.BptIndex))
		if err != nil {
			err = msgp.WrapError(err, "BptIndex")
			return
		}
	}
	if z.AmplificationParameter == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AmplificationParameter))
		if err != nil {
			err = msgp.WrapError(err, "AmplificationParameter")
			return
		}
	}
	if z.TotalSupply == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TotalSupply))
		if err != nil {
			err = msgp.WrapError(err, "TotalSupply")
			return
		}
	}
	if z.ProtocolFeePercentageCacheSwapType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.ProtocolFeePercentageCacheSwapType))
		if err != nil {
			err = msgp.WrapError(err, "ProtocolFeePercentageCacheSwapType")
			return
		}
	}
	if z.ProtocolFeePercentageCacheYieldType == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.ProtocolFeePercentageCacheYieldType))
		if err != nil {
			err = msgp.WrapError(err, "ProtocolFeePercentageCacheYieldType")
			return
		}
	}
	if z.LastJoinExit == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.LastJoinExit.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "LastJoinExit")
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.RateProviders)))
	if err != nil {
		err = msgp.WrapError(err, "RateProviders")
		return
	}
	for za0002 := range z.RateProviders {
		err = en.WriteString(z.RateProviders[za0002])
		if err != nil {
			err = msgp.WrapError(err, "RateProviders", za0002)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.TokensExemptFromYieldProtocolFee)))
	if err != nil {
		err = msgp.WrapError(err, "TokensExemptFromYieldProtocolFee")
		return
	}
	for za0003 := range z.TokensExemptFromYieldProtocolFee {
		err = en.WriteBool(z.TokensExemptFromYieldProtocolFee[za0003])
		if err != nil {
			err = msgp.WrapError(err, "TokensExemptFromYieldProtocolFee", za0003)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.TokenRateCaches)))
	if err != nil {
		err = msgp.WrapError(err, "TokenRateCaches")
		return
	}
	for za0004 := range z.TokenRateCaches {
		err = z.TokenRateCaches[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "TokenRateCaches", za0004)
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.mapTokenAddressToIndex)))
	if err != nil {
		err = msgp.WrapError(err, "mapTokenAddressToIndex")
		return
	}
	for za0005, za0006 := range z.mapTokenAddressToIndex {
		err = en.WriteString(za0005)
		if err != nil {
			err = msgp.WrapError(err, "mapTokenAddressToIndex")
			return
		}
		err = en.WriteInt(za0006)
		if err != nil {
			err = msgp.WrapError(err, "mapTokenAddressToIndex", za0005)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 14
	o = append(o, 0x9e)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendString(o, z.VaultAddress)
	o = msgp.AppendString(o, z.PoolId)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ScalingFactors)))
	for za0001 := range z.ScalingFactors {
		if z.ScalingFactors[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.ScalingFactors[za0001]))
		}
	}
	if z.BptIndex == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.BptIndex))
	}
	if z.AmplificationParameter == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AmplificationParameter))
	}
	if z.TotalSupply == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TotalSupply))
	}
	if z.ProtocolFeePercentageCacheSwapType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.ProtocolFeePercentageCacheSwapType))
	}
	if z.ProtocolFeePercentageCacheYieldType == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.ProtocolFeePercentageCacheYieldType))
	}
	if z.LastJoinExit == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.LastJoinExit.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "LastJoinExit")
			return
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.RateProviders)))
	for za0002 := range z.RateProviders {
		o = msgp.AppendString(o, z.RateProviders[za0002])
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.TokensExemptFromYieldProtocolFee)))
	for za0003 := range z.TokensExemptFromYieldProtocolFee {
		o = msgp.AppendBool(o, z.TokensExemptFromYieldProtocolFee[za0003])
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.TokenRateCaches)))
	for za0004 := range z.TokenRateCaches {
		o, err = z.TokenRateCaches[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "TokenRateCaches", za0004)
			return
		}
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.mapTokenAddressToIndex)))
	for za0005, za0006 := range z.mapTokenAddressToIndex {
		o = msgp.AppendString(o, za0005)
		o = msgp.AppendInt(o, za0006)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 14 {
		err = msgp.ArrayError{Wanted: 14, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.VaultAddress, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "VaultAddress")
		return
	}
	z.PoolId, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "PoolId")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ScalingFactors")
		return
	}
	if cap(z.ScalingFactors) >= int(zb0002) {
		z.ScalingFactors = (z.ScalingFactors)[:zb0002]
	} else {
		z.ScalingFactors = make([]*big.Int, zb0002)
	}
	for za0001 := range z.ScalingFactors {
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			z.ScalingFactors[za0001] = nil
		} else {
			{
				var zb0003 []byte
				zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.ScalingFactors[za0001]))
				if err != nil {
					err = msgp.WrapError(err, "ScalingFactors", za0001)
					return
				}
				z.ScalingFactors[za0001] = msgpencode.DecodeInt(zb0003)
			}
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.BptIndex = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.BptIndex))
			if err != nil {
				err = msgp.WrapError(err, "BptIndex")
				return
			}
			z.BptIndex = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AmplificationParameter = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AmplificationParameter))
			if err != nil {
				err = msgp.WrapError(err, "AmplificationParameter")
				return
			}
			z.AmplificationParameter = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TotalSupply = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TotalSupply))
			if err != nil {
				err = msgp.WrapError(err, "TotalSupply")
				return
			}
			z.TotalSupply = msgpencode.DecodeInt(zb0006)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.ProtocolFeePercentageCacheSwapType = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.ProtocolFeePercentageCacheSwapType))
			if err != nil {
				err = msgp.WrapError(err, "ProtocolFeePercentageCacheSwapType")
				return
			}
			z.ProtocolFeePercentageCacheSwapType = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.ProtocolFeePercentageCacheYieldType = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.ProtocolFeePercentageCacheYieldType))
			if err != nil {
				err = msgp.WrapError(err, "ProtocolFeePercentageCacheYieldType")
				return
			}
			z.ProtocolFeePercentageCacheYieldType = msgpencode.DecodeInt(zb0008)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.LastJoinExit = nil
	} else {
		if z.LastJoinExit == nil {
			z.LastJoinExit = new(LastJoinExitData)
		}
		bts, err = z.LastJoinExit.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "LastJoinExit")
			return
		}
	}
	var zb0009 uint32
	zb0009, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "RateProviders")
		return
	}
	if cap(z.RateProviders) >= int(zb0009) {
		z.RateProviders = (z.RateProviders)[:zb0009]
	} else {
		z.RateProviders = make([]string, zb0009)
	}
	for za0002 := range z.RateProviders {
		z.RateProviders[za0002], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "RateProviders", za0002)
			return
		}
	}
	var zb0010 uint32
	zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TokensExemptFromYieldProtocolFee")
		return
	}
	if cap(z.TokensExemptFromYieldProtocolFee) >= int(zb0010) {
		z.TokensExemptFromYieldProtocolFee = (z.TokensExemptFromYieldProtocolFee)[:zb0010]
	} else {
		z.TokensExemptFromYieldProtocolFee = make([]bool, zb0010)
	}
	for za0003 := range z.TokensExemptFromYieldProtocolFee {
		z.TokensExemptFromYieldProtocolFee[za0003], bts, err = msgp.ReadBoolBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "TokensExemptFromYieldProtocolFee", za0003)
			return
		}
	}
	var zb0011 uint32
	zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TokenRateCaches")
		return
	}
	if cap(z.TokenRateCaches) >= int(zb0011) {
		z.TokenRateCaches = (z.TokenRateCaches)[:zb0011]
	} else {
		z.TokenRateCaches = make([]TokenRateCache, zb0011)
	}
	for za0004 := range z.TokenRateCaches {
		bts, err = z.TokenRateCaches[za0004].UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "TokenRateCaches", za0004)
			return
		}
	}
	var zb0012 uint32
	zb0012, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "mapTokenAddressToIndex")
		return
	}
	if z.mapTokenAddressToIndex == nil {
		z.mapTokenAddressToIndex = make(map[string]int, zb0012)
	} else if len(z.mapTokenAddressToIndex) > 0 {
		for key := range z.mapTokenAddressToIndex {
			delete(z.mapTokenAddressToIndex, key)
		}
	}
	for zb0012 > 0 {
		var za0005 string
		var za0006 int
		zb0012--
		za0005, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "mapTokenAddressToIndex")
			return
		}
		za0006, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "mapTokenAddressToIndex", za0005)
			return
		}
		z.mapTokenAddressToIndex[za0005] = za0006
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.StringPrefixSize + len(z.VaultAddress) + msgp.StringPrefixSize + len(z.PoolId) + msgp.ArrayHeaderSize
	for za0001 := range z.ScalingFactors {
		if z.ScalingFactors[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.ScalingFactors[za0001]))
		}
	}
	if z.BptIndex == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.BptIndex))
	}
	if z.AmplificationParameter == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AmplificationParameter))
	}
	if z.TotalSupply == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TotalSupply))
	}
	if z.ProtocolFeePercentageCacheSwapType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.ProtocolFeePercentageCacheSwapType))
	}
	if z.ProtocolFeePercentageCacheYieldType == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.ProtocolFeePercentageCacheYieldType))
	}
	if z.LastJoinExit == nil {
		s += msgp.NilSize
	} else {
		s += z.LastJoinExit.Msgsize()
	}
	s += msgp.ArrayHeaderSize
	for za0002 := range z.RateProviders {
		s += msgp.StringPrefixSize + len(z.RateProviders[za0002])
	}
	s += msgp.ArrayHeaderSize + (len(z.TokensExemptFromYieldProtocolFee) * (msgp.BoolSize)) + msgp.ArrayHeaderSize
	for za0004 := range z.TokenRateCaches {
		s += z.TokenRateCaches[za0004].Msgsize()
	}
	s += msgp.MapHeaderSize
	if z.mapTokenAddressToIndex != nil {
		for za0005, za0006 := range z.mapTokenAddressToIndex {
			_ = za0006
			s += msgp.StringPrefixSize + len(za0005) + msgp.IntSize
		}
	}
	return
}
