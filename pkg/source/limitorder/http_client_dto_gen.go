package limitorder

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *order) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 26 {
		err = msgp.ArrayError{Wanted: 26, Got: zb0001}
		return
	}
	z.ID, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.ChainID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ChainID")
		return
	}
	z.Salt, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Salt")
		return
	}
	z.Signature, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	z.MakerAsset, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "MakerAsset")
		return
	}
	z.TakerAsset, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "TakerAsset")
		return
	}
	z.Maker, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Maker")
		return
	}
	z.Receiver, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	z.AllowedSenders, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "AllowedSenders")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "MakingAmount")
			return
		}
		z.MakingAmount = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.MakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "MakingAmount")
				return
			}
			z.MakingAmount = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "TakingAmount")
			return
		}
		z.TakingAmount = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.TakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "TakingAmount")
				return
			}
			z.TakingAmount = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FeeConfig")
			return
		}
		z.FeeConfig = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.FeeConfig))
			if err != nil {
				err = msgp.WrapError(err, "FeeConfig")
				return
			}
			z.FeeConfig = msgpencode.DecodeInt(zb0004)
		}
	}
	z.FeeRecipient, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "FeeRecipient")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FilledMakingAmount")
			return
		}
		z.FilledMakingAmount = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.FilledMakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "FilledMakingAmount")
				return
			}
			z.FilledMakingAmount = msgpencode.DecodeInt(zb0005)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "FilledTakingAmount")
			return
		}
		z.FilledTakingAmount = nil
	} else {
		{
			var zb0006 []byte
			zb0006, err = dc.ReadBytes(msgpencode.EncodeInt(z.FilledTakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "FilledTakingAmount")
				return
			}
			z.FilledTakingAmount = msgpencode.DecodeInt(zb0006)
		}
	}
	z.MakerTokenFeePercent, err = dc.ReadUint32()
	if err != nil {
		err = msgp.WrapError(err, "MakerTokenFeePercent")
		return
	}
	z.MakerAssetData, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "MakerAssetData")
		return
	}
	z.TakerAssetData, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "TakerAssetData")
		return
	}
	z.GetMakerAmount, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "GetMakerAmount")
		return
	}
	z.GetTakerAmount, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "GetTakerAmount")
		return
	}
	z.Predicate, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Predicate")
		return
	}
	z.Permit, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Permit")
		return
	}
	z.Interaction, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Interaction")
		return
	}
	z.ExpiredAt, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "ExpiredAt")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "AvailableMakingAmount")
			return
		}
		z.AvailableMakingAmount = nil
	} else {
		{
			var zb0007 []byte
			zb0007, err = dc.ReadBytes(msgpencode.EncodeInt(z.AvailableMakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "AvailableMakingAmount")
				return
			}
			z.AvailableMakingAmount = msgpencode.DecodeInt(zb0007)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "MakerBalanceAllowance")
			return
		}
		z.MakerBalanceAllowance = nil
	} else {
		{
			var zb0008 []byte
			zb0008, err = dc.ReadBytes(msgpencode.EncodeInt(z.MakerBalanceAllowance))
			if err != nil {
				err = msgp.WrapError(err, "MakerBalanceAllowance")
				return
			}
			z.MakerBalanceAllowance = msgpencode.DecodeInt(zb0008)
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *order) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 26
	err = en.Append(0xdc, 0x0, 0x1a)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	err = en.WriteString(z.ChainID)
	if err != nil {
		err = msgp.WrapError(err, "ChainID")
		return
	}
	err = en.WriteString(z.Salt)
	if err != nil {
		err = msgp.WrapError(err, "Salt")
		return
	}
	err = en.WriteString(z.Signature)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	err = en.WriteString(z.MakerAsset)
	if err != nil {
		err = msgp.WrapError(err, "MakerAsset")
		return
	}
	err = en.WriteString(z.TakerAsset)
	if err != nil {
		err = msgp.WrapError(err, "TakerAsset")
		return
	}
	err = en.WriteString(z.Maker)
	if err != nil {
		err = msgp.WrapError(err, "Maker")
		return
	}
	err = en.WriteString(z.Receiver)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	err = en.WriteString(z.AllowedSenders)
	if err != nil {
		err = msgp.WrapError(err, "AllowedSenders")
		return
	}
	if z.MakingAmount == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.MakingAmount))
		if err != nil {
			err = msgp.WrapError(err, "MakingAmount")
			return
		}
	}
	if z.TakingAmount == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.TakingAmount))
		if err != nil {
			err = msgp.WrapError(err, "TakingAmount")
			return
		}
	}
	if z.FeeConfig == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FeeConfig))
		if err != nil {
			err = msgp.WrapError(err, "FeeConfig")
			return
		}
	}
	err = en.WriteString(z.FeeRecipient)
	if err != nil {
		err = msgp.WrapError(err, "FeeRecipient")
		return
	}
	if z.FilledMakingAmount == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FilledMakingAmount))
		if err != nil {
			err = msgp.WrapError(err, "FilledMakingAmount")
			return
		}
	}
	if z.FilledTakingAmount == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.FilledTakingAmount))
		if err != nil {
			err = msgp.WrapError(err, "FilledTakingAmount")
			return
		}
	}
	err = en.WriteUint32(z.MakerTokenFeePercent)
	if err != nil {
		err = msgp.WrapError(err, "MakerTokenFeePercent")
		return
	}
	err = en.WriteString(z.MakerAssetData)
	if err != nil {
		err = msgp.WrapError(err, "MakerAssetData")
		return
	}
	err = en.WriteString(z.TakerAssetData)
	if err != nil {
		err = msgp.WrapError(err, "TakerAssetData")
		return
	}
	err = en.WriteString(z.GetMakerAmount)
	if err != nil {
		err = msgp.WrapError(err, "GetMakerAmount")
		return
	}
	err = en.WriteString(z.GetTakerAmount)
	if err != nil {
		err = msgp.WrapError(err, "GetTakerAmount")
		return
	}
	err = en.WriteString(z.Predicate)
	if err != nil {
		err = msgp.WrapError(err, "Predicate")
		return
	}
	err = en.WriteString(z.Permit)
	if err != nil {
		err = msgp.WrapError(err, "Permit")
		return
	}
	err = en.WriteString(z.Interaction)
	if err != nil {
		err = msgp.WrapError(err, "Interaction")
		return
	}
	err = en.WriteInt64(z.ExpiredAt)
	if err != nil {
		err = msgp.WrapError(err, "ExpiredAt")
		return
	}
	if z.AvailableMakingAmount == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.AvailableMakingAmount))
		if err != nil {
			err = msgp.WrapError(err, "AvailableMakingAmount")
			return
		}
	}
	if z.MakerBalanceAllowance == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.MakerBalanceAllowance))
		if err != nil {
			err = msgp.WrapError(err, "MakerBalanceAllowance")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *order) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 26
	o = append(o, 0xdc, 0x0, 0x1a)
	o = msgp.AppendInt64(o, z.ID)
	o = msgp.AppendString(o, z.ChainID)
	o = msgp.AppendString(o, z.Salt)
	o = msgp.AppendString(o, z.Signature)
	o = msgp.AppendString(o, z.MakerAsset)
	o = msgp.AppendString(o, z.TakerAsset)
	o = msgp.AppendString(o, z.Maker)
	o = msgp.AppendString(o, z.Receiver)
	o = msgp.AppendString(o, z.AllowedSenders)
	if z.MakingAmount == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.MakingAmount))
	}
	if z.TakingAmount == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.TakingAmount))
	}
	if z.FeeConfig == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FeeConfig))
	}
	o = msgp.AppendString(o, z.FeeRecipient)
	if z.FilledMakingAmount == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FilledMakingAmount))
	}
	if z.FilledTakingAmount == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.FilledTakingAmount))
	}
	o = msgp.AppendUint32(o, z.MakerTokenFeePercent)
	o = msgp.AppendString(o, z.MakerAssetData)
	o = msgp.AppendString(o, z.TakerAssetData)
	o = msgp.AppendString(o, z.GetMakerAmount)
	o = msgp.AppendString(o, z.GetTakerAmount)
	o = msgp.AppendString(o, z.Predicate)
	o = msgp.AppendString(o, z.Permit)
	o = msgp.AppendString(o, z.Interaction)
	o = msgp.AppendInt64(o, z.ExpiredAt)
	if z.AvailableMakingAmount == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.AvailableMakingAmount))
	}
	if z.MakerBalanceAllowance == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.MakerBalanceAllowance))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *order) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 26 {
		err = msgp.ArrayError{Wanted: 26, Got: zb0001}
		return
	}
	z.ID, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.ChainID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ChainID")
		return
	}
	z.Salt, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Salt")
		return
	}
	z.Signature, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Signature")
		return
	}
	z.MakerAsset, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MakerAsset")
		return
	}
	z.TakerAsset, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TakerAsset")
		return
	}
	z.Maker, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Maker")
		return
	}
	z.Receiver, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Receiver")
		return
	}
	z.AllowedSenders, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "AllowedSenders")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.MakingAmount = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.MakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "MakingAmount")
				return
			}
			z.MakingAmount = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.TakingAmount = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.TakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "TakingAmount")
				return
			}
			z.TakingAmount = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FeeConfig = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FeeConfig))
			if err != nil {
				err = msgp.WrapError(err, "FeeConfig")
				return
			}
			z.FeeConfig = msgpencode.DecodeInt(zb0004)
		}
	}
	z.FeeRecipient, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "FeeRecipient")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FilledMakingAmount = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FilledMakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "FilledMakingAmount")
				return
			}
			z.FilledMakingAmount = msgpencode.DecodeInt(zb0005)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.FilledTakingAmount = nil
	} else {
		{
			var zb0006 []byte
			zb0006, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.FilledTakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "FilledTakingAmount")
				return
			}
			z.FilledTakingAmount = msgpencode.DecodeInt(zb0006)
		}
	}
	z.MakerTokenFeePercent, bts, err = msgp.ReadUint32Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MakerTokenFeePercent")
		return
	}
	z.MakerAssetData, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "MakerAssetData")
		return
	}
	z.TakerAssetData, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "TakerAssetData")
		return
	}
	z.GetMakerAmount, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "GetMakerAmount")
		return
	}
	z.GetTakerAmount, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "GetTakerAmount")
		return
	}
	z.Predicate, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Predicate")
		return
	}
	z.Permit, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Permit")
		return
	}
	z.Interaction, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Interaction")
		return
	}
	z.ExpiredAt, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ExpiredAt")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.AvailableMakingAmount = nil
	} else {
		{
			var zb0007 []byte
			zb0007, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.AvailableMakingAmount))
			if err != nil {
				err = msgp.WrapError(err, "AvailableMakingAmount")
				return
			}
			z.AvailableMakingAmount = msgpencode.DecodeInt(zb0007)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.MakerBalanceAllowance = nil
	} else {
		{
			var zb0008 []byte
			zb0008, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.MakerBalanceAllowance))
			if err != nil {
				err = msgp.WrapError(err, "MakerBalanceAllowance")
				return
			}
			z.MakerBalanceAllowance = msgpencode.DecodeInt(zb0008)
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *order) Msgsize() (s int) {
	s = 3 + msgp.Int64Size + msgp.StringPrefixSize + len(z.ChainID) + msgp.StringPrefixSize + len(z.Salt) + msgp.StringPrefixSize + len(z.Signature) + msgp.StringPrefixSize + len(z.MakerAsset) + msgp.StringPrefixSize + len(z.TakerAsset) + msgp.StringPrefixSize + len(z.Maker) + msgp.StringPrefixSize + len(z.Receiver) + msgp.StringPrefixSize + len(z.AllowedSenders)
	if z.MakingAmount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.MakingAmount))
	}
	if z.TakingAmount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.TakingAmount))
	}
	if z.FeeConfig == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FeeConfig))
	}
	s += msgp.StringPrefixSize + len(z.FeeRecipient)
	if z.FilledMakingAmount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FilledMakingAmount))
	}
	if z.FilledTakingAmount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.FilledTakingAmount))
	}
	s += msgp.Uint32Size + msgp.StringPrefixSize + len(z.MakerAssetData) + msgp.StringPrefixSize + len(z.TakerAssetData) + msgp.StringPrefixSize + len(z.GetMakerAmount) + msgp.StringPrefixSize + len(z.GetTakerAmount) + msgp.StringPrefixSize + len(z.Predicate) + msgp.StringPrefixSize + len(z.Permit) + msgp.StringPrefixSize + len(z.Interaction) + msgp.Int64Size
	if z.AvailableMakingAmount == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.AvailableMakingAmount))
	}
	if z.MakerBalanceAllowance == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.MakerBalanceAllowance))
	}
	return
}
