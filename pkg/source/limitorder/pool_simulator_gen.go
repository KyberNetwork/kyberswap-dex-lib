package limitorder

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "ordersMapping")
		return
	}
	if z.ordersMapping == nil {
		z.ordersMapping = make(map[string]*order, zb0002)
	} else if len(z.ordersMapping) > 0 {
		for key := range z.ordersMapping {
			delete(z.ordersMapping, key)
		}
	}
	var field []byte
	_ = field
	for zb0002 > 0 {
		zb0002--
		var za0001 string
		var za0002 *order
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "ordersMapping")
			return
		}
		if dc.IsNil() {
			err = dc.ReadNil()
			if err != nil {
				err = msgp.WrapError(err, "ordersMapping", za0001)
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(order)
			}
			err = za0002.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ordersMapping", za0001)
				return
			}
		}
		z.ordersMapping[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "sellOrderIDs")
		return
	}
	if cap(z.sellOrderIDs) >= int(zb0003) {
		z.sellOrderIDs = (z.sellOrderIDs)[:zb0003]
	} else {
		z.sellOrderIDs = make([]int64, zb0003)
	}
	for za0003 := range z.sellOrderIDs {
		z.sellOrderIDs[za0003], err = dc.ReadInt64()
		if err != nil {
			err = msgp.WrapError(err, "sellOrderIDs", za0003)
			return
		}
	}
	var zb0004 uint32
	zb0004, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "buyOrderIDs")
		return
	}
	if cap(z.buyOrderIDs) >= int(zb0004) {
		z.buyOrderIDs = (z.buyOrderIDs)[:zb0004]
	} else {
		z.buyOrderIDs = make([]int64, zb0004)
	}
	for za0004 := range z.buyOrderIDs {
		z.buyOrderIDs[za0004], err = dc.ReadInt64()
		if err != nil {
			err = msgp.WrapError(err, "buyOrderIDs", za0004)
			return
		}
	}
	z.contractAddress, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "contractAddress")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 5
	err = en.Append(0x95)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ordersMapping)))
	if err != nil {
		err = msgp.WrapError(err, "ordersMapping")
		return
	}
	for za0001, za0002 := range z.ordersMapping {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "ordersMapping")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ordersMapping", za0001)
				return
			}
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.sellOrderIDs)))
	if err != nil {
		err = msgp.WrapError(err, "sellOrderIDs")
		return
	}
	for za0003 := range z.sellOrderIDs {
		err = en.WriteInt64(z.sellOrderIDs[za0003])
		if err != nil {
			err = msgp.WrapError(err, "sellOrderIDs", za0003)
			return
		}
	}
	err = en.WriteArrayHeader(uint32(len(z.buyOrderIDs)))
	if err != nil {
		err = msgp.WrapError(err, "buyOrderIDs")
		return
	}
	for za0004 := range z.buyOrderIDs {
		err = en.WriteInt64(z.buyOrderIDs[za0004])
		if err != nil {
			err = msgp.WrapError(err, "buyOrderIDs", za0004)
			return
		}
	}
	err = en.WriteString(z.contractAddress)
	if err != nil {
		err = msgp.WrapError(err, "contractAddress")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 5
	o = append(o, 0x95)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.ordersMapping)))
	for za0001, za0002 := range z.ordersMapping {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ordersMapping", za0001)
				return
			}
		}
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.sellOrderIDs)))
	for za0003 := range z.sellOrderIDs {
		o = msgp.AppendInt64(o, z.sellOrderIDs[za0003])
	}
	o = msgp.AppendArrayHeader(o, uint32(len(z.buyOrderIDs)))
	for za0004 := range z.buyOrderIDs {
		o = msgp.AppendInt64(o, z.buyOrderIDs[za0004])
	}
	o = msgp.AppendString(o, z.contractAddress)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 5 {
		err = msgp.ArrayError{Wanted: 5, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ordersMapping")
		return
	}
	if z.ordersMapping == nil {
		z.ordersMapping = make(map[string]*order, zb0002)
	} else if len(z.ordersMapping) > 0 {
		for key := range z.ordersMapping {
			delete(z.ordersMapping, key)
		}
	}
	var field []byte
	_ = field
	for zb0002 > 0 {
		var za0001 string
		var za0002 *order
		zb0002--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "ordersMapping")
			return
		}
		if msgp.IsNil(bts) {
			bts, err = msgp.ReadNilBytes(bts)
			if err != nil {
				return
			}
			za0002 = nil
		} else {
			if za0002 == nil {
				za0002 = new(order)
			}
			bts, err = za0002.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ordersMapping", za0001)
				return
			}
		}
		z.ordersMapping[za0001] = za0002
	}
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "sellOrderIDs")
		return
	}
	if cap(z.sellOrderIDs) >= int(zb0003) {
		z.sellOrderIDs = (z.sellOrderIDs)[:zb0003]
	} else {
		z.sellOrderIDs = make([]int64, zb0003)
	}
	for za0003 := range z.sellOrderIDs {
		z.sellOrderIDs[za0003], bts, err = msgp.ReadInt64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "sellOrderIDs", za0003)
			return
		}
	}
	var zb0004 uint32
	zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "buyOrderIDs")
		return
	}
	if cap(z.buyOrderIDs) >= int(zb0004) {
		z.buyOrderIDs = (z.buyOrderIDs)[:zb0004]
	} else {
		z.buyOrderIDs = make([]int64, zb0004)
	}
	for za0004 := range z.buyOrderIDs {
		z.buyOrderIDs[za0004], bts, err = msgp.ReadInt64Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "buyOrderIDs", za0004)
			return
		}
	}
	z.contractAddress, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "contractAddress")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.MapHeaderSize
	if z.ordersMapping != nil {
		for za0001, za0002 := range z.ordersMapping {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += msgp.ArrayHeaderSize + (len(z.sellOrderIDs) * (msgp.Int64Size)) + msgp.ArrayHeaderSize + (len(z.buyOrderIDs) * (msgp.Int64Size)) + msgp.StringPrefixSize + len(z.contractAddress)
	return
}
