package wombatlsd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/msgpencode"
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/wombat"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PoolSimulator) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	err = z.Pool.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "haircutRate")
			return
		}
		z.haircutRate = nil
	} else {
		{
			var zb0002 []byte
			zb0002, err = dc.ReadBytes(msgpencode.EncodeInt(z.haircutRate))
			if err != nil {
				err = msgp.WrapError(err, "haircutRate")
				return
			}
			z.haircutRate = msgpencode.DecodeInt(zb0002)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "ampFactor")
			return
		}
		z.ampFactor = nil
	} else {
		{
			var zb0003 []byte
			zb0003, err = dc.ReadBytes(msgpencode.EncodeInt(z.ampFactor))
			if err != nil {
				err = msgp.WrapError(err, "ampFactor")
				return
			}
			z.ampFactor = msgpencode.DecodeInt(zb0003)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "startCovRatio")
			return
		}
		z.startCovRatio = nil
	} else {
		{
			var zb0004 []byte
			zb0004, err = dc.ReadBytes(msgpencode.EncodeInt(z.startCovRatio))
			if err != nil {
				err = msgp.WrapError(err, "startCovRatio")
				return
			}
			z.startCovRatio = msgpencode.DecodeInt(zb0004)
		}
	}
	if dc.IsNil() {
		err = dc.ReadNil()
		if err != nil {
			err = msgp.WrapError(err, "endCovRatio")
			return
		}
		z.endCovRatio = nil
	} else {
		{
			var zb0005 []byte
			zb0005, err = dc.ReadBytes(msgpencode.EncodeInt(z.endCovRatio))
			if err != nil {
				err = msgp.WrapError(err, "endCovRatio")
				return
			}
			z.endCovRatio = msgpencode.DecodeInt(zb0005)
		}
	}
	var zb0006 uint32
	zb0006, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err, "assets")
		return
	}
	if z.assets == nil {
		z.assets = make(map[string]wombat.Asset, zb0006)
	} else if len(z.assets) > 0 {
		for key := range z.assets {
			delete(z.assets, key)
		}
	}
	var field []byte
	_ = field
	for zb0006 > 0 {
		zb0006--
		var za0001 string
		var za0002 wombat.Asset
		za0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "assets")
			return
		}
		err = za0002.DecodeMsg(dc)
		if err != nil {
			err = msgp.WrapError(err, "assets", za0001)
			return
		}
		z.assets[za0001] = za0002
	}
	err = z.gas.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PoolSimulator) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 8
	err = en.Append(0x98)
	if err != nil {
		return
	}
	err = z.Pool.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	err = en.WriteBool(z.paused)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if z.haircutRate == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.haircutRate))
		if err != nil {
			err = msgp.WrapError(err, "haircutRate")
			return
		}
	}
	if z.ampFactor == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.ampFactor))
		if err != nil {
			err = msgp.WrapError(err, "ampFactor")
			return
		}
	}
	if z.startCovRatio == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.startCovRatio))
		if err != nil {
			err = msgp.WrapError(err, "startCovRatio")
			return
		}
	}
	if z.endCovRatio == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = en.WriteBytes(msgpencode.EncodeInt(z.endCovRatio))
		if err != nil {
			err = msgp.WrapError(err, "endCovRatio")
			return
		}
	}
	err = en.WriteMapHeader(uint32(len(z.assets)))
	if err != nil {
		err = msgp.WrapError(err, "assets")
		return
	}
	for za0001, za0002 := range z.assets {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "assets")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "assets", za0001)
			return
		}
	}
	err = z.gas.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PoolSimulator) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 8
	o = append(o, 0x98)
	o, err = z.Pool.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	o = msgp.AppendBool(o, z.paused)
	if z.haircutRate == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.haircutRate))
	}
	if z.ampFactor == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.ampFactor))
	}
	if z.startCovRatio == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.startCovRatio))
	}
	if z.endCovRatio == nil {
		o = msgp.AppendNil(o)
	} else {
		o = msgp.AppendBytes(o, msgpencode.EncodeInt(z.endCovRatio))
	}
	o = msgp.AppendMapHeader(o, uint32(len(z.assets)))
	for za0001, za0002 := range z.assets {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "assets", za0001)
			return
		}
	}
	o, err = z.gas.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PoolSimulator) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 8 {
		err = msgp.ArrayError{Wanted: 8, Got: zb0001}
		return
	}
	bts, err = z.Pool.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	z.paused, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "paused")
		return
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.haircutRate = nil
	} else {
		{
			var zb0002 []byte
			zb0002, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.haircutRate))
			if err != nil {
				err = msgp.WrapError(err, "haircutRate")
				return
			}
			z.haircutRate = msgpencode.DecodeInt(zb0002)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.ampFactor = nil
	} else {
		{
			var zb0003 []byte
			zb0003, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.ampFactor))
			if err != nil {
				err = msgp.WrapError(err, "ampFactor")
				return
			}
			z.ampFactor = msgpencode.DecodeInt(zb0003)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.startCovRatio = nil
	} else {
		{
			var zb0004 []byte
			zb0004, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.startCovRatio))
			if err != nil {
				err = msgp.WrapError(err, "startCovRatio")
				return
			}
			z.startCovRatio = msgpencode.DecodeInt(zb0004)
		}
	}
	if msgp.IsNil(bts) {
		bts, err = msgp.ReadNilBytes(bts)
		if err != nil {
			return
		}
		z.endCovRatio = nil
	} else {
		{
			var zb0005 []byte
			zb0005, bts, err = msgp.ReadBytesBytes(bts, msgpencode.EncodeInt(z.endCovRatio))
			if err != nil {
				err = msgp.WrapError(err, "endCovRatio")
				return
			}
			z.endCovRatio = msgpencode.DecodeInt(zb0005)
		}
	}
	var zb0006 uint32
	zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "assets")
		return
	}
	if z.assets == nil {
		z.assets = make(map[string]wombat.Asset, zb0006)
	} else if len(z.assets) > 0 {
		for key := range z.assets {
			delete(z.assets, key)
		}
	}
	var field []byte
	_ = field
	for zb0006 > 0 {
		var za0001 string
		var za0002 wombat.Asset
		zb0006--
		za0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "assets")
			return
		}
		bts, err = za0002.UnmarshalMsg(bts)
		if err != nil {
			err = msgp.WrapError(err, "assets", za0001)
			return
		}
		z.assets[za0001] = za0002
	}
	bts, err = z.gas.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "gas")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PoolSimulator) Msgsize() (s int) {
	s = 1 + z.Pool.Msgsize() + msgp.BoolSize
	if z.haircutRate == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.haircutRate))
	}
	if z.ampFactor == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.ampFactor))
	}
	if z.startCovRatio == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.startCovRatio))
	}
	if z.endCovRatio == nil {
		s += msgp.NilSize
	} else {
		s += msgp.BytesPrefixSize + len(msgpencode.EncodeInt(z.endCovRatio))
	}
	s += msgp.MapHeaderSize
	if z.assets != nil {
		for za0001, za0002 := range z.assets {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	s += z.gas.Msgsize()
	return
}
