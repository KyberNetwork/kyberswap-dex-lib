// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/repository/pool (interfaces: IPoolClient)

// Package pool is a generated GoMock package.
package pool

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolClient is a mock of IPoolClient interface.
type MockIPoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolClientMockRecorder
}

// MockIPoolClientMockRecorder is the mock recorder for MockIPoolClient.
type MockIPoolClientMockRecorder struct {
	mock *MockIPoolClient
}

// NewMockIPoolClient creates a new mock instance.
func NewMockIPoolClient(ctrl *gomock.Controller) *MockIPoolClient {
	mock := &MockIPoolClient{ctrl: ctrl}
	mock.recorder = &MockIPoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolClient) EXPECT() *MockIPoolClientMockRecorder {
	return m.recorder
}

// GetFaultyPools mocks base method.
func (m *MockIPoolClient) GetFaultyPools(arg0 context.Context, arg1, arg2 int64) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaultyPools", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFaultyPools indicates an expected call of GetFaultyPools.
func (mr *MockIPoolClientMockRecorder) GetFaultyPools(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaultyPools", reflect.TypeOf((*MockIPoolClient)(nil).GetFaultyPools), arg0, arg1, arg2)
}

// TrackFaultyPools mocks base method.
func (m *MockIPoolClient) TrackFaultyPools(arg0 context.Context, arg1 []entity.FaultyPoolTracker) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrackFaultyPools", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TrackFaultyPools indicates an expected call of TrackFaultyPools.
func (mr *MockIPoolClientMockRecorder) TrackFaultyPools(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrackFaultyPools", reflect.TypeOf((*MockIPoolClient)(nil).TrackFaultyPools), arg0, arg1)
}
