// Code generated by MockGen. DO NOT EDIT.
// Source: dmm-aggregator-backend/pkg/crypto (interfaces: KeyPairStorage)

// Package crypto is a generated GoMock package.
package crypto

import (
	context "context"
	reflect "reflect"

	crypto "github.com/KyberNetwork/kyberswap-aggregator/pkg/crypto"

	gomock "github.com/golang/mock/gomock"
)

// MockKeyPairStorage is a mock of KeyPairStorage interface.
type MockKeyPairStorage struct {
	ctrl     *gomock.Controller
	recorder *MockKeyPairStorageMockRecorder
}

// MockKeyPairStorageMockRecorder is the mock recorder for MockKeyPairStorage.
type MockKeyPairStorageMockRecorder struct {
	mock *MockKeyPairStorage
}

// NewMockKeyPairStorage creates a new mock instance.
func NewMockKeyPairStorage(ctrl *gomock.Controller) *MockKeyPairStorage {
	mock := &MockKeyPairStorage{ctrl: ctrl}
	mock.recorder = &MockKeyPairStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyPairStorage) EXPECT() *MockKeyPairStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockKeyPairStorage) Get(arg0 context.Context, arg1 string) (*crypto.KeyPairInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*crypto.KeyPairInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockKeyPairStorageMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockKeyPairStorage)(nil).Get), arg0, arg1)
}
