// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/validator (interfaces: IBlackjackRepository)

// Package validator is a generated GoMock package.
package validator

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIBlackjackRepository is a mock of IBlackjackRepository interface.
type MockIBlackjackRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBlackjackRepositoryMockRecorder
}

// MockIBlackjackRepositoryMockRecorder is the mock recorder for MockIBlackjackRepository.
type MockIBlackjackRepositoryMockRecorder struct {
	mock *MockIBlackjackRepository
}

// NewMockIBlackjackRepository creates a new mock instance.
func NewMockIBlackjackRepository(ctrl *gomock.Controller) *MockIBlackjackRepository {
	mock := &MockIBlackjackRepository{ctrl: ctrl}
	mock.recorder = &MockIBlackjackRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBlackjackRepository) EXPECT() *MockIBlackjackRepositoryMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockIBlackjackRepository) Check(arg0 context.Context, arg1 []string) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockIBlackjackRepositoryMockRecorder) Check(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockIBlackjackRepository)(nil).Check), arg0, arg1)
}
