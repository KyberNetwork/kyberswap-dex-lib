// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/poolmanager (interfaces: IPoolFactory)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/poolmanager/pool_factory.go -package poolmanager github.com/KyberNetwork/router-service/internal/pkg/usecase/poolmanager IPoolFactory
//

// Package poolmanager is a generated GoMock package.
package poolmanager

import (
	context "context"
	big "math/big"
	reflect "reflect"

	entity "github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	pool "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool"
	types "github.com/KyberNetwork/router-service/internal/pkg/usecase/types"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolFactory is a mock of IPoolFactory interface.
type MockIPoolFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolFactoryMockRecorder
	isgomock struct{}
}

// MockIPoolFactoryMockRecorder is the mock recorder for MockIPoolFactory.
type MockIPoolFactoryMockRecorder struct {
	mock *MockIPoolFactory
}

// NewMockIPoolFactory creates a new mock instance.
func NewMockIPoolFactory(ctrl *gomock.Controller) *MockIPoolFactory {
	mock := &MockIPoolFactory{ctrl: ctrl}
	mock.recorder = &MockIPoolFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolFactory) EXPECT() *MockIPoolFactoryMockRecorder {
	return m.recorder
}

// NewPoolByAddress mocks base method.
func (m *MockIPoolFactory) NewPoolByAddress(ctx context.Context, pools []*entity.Pool, stateRoot common.Hash) map[string]pool.IPoolSimulator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPoolByAddress", ctx, pools, stateRoot)
	ret0, _ := ret[0].(map[string]pool.IPoolSimulator)
	return ret0
}

// NewPoolByAddress indicates an expected call of NewPoolByAddress.
func (mr *MockIPoolFactoryMockRecorder) NewPoolByAddress(ctx, pools, stateRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPoolByAddress", reflect.TypeOf((*MockIPoolFactory)(nil).NewPoolByAddress), ctx, pools, stateRoot)
}

// NewPools mocks base method.
func (m *MockIPoolFactory) NewPools(ctx context.Context, pools []*entity.Pool, stateRoot common.Hash) []pool.IPoolSimulator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPools", ctx, pools, stateRoot)
	ret0, _ := ret[0].([]pool.IPoolSimulator)
	return ret0
}

// NewPools indicates an expected call of NewPools.
func (mr *MockIPoolFactoryMockRecorder) NewPools(ctx, pools, stateRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPools", reflect.TypeOf((*MockIPoolFactory)(nil).NewPools), ctx, pools, stateRoot)
}

// NewSwapLimit mocks base method.
func (m *MockIPoolFactory) NewSwapLimit(limits map[string]map[string]*big.Int, poolManagerExtraData types.PoolManagerExtraData) map[string]pool.SwapLimit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSwapLimit", limits, poolManagerExtraData)
	ret0, _ := ret[0].(map[string]pool.SwapLimit)
	return ret0
}

// NewSwapLimit indicates an expected call of NewSwapLimit.
func (mr *MockIPoolFactoryMockRecorder) NewSwapLimit(limits, poolManagerExtraData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSwapLimit", reflect.TypeOf((*MockIPoolFactory)(nil).NewSwapLimit), limits, poolManagerExtraData)
}
