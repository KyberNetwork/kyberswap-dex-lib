// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/poolmanager (interfaces: IGetPoolsIncludingBasePools)

// Package poolmanager is a generated GoMock package.
package poolmanager

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	getpools "github.com/KyberNetwork/router-service/internal/pkg/usecase/getpools"
	gomock "github.com/golang/mock/gomock"
)

// MockIGetPoolsIncludingBasePools is a mock of IGetPoolsIncludingBasePools interface.
type MockIGetPoolsIncludingBasePools struct {
	ctrl     *gomock.Controller
	recorder *MockIGetPoolsIncludingBasePoolsMockRecorder
}

// MockIGetPoolsIncludingBasePoolsMockRecorder is the mock recorder for MockIGetPoolsIncludingBasePools.
type MockIGetPoolsIncludingBasePoolsMockRecorder struct {
	mock *MockIGetPoolsIncludingBasePools
}

// NewMockIGetPoolsIncludingBasePools creates a new mock instance.
func NewMockIGetPoolsIncludingBasePools(ctrl *gomock.Controller) *MockIGetPoolsIncludingBasePools {
	mock := &MockIGetPoolsIncludingBasePools{ctrl: ctrl}
	mock.recorder = &MockIGetPoolsIncludingBasePoolsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetPoolsIncludingBasePools) EXPECT() *MockIGetPoolsIncludingBasePoolsMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIGetPoolsIncludingBasePools) Handle(arg0 context.Context, arg1 []string, arg2 getpools.PoolFilter) ([]*entity.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIGetPoolsIncludingBasePoolsMockRecorder) Handle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIGetPoolsIncludingBasePools)(nil).Handle), arg0, arg1, arg2)
}
