// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase (interfaces: IPriceRepository)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIPriceRepository is a mock of IPriceRepository interface.
type MockIPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPriceRepositoryMockRecorder
}

// MockIPriceRepositoryMockRecorder is the mock recorder for MockIPriceRepository.
type MockIPriceRepositoryMockRecorder struct {
	mock *MockIPriceRepository
}

// NewMockIPriceRepository creates a new mock instance.
func NewMockIPriceRepository(ctrl *gomock.Controller) *MockIPriceRepository {
	mock := &MockIPriceRepository{ctrl: ctrl}
	mock.recorder = &MockIPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPriceRepository) EXPECT() *MockIPriceRepositoryMockRecorder {
	return m.recorder
}

// FindByAddresses mocks base method.
func (m *MockIPriceRepository) FindByAddresses(arg0 context.Context, arg1 []string) ([]*entity.Price, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Price)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockIPriceRepositoryMockRecorder) FindByAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockIPriceRepository)(nil).FindByAddresses), arg0, arg1)
}
