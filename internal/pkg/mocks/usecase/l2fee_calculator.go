// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/usecase (interfaces: IL2FeeCalculator)

// Package usecase is a generated GoMock package.
package usecase

import (
	big "math/big"
	reflect "reflect"

	entity "github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIL2FeeCalculator is a mock of IL2FeeCalculator interface.
type MockIL2FeeCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockIL2FeeCalculatorMockRecorder
}

// MockIL2FeeCalculatorMockRecorder is the mock recorder for MockIL2FeeCalculator.
type MockIL2FeeCalculatorMockRecorder struct {
	mock *MockIL2FeeCalculator
}

// NewMockIL2FeeCalculator creates a new mock instance.
func NewMockIL2FeeCalculator(ctrl *gomock.Controller) *MockIL2FeeCalculator {
	mock := &MockIL2FeeCalculator{ctrl: ctrl}
	mock.recorder = &MockIL2FeeCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIL2FeeCalculator) EXPECT() *MockIL2FeeCalculatorMockRecorder {
	return m.recorder
}

// CreateRawTxFromInputData mocks base method.
func (m *MockIL2FeeCalculator) CreateRawTxFromInputData(arg0 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRawTxFromInputData", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRawTxFromInputData indicates an expected call of CreateRawTxFromInputData.
func (mr *MockIL2FeeCalculatorMockRecorder) CreateRawTxFromInputData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRawTxFromInputData", reflect.TypeOf((*MockIL2FeeCalculator)(nil).CreateRawTxFromInputData), arg0)
}

// GetL1Fee mocks base method.
func (m *MockIL2FeeCalculator) GetL1Fee(arg0 []byte) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL1Fee", arg0)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// GetL1Fee indicates an expected call of GetL1Fee.
func (mr *MockIL2FeeCalculatorMockRecorder) GetL1Fee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL1Fee", reflect.TypeOf((*MockIL2FeeCalculator)(nil).GetL1Fee), arg0)
}

// SetParams mocks base method.
func (m *MockIL2FeeCalculator) SetParams(arg0 *entity.L2Fee) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetParams", arg0)
}

// SetParams indicates an expected call of SetParams.
func (mr *MockIL2FeeCalculatorMockRecorder) SetParams(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetParams", reflect.TypeOf((*MockIL2FeeCalculator)(nil).SetParams), arg0)
}
