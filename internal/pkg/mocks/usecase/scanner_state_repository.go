// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase (interfaces: IScannerStateRepository)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	big "math/big"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIScannerStateRepository is a mock of IScannerStateRepository interface.
type MockIScannerStateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIScannerStateRepositoryMockRecorder
}

// MockIScannerStateRepositoryMockRecorder is the mock recorder for MockIScannerStateRepository.
type MockIScannerStateRepositoryMockRecorder struct {
	mock *MockIScannerStateRepository
}

// NewMockIScannerStateRepository creates a new mock instance.
func NewMockIScannerStateRepository(ctrl *gomock.Controller) *MockIScannerStateRepository {
	mock := &MockIScannerStateRepository{ctrl: ctrl}
	mock.recorder = &MockIScannerStateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIScannerStateRepository) EXPECT() *MockIScannerStateRepositoryMockRecorder {
	return m.recorder
}

// GetGasPrice mocks base method.
func (m *MockIScannerStateRepository) GetGasPrice(arg0 context.Context) (*big.Float, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasPrice", arg0)
	ret0, _ := ret[0].(*big.Float)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasPrice indicates an expected call of GetGasPrice.
func (mr *MockIScannerStateRepositoryMockRecorder) GetGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasPrice", reflect.TypeOf((*MockIScannerStateRepository)(nil).GetGasPrice), arg0)
}

// GetL2Fee mocks base method.
func (m *MockIScannerStateRepository) GetL2Fee(arg0 context.Context) (*entity.L2Fee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL2Fee", arg0)
	ret0, _ := ret[0].(*entity.L2Fee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL2Fee indicates an expected call of GetL2Fee.
func (mr *MockIScannerStateRepositoryMockRecorder) GetL2Fee(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL2Fee", reflect.TypeOf((*MockIScannerStateRepository)(nil).GetL2Fee), arg0)
}
