// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool (interfaces: IPoolSimulator)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/usecase/pool/pool_simulator.go -package usecase github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool IPoolSimulator
//

// Package usecase is a generated GoMock package.
package usecase

import (
	big "math/big"
	reflect "reflect"

	pool "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolSimulator is a mock of IPoolSimulator interface.
type MockIPoolSimulator struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolSimulatorMockRecorder
	isgomock struct{}
}

// MockIPoolSimulatorMockRecorder is the mock recorder for MockIPoolSimulator.
type MockIPoolSimulatorMockRecorder struct {
	mock *MockIPoolSimulator
}

// NewMockIPoolSimulator creates a new mock instance.
func NewMockIPoolSimulator(ctrl *gomock.Controller) *MockIPoolSimulator {
	mock := &MockIPoolSimulator{ctrl: ctrl}
	mock.recorder = &MockIPoolSimulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolSimulator) EXPECT() *MockIPoolSimulatorMockRecorder {
	return m.recorder
}

// CalcAmountOut mocks base method.
func (m *MockIPoolSimulator) CalcAmountOut(params pool.CalcAmountOutParams) (*pool.CalcAmountOutResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcAmountOut", params)
	ret0, _ := ret[0].(*pool.CalcAmountOutResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcAmountOut indicates an expected call of CalcAmountOut.
func (mr *MockIPoolSimulatorMockRecorder) CalcAmountOut(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcAmountOut", reflect.TypeOf((*MockIPoolSimulator)(nil).CalcAmountOut), params)
}

// CalculateLimit mocks base method.
func (m *MockIPoolSimulator) CalculateLimit() map[string]*big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateLimit")
	ret0, _ := ret[0].(map[string]*big.Int)
	return ret0
}

// CalculateLimit indicates an expected call of CalculateLimit.
func (mr *MockIPoolSimulatorMockRecorder) CalculateLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateLimit", reflect.TypeOf((*MockIPoolSimulator)(nil).CalculateLimit))
}

// CanSwapFrom mocks base method.
func (m *MockIPoolSimulator) CanSwapFrom(address string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSwapFrom", address)
	ret0, _ := ret[0].([]string)
	return ret0
}

// CanSwapFrom indicates an expected call of CanSwapFrom.
func (mr *MockIPoolSimulatorMockRecorder) CanSwapFrom(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSwapFrom", reflect.TypeOf((*MockIPoolSimulator)(nil).CanSwapFrom), address)
}

// CanSwapTo mocks base method.
func (m *MockIPoolSimulator) CanSwapTo(address string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CanSwapTo", address)
	ret0, _ := ret[0].([]string)
	return ret0
}

// CanSwapTo indicates an expected call of CanSwapTo.
func (mr *MockIPoolSimulatorMockRecorder) CanSwapTo(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanSwapTo", reflect.TypeOf((*MockIPoolSimulator)(nil).CanSwapTo), address)
}

// CloneState mocks base method.
func (m *MockIPoolSimulator) CloneState() pool.IPoolSimulator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneState")
	ret0, _ := ret[0].(pool.IPoolSimulator)
	return ret0
}

// CloneState indicates an expected call of CloneState.
func (mr *MockIPoolSimulatorMockRecorder) CloneState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneState", reflect.TypeOf((*MockIPoolSimulator)(nil).CloneState))
}

// GetAddress mocks base method.
func (m *MockIPoolSimulator) GetAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIPoolSimulatorMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIPoolSimulator)(nil).GetAddress))
}

// GetApprovalAddress mocks base method.
func (m *MockIPoolSimulator) GetApprovalAddress(tokenIn, tokenOut string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovalAddress", tokenIn, tokenOut)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetApprovalAddress indicates an expected call of GetApprovalAddress.
func (mr *MockIPoolSimulatorMockRecorder) GetApprovalAddress(tokenIn, tokenOut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovalAddress", reflect.TypeOf((*MockIPoolSimulator)(nil).GetApprovalAddress), tokenIn, tokenOut)
}

// GetExchange mocks base method.
func (m *MockIPoolSimulator) GetExchange() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchange")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExchange indicates an expected call of GetExchange.
func (mr *MockIPoolSimulatorMockRecorder) GetExchange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchange", reflect.TypeOf((*MockIPoolSimulator)(nil).GetExchange))
}

// GetMetaInfo mocks base method.
func (m *MockIPoolSimulator) GetMetaInfo(tokenIn, tokenOut string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetaInfo", tokenIn, tokenOut)
	ret0, _ := ret[0].(any)
	return ret0
}

// GetMetaInfo indicates an expected call of GetMetaInfo.
func (mr *MockIPoolSimulatorMockRecorder) GetMetaInfo(tokenIn, tokenOut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetaInfo", reflect.TypeOf((*MockIPoolSimulator)(nil).GetMetaInfo), tokenIn, tokenOut)
}

// GetReserves mocks base method.
func (m *MockIPoolSimulator) GetReserves() []*big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReserves")
	ret0, _ := ret[0].([]*big.Int)
	return ret0
}

// GetReserves indicates an expected call of GetReserves.
func (mr *MockIPoolSimulatorMockRecorder) GetReserves() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReserves", reflect.TypeOf((*MockIPoolSimulator)(nil).GetReserves))
}

// GetTokenIndex mocks base method.
func (m *MockIPoolSimulator) GetTokenIndex(address string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenIndex", address)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTokenIndex indicates an expected call of GetTokenIndex.
func (mr *MockIPoolSimulatorMockRecorder) GetTokenIndex(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenIndex", reflect.TypeOf((*MockIPoolSimulator)(nil).GetTokenIndex), address)
}

// GetTokens mocks base method.
func (m *MockIPoolSimulator) GetTokens() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokens")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetTokens indicates an expected call of GetTokens.
func (mr *MockIPoolSimulatorMockRecorder) GetTokens() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokens", reflect.TypeOf((*MockIPoolSimulator)(nil).GetTokens))
}

// GetType mocks base method.
func (m *MockIPoolSimulator) GetType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockIPoolSimulatorMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockIPoolSimulator)(nil).GetType))
}

// UpdateBalance mocks base method.
func (m *MockIPoolSimulator) UpdateBalance(params pool.UpdateBalanceParams) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateBalance", params)
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockIPoolSimulatorMockRecorder) UpdateBalance(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockIPoolSimulator)(nil).UpdateBalance), params)
}
