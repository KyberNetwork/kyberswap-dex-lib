// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/indexpools (interfaces: IPoolRankRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/indexpools/pool_rank_repository.go -package indexpools github.com/KyberNetwork/router-service/internal/pkg/usecase/indexpools IPoolRankRepository
//

// Package indexpools is a generated GoMock package.
package indexpools

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolRankRepository is a mock of IPoolRankRepository interface.
type MockIPoolRankRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRankRepositoryMockRecorder
	isgomock struct{}
}

// MockIPoolRankRepositoryMockRecorder is the mock recorder for MockIPoolRankRepository.
type MockIPoolRankRepositoryMockRecorder struct {
	mock *MockIPoolRankRepository
}

// NewMockIPoolRankRepository creates a new mock instance.
func NewMockIPoolRankRepository(ctrl *gomock.Controller) *MockIPoolRankRepository {
	mock := &MockIPoolRankRepository{ctrl: ctrl}
	mock.recorder = &MockIPoolRankRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRankRepository) EXPECT() *MockIPoolRankRepositoryMockRecorder {
	return m.recorder
}

// AddScoreToSortedSets mocks base method.
func (m *MockIPoolRankRepository) AddScoreToSortedSets(ctx context.Context, scores []entity.PoolScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScoreToSortedSets", ctx, scores)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddScoreToSortedSets indicates an expected call of AddScoreToSortedSets.
func (mr *MockIPoolRankRepositoryMockRecorder) AddScoreToSortedSets(ctx, scores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScoreToSortedSets", reflect.TypeOf((*MockIPoolRankRepository)(nil).AddScoreToSortedSets), ctx, scores)
}

// AddToSortedSet mocks base method.
func (m *MockIPoolRankRepository) AddToSortedSet(ctx context.Context, token0, token1 string, isToken0Whitelisted, isToken1Whitelisted bool, key, memberName string, score float64, useGlobal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToSortedSet", ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, score, useGlobal)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToSortedSet indicates an expected call of AddToSortedSet.
func (mr *MockIPoolRankRepositoryMockRecorder) AddToSortedSet(ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, score, useGlobal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToSortedSet", reflect.TypeOf((*MockIPoolRankRepository)(nil).AddToSortedSet), ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, score, useGlobal)
}

// GetDirectIndexLength mocks base method.
func (m *MockIPoolRankRepository) GetDirectIndexLength(ctx context.Context, key, token0, token1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectIndexLength", ctx, key, token0, token1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectIndexLength indicates an expected call of GetDirectIndexLength.
func (mr *MockIPoolRankRepositoryMockRecorder) GetDirectIndexLength(ctx, key, token0, token1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectIndexLength", reflect.TypeOf((*MockIPoolRankRepository)(nil).GetDirectIndexLength), ctx, key, token0, token1)
}

// RemoveAddressesFromWhitelistIndex mocks base method.
func (m *MockIPoolRankRepository) RemoveAddressesFromWhitelistIndex(ctx context.Context, key string, pools []string, removeFromGlobal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAddressesFromWhitelistIndex", ctx, key, pools, removeFromGlobal)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAddressesFromWhitelistIndex indicates an expected call of RemoveAddressesFromWhitelistIndex.
func (mr *MockIPoolRankRepositoryMockRecorder) RemoveAddressesFromWhitelistIndex(ctx, key, pools, removeFromGlobal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAddressesFromWhitelistIndex", reflect.TypeOf((*MockIPoolRankRepository)(nil).RemoveAddressesFromWhitelistIndex), ctx, key, pools, removeFromGlobal)
}

// RemoveFromSortedSet mocks base method.
func (m *MockIPoolRankRepository) RemoveFromSortedSet(ctx context.Context, token0, token1 string, isToken0Whitelisted, isToken1Whitelisted bool, key, memberName string, useGlobal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromSortedSet", ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, useGlobal)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromSortedSet indicates an expected call of RemoveFromSortedSet.
func (mr *MockIPoolRankRepositoryMockRecorder) RemoveFromSortedSet(ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, useGlobal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromSortedSet", reflect.TypeOf((*MockIPoolRankRepository)(nil).RemoveFromSortedSet), ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, useGlobal)
}

// RemoveScoreToSortedSets mocks base method.
func (m *MockIPoolRankRepository) RemoveScoreToSortedSets(ctx context.Context, scores []entity.PoolScore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveScoreToSortedSets", ctx, scores)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveScoreToSortedSets indicates an expected call of RemoveScoreToSortedSets.
func (mr *MockIPoolRankRepositoryMockRecorder) RemoveScoreToSortedSets(ctx, scores any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveScoreToSortedSets", reflect.TypeOf((*MockIPoolRankRepository)(nil).RemoveScoreToSortedSets), ctx, scores)
}

// SaveCorrelatedPair mocks base method.
func (m *MockIPoolRankRepository) SaveCorrelatedPair(ctx context.Context, correlatedPairs []entity.CorrelatedPairInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCorrelatedPair", ctx, correlatedPairs)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCorrelatedPair indicates an expected call of SaveCorrelatedPair.
func (mr *MockIPoolRankRepositoryMockRecorder) SaveCorrelatedPair(ctx, correlatedPairs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCorrelatedPair", reflect.TypeOf((*MockIPoolRankRepository)(nil).SaveCorrelatedPair), ctx, correlatedPairs)
}

// ZCard mocks base method.
func (m *MockIPoolRankRepository) ZCard(ctx context.Context, keys []string) map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ZCard", ctx, keys)
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// ZCard indicates an expected call of ZCard.
func (mr *MockIPoolRankRepositoryMockRecorder) ZCard(ctx, keys any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZCard", reflect.TypeOf((*MockIPoolRankRepository)(nil).ZCard), ctx, keys)
}
