// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/indexpools (interfaces: IOnchainPriceRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/indexpools/onchain_price_repository.go -package indexpools github.com/KyberNetwork/router-service/internal/pkg/usecase/indexpools IOnchainPriceRepository
//

// Package indexpools is a generated GoMock package.
package indexpools

import (
	context "context"
	big "math/big"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIOnchainPriceRepository is a mock of IOnchainPriceRepository interface.
type MockIOnchainPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOnchainPriceRepositoryMockRecorder
	isgomock struct{}
}

// MockIOnchainPriceRepositoryMockRecorder is the mock recorder for MockIOnchainPriceRepository.
type MockIOnchainPriceRepositoryMockRecorder struct {
	mock *MockIOnchainPriceRepository
}

// NewMockIOnchainPriceRepository creates a new mock instance.
func NewMockIOnchainPriceRepository(ctrl *gomock.Controller) *MockIOnchainPriceRepository {
	mock := &MockIOnchainPriceRepository{ctrl: ctrl}
	mock.recorder = &MockIOnchainPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOnchainPriceRepository) EXPECT() *MockIOnchainPriceRepositoryMockRecorder {
	return m.recorder
}

// FetchNativePriceInUSD mocks base method.
func (m *MockIOnchainPriceRepository) FetchNativePriceInUSD(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNativePriceInUSD", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// FetchNativePriceInUSD indicates an expected call of FetchNativePriceInUSD.
func (mr *MockIOnchainPriceRepositoryMockRecorder) FetchNativePriceInUSD(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNativePriceInUSD", reflect.TypeOf((*MockIOnchainPriceRepository)(nil).FetchNativePriceInUSD), ctx)
}

// FindByAddresses mocks base method.
func (m *MockIOnchainPriceRepository) FindByAddresses(ctx context.Context, addresses []string) (map[string]*entity.OnchainPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", ctx, addresses)
	ret0, _ := ret[0].(map[string]*entity.OnchainPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockIOnchainPriceRepositoryMockRecorder) FindByAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockIOnchainPriceRepository)(nil).FindByAddresses), ctx, addresses)
}

// GetNativePriceInUsd mocks base method.
func (m *MockIOnchainPriceRepository) GetNativePriceInUsd(ctx context.Context) (*big.Float, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNativePriceInUsd", ctx)
	ret0, _ := ret[0].(*big.Float)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNativePriceInUsd indicates an expected call of GetNativePriceInUsd.
func (mr *MockIOnchainPriceRepositoryMockRecorder) GetNativePriceInUsd(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNativePriceInUsd", reflect.TypeOf((*MockIOnchainPriceRepository)(nil).GetNativePriceInUsd), ctx)
}

// RefreshCacheNativePriceInUSD mocks base method.
func (m *MockIOnchainPriceRepository) RefreshCacheNativePriceInUSD(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RefreshCacheNativePriceInUSD", ctx)
}

// RefreshCacheNativePriceInUSD indicates an expected call of RefreshCacheNativePriceInUSD.
func (mr *MockIOnchainPriceRepositoryMockRecorder) RefreshCacheNativePriceInUSD(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshCacheNativePriceInUSD", reflect.TypeOf((*MockIOnchainPriceRepository)(nil).RefreshCacheNativePriceInUSD), ctx)
}
