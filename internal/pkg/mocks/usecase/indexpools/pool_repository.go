// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/indexpools (interfaces: IPoolRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/indexpools/pool_repository.go -package indexpools github.com/KyberNetwork/router-service/internal/pkg/usecase/indexpools IPoolRepository
//

// Package indexpools is a generated GoMock package.
package indexpools

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolRepository is a mock of IPoolRepository interface.
type MockIPoolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRepositoryMockRecorder
	isgomock struct{}
}

// MockIPoolRepositoryMockRecorder is the mock recorder for MockIPoolRepository.
type MockIPoolRepositoryMockRecorder struct {
	mock *MockIPoolRepository
}

// NewMockIPoolRepository creates a new mock instance.
func NewMockIPoolRepository(ctrl *gomock.Controller) *MockIPoolRepository {
	mock := &MockIPoolRepository{ctrl: ctrl}
	mock.recorder = &MockIPoolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRepository) EXPECT() *MockIPoolRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockIPoolRepository) Count(ctx context.Context) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx)
	ret0, _ := ret[0].(int64)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockIPoolRepositoryMockRecorder) Count(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIPoolRepository)(nil).Count), ctx)
}

// FindAddressesByDex mocks base method.
func (m *MockIPoolRepository) FindAddressesByDex(ctx context.Context, dex string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAddressesByDex", ctx, dex)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAddressesByDex indicates an expected call of FindAddressesByDex.
func (mr *MockIPoolRepositoryMockRecorder) FindAddressesByDex(ctx, dex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAddressesByDex", reflect.TypeOf((*MockIPoolRepository)(nil).FindAddressesByDex), ctx, dex)
}

// FindAllAddresses mocks base method.
func (m *MockIPoolRepository) FindAllAddresses(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAddresses", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAddresses indicates an expected call of FindAllAddresses.
func (mr *MockIPoolRepositoryMockRecorder) FindAllAddresses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAddresses", reflect.TypeOf((*MockIPoolRepository)(nil).FindAllAddresses), ctx)
}

// FindByAddresses mocks base method.
func (m *MockIPoolRepository) FindByAddresses(ctx context.Context, addresses []string) ([]*entity.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", ctx, addresses)
	ret0, _ := ret[0].([]*entity.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockIPoolRepositoryMockRecorder) FindByAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockIPoolRepository)(nil).FindByAddresses), ctx, addresses)
}

// GetPoolsInBlacklist mocks base method.
func (m *MockIPoolRepository) GetPoolsInBlacklist(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolsInBlacklist", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolsInBlacklist indicates an expected call of GetPoolsInBlacklist.
func (mr *MockIPoolRepositoryMockRecorder) GetPoolsInBlacklist(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolsInBlacklist", reflect.TypeOf((*MockIPoolRepository)(nil).GetPoolsInBlacklist), ctx)
}

// ScanPools mocks base method.
func (m *MockIPoolRepository) ScanPools(ctx context.Context, cursor uint64, count int) ([]*entity.Pool, []string, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanPools", ctx, cursor, count)
	ret0, _ := ret[0].([]*entity.Pool)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ScanPools indicates an expected call of ScanPools.
func (mr *MockIPoolRepositoryMockRecorder) ScanPools(ctx, cursor, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanPools", reflect.TypeOf((*MockIPoolRepository)(nil).ScanPools), ctx, cursor, count)
}
