// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IETHClient)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/eth_client.go -package buildroute github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IETHClient
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	big "math/big"
	reflect "reflect"

	ethereum "github.com/ethereum/go-ethereum"
	gomock "go.uber.org/mock/gomock"
)

// MockIETHClient is a mock of IETHClient interface.
type MockIETHClient struct {
	ctrl     *gomock.Controller
	recorder *MockIETHClientMockRecorder
	isgomock struct{}
}

// MockIETHClientMockRecorder is the mock recorder for MockIETHClient.
type MockIETHClientMockRecorder struct {
	mock *MockIETHClient
}

// NewMockIETHClient creates a new mock instance.
func NewMockIETHClient(ctrl *gomock.Controller) *MockIETHClient {
	mock := &MockIETHClient{ctrl: ctrl}
	mock.recorder = &MockIETHClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIETHClient) EXPECT() *MockIETHClientMockRecorder {
	return m.recorder
}

// CallContract mocks base method.
func (m *MockIETHClient) CallContract(ctx context.Context, msg ethereum.CallMsg, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", ctx, msg, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract.
func (mr *MockIETHClientMockRecorder) CallContract(ctx, msg, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockIETHClient)(nil).CallContract), ctx, msg, blockNumber)
}

// EstimateGas mocks base method.
func (m *MockIETHClient) EstimateGas(ctx context.Context, msg ethereum.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, msg)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockIETHClientMockRecorder) EstimateGas(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockIETHClient)(nil).EstimateGas), ctx, msg)
}
