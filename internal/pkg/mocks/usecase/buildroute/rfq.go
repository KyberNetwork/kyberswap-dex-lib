// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool (interfaces: IPoolRFQ)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/rfq.go -package buildroute github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool IPoolRFQ
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	reflect "reflect"

	pool "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolRFQ is a mock of IPoolRFQ interface.
type MockIPoolRFQ struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRFQMockRecorder
	isgomock struct{}
}

// MockIPoolRFQMockRecorder is the mock recorder for MockIPoolRFQ.
type MockIPoolRFQMockRecorder struct {
	mock *MockIPoolRFQ
}

// NewMockIPoolRFQ creates a new mock instance.
func NewMockIPoolRFQ(ctrl *gomock.Controller) *MockIPoolRFQ {
	mock := &MockIPoolRFQ{ctrl: ctrl}
	mock.recorder = &MockIPoolRFQMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRFQ) EXPECT() *MockIPoolRFQMockRecorder {
	return m.recorder
}

// BatchRFQ mocks base method.
func (m *MockIPoolRFQ) BatchRFQ(ctx context.Context, paramsSlice []pool.RFQParams) ([]*pool.RFQResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchRFQ", ctx, paramsSlice)
	ret0, _ := ret[0].([]*pool.RFQResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchRFQ indicates an expected call of BatchRFQ.
func (mr *MockIPoolRFQMockRecorder) BatchRFQ(ctx, paramsSlice any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchRFQ", reflect.TypeOf((*MockIPoolRFQ)(nil).BatchRFQ), ctx, paramsSlice)
}

// RFQ mocks base method.
func (m *MockIPoolRFQ) RFQ(ctx context.Context, params pool.RFQParams) (*pool.RFQResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RFQ", ctx, params)
	ret0, _ := ret[0].(*pool.RFQResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RFQ indicates an expected call of RFQ.
func (mr *MockIPoolRFQMockRecorder) RFQ(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RFQ", reflect.TypeOf((*MockIPoolRFQ)(nil).RFQ), ctx, params)
}

// SupportBatch mocks base method.
func (m *MockIPoolRFQ) SupportBatch() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportBatch")
	ret0, _ := ret[0].(bool)
	return ret0
}

// SupportBatch indicates an expected call of SupportBatch.
func (mr *MockIPoolRFQMockRecorder) SupportBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportBatch", reflect.TypeOf((*MockIPoolRFQ)(nil).SupportBatch))
}
