// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IGasRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/gas_repository.go -package buildroute github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IGasRepository
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIGasRepository is a mock of IGasRepository interface.
type MockIGasRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGasRepositoryMockRecorder
}

// MockIGasRepositoryMockRecorder is the mock recorder for MockIGasRepository.
type MockIGasRepositoryMockRecorder struct {
	mock *MockIGasRepository
}

// NewMockIGasRepository creates a new mock instance.
func NewMockIGasRepository(ctrl *gomock.Controller) *MockIGasRepository {
	mock := &MockIGasRepository{ctrl: ctrl}
	mock.recorder = &MockIGasRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGasRepository) EXPECT() *MockIGasRepositoryMockRecorder {
	return m.recorder
}

// GetSuggestedGasPrice mocks base method.
func (m *MockIGasRepository) GetSuggestedGasPrice(arg0 context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestedGasPrice", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestedGasPrice indicates an expected call of GetSuggestedGasPrice.
func (mr *MockIGasRepositoryMockRecorder) GetSuggestedGasPrice(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestedGasPrice", reflect.TypeOf((*MockIGasRepository)(nil).GetSuggestedGasPrice), arg0)
}
