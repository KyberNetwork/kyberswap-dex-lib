// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IAlphaFeeRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/alpha_fee_repository.go -package buildroute github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IAlphaFeeRepository
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	reflect "reflect"

	"github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAlphaFeeRepository is a mock of IAlphaFeeRepository interface.
type MockIAlphaFeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAlphaFeeRepositoryMockRecorder
	isgomock struct{}
}

// MockIAlphaFeeRepositoryMockRecorder is the mock recorder for MockIAlphaFeeRepository.
type MockIAlphaFeeRepositoryMockRecorder struct {
	mock *MockIAlphaFeeRepository
}

// NewMockIAlphaFeeRepository creates a new mock instance.
func NewMockIAlphaFeeRepository(ctrl *gomock.Controller) *MockIAlphaFeeRepository {
	mock := &MockIAlphaFeeRepository{ctrl: ctrl}
	mock.recorder = &MockIAlphaFeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAlphaFeeRepository) EXPECT() *MockIAlphaFeeRepositoryMockRecorder {
	return m.recorder
}

// GetByRouteId mocks base method.
func (m *MockIAlphaFeeRepository) GetByRouteId(ctx context.Context, routeID string) (*entity.AlphaFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByRouteId", ctx, routeID)
	ret0, _ := ret[0].(*entity.AlphaFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByRouteId indicates an expected call of GetByRouteId.
func (mr *MockIAlphaFeeRepositoryMockRecorder) GetByRouteId(ctx, routeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByRouteId", reflect.TypeOf((*MockIAlphaFeeRepository)(nil).GetByRouteId), ctx, routeID)
}
