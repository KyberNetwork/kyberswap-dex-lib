// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IPublisherRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/publisher_repository.go -package buildroute github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IPublisherRepository
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIPublisherRepository is a mock of IPublisherRepository interface.
type MockIPublisherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPublisherRepositoryMockRecorder
	isgomock struct{}
}

// MockIPublisherRepositoryMockRecorder is the mock recorder for MockIPublisherRepository.
type MockIPublisherRepositoryMockRecorder struct {
	mock *MockIPublisherRepository
}

// NewMockIPublisherRepository creates a new mock instance.
func NewMockIPublisherRepository(ctrl *gomock.Controller) *MockIPublisherRepository {
	mock := &MockIPublisherRepository{ctrl: ctrl}
	mock.recorder = &MockIPublisherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPublisherRepository) EXPECT() *MockIPublisherRepositoryMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIPublisherRepository) Publish(ctx context.Context, topic string, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockIPublisherRepositoryMockRecorder) Publish(ctx, topic, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIPublisherRepository)(nil).Publish), ctx, topic, data)
}

// PublishMultiple mocks base method.
func (m *MockIPublisherRepository) PublishMultiple(ctx context.Context, topic string, data [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishMultiple", ctx, topic, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishMultiple indicates an expected call of PublishMultiple.
func (mr *MockIPublisherRepositoryMockRecorder) PublishMultiple(ctx, topic, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishMultiple", reflect.TypeOf((*MockIPublisherRepository)(nil).PublishMultiple), ctx, topic, data)
}
