// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IGasEstimator)

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	reflect "reflect"

	buildroute "github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute"
	gomock "github.com/golang/mock/gomock"
)

// MockIGasEstimator is a mock of IGasEstimator interface.
type MockIGasEstimator struct {
	ctrl     *gomock.Controller
	recorder *MockIGasEstimatorMockRecorder
}

// MockIGasEstimatorMockRecorder is the mock recorder for MockIGasEstimator.
type MockIGasEstimatorMockRecorder struct {
	mock *MockIGasEstimator
}

// NewMockIGasEstimator creates a new mock instance.
func NewMockIGasEstimator(ctrl *gomock.Controller) *MockIGasEstimator {
	mock := &MockIGasEstimator{ctrl: ctrl}
	mock.recorder = &MockIGasEstimatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGasEstimator) EXPECT() *MockIGasEstimatorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockIGasEstimator) Execute(arg0 context.Context, arg1 buildroute.UnsignedTransaction) (uint64, float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockIGasEstimatorMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockIGasEstimator)(nil).Execute), arg0, arg1)
}
