// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IGasEstimator)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/gas_estimator.go -package buildroute github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IGasEstimator
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	big "math/big"
	reflect "reflect"

	buildroute "github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute"
	gomock "go.uber.org/mock/gomock"
)

// MockIGasEstimator is a mock of IGasEstimator interface.
type MockIGasEstimator struct {
	ctrl     *gomock.Controller
	recorder *MockIGasEstimatorMockRecorder
	isgomock struct{}
}

// MockIGasEstimatorMockRecorder is the mock recorder for MockIGasEstimator.
type MockIGasEstimatorMockRecorder struct {
	mock *MockIGasEstimator
}

// NewMockIGasEstimator creates a new mock instance.
func NewMockIGasEstimator(ctrl *gomock.Controller) *MockIGasEstimator {
	mock := &MockIGasEstimator{ctrl: ctrl}
	mock.recorder = &MockIGasEstimatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGasEstimator) EXPECT() *MockIGasEstimatorMockRecorder {
	return m.recorder
}

// EstimateGas mocks base method.
func (m *MockIGasEstimator) EstimateGas(ctx context.Context, tx buildroute.UnsignedTransaction) (uint64, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", ctx, tx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EstimateGas indicates an expected call of EstimateGas.
func (mr *MockIGasEstimatorMockRecorder) EstimateGas(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockIGasEstimator)(nil).EstimateGas), ctx, tx)
}

// EstimateGasAndPriceUSD mocks base method.
func (m *MockIGasEstimator) EstimateGasAndPriceUSD(ctx context.Context, tx buildroute.UnsignedTransaction) (uint64, float64, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGasAndPriceUSD", ctx, tx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(float64)
	ret2, _ := ret[2].(*big.Int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// EstimateGasAndPriceUSD indicates an expected call of EstimateGasAndPriceUSD.
func (mr *MockIGasEstimatorMockRecorder) EstimateGasAndPriceUSD(ctx, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGasAndPriceUSD", reflect.TypeOf((*MockIGasEstimator)(nil).EstimateGasAndPriceUSD), ctx, tx)
}

// GetGasTokenPriceUSD mocks base method.
func (m *MockIGasEstimator) GetGasTokenPriceUSD(ctx context.Context) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGasTokenPriceUSD", ctx)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGasTokenPriceUSD indicates an expected call of GetGasTokenPriceUSD.
func (mr *MockIGasEstimatorMockRecorder) GetGasTokenPriceUSD(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGasTokenPriceUSD", reflect.TypeOf((*MockIGasEstimator)(nil).GetGasTokenPriceUSD), ctx)
}
