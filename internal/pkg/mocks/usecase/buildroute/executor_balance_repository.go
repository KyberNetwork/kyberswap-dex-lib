// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IExecutorBalanceRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/buildroute/executor_balance_repository.go -package buildroute github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IExecutorBalanceRepository
//

// Package buildroute is a generated GoMock package.
package buildroute

import (
	context "context"
	reflect "reflect"

	dto "github.com/KyberNetwork/router-service/internal/pkg/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIExecutorBalanceRepository is a mock of IExecutorBalanceRepository interface.
type MockIExecutorBalanceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutorBalanceRepositoryMockRecorder
	isgomock struct{}
}

// MockIExecutorBalanceRepositoryMockRecorder is the mock recorder for MockIExecutorBalanceRepository.
type MockIExecutorBalanceRepositoryMockRecorder struct {
	mock *MockIExecutorBalanceRepository
}

// NewMockIExecutorBalanceRepository creates a new mock instance.
func NewMockIExecutorBalanceRepository(ctrl *gomock.Controller) *MockIExecutorBalanceRepository {
	mock := &MockIExecutorBalanceRepository{ctrl: ctrl}
	mock.recorder = &MockIExecutorBalanceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecutorBalanceRepository) EXPECT() *MockIExecutorBalanceRepositoryMockRecorder {
	return m.recorder
}

// HasPoolApproval mocks base method.
func (m *MockIExecutorBalanceRepository) HasPoolApproval(ctx context.Context, executorAddress string, queries []dto.PoolApprovalQuery) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPoolApproval", ctx, executorAddress, queries)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasPoolApproval indicates an expected call of HasPoolApproval.
func (mr *MockIExecutorBalanceRepositoryMockRecorder) HasPoolApproval(ctx, executorAddress, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPoolApproval", reflect.TypeOf((*MockIExecutorBalanceRepository)(nil).HasPoolApproval), ctx, executorAddress, queries)
}

// HasToken mocks base method.
func (m *MockIExecutorBalanceRepository) HasToken(ctx context.Context, executorAddress string, queries []string) ([]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasToken", ctx, executorAddress, queries)
	ret0, _ := ret[0].([]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasToken indicates an expected call of HasToken.
func (mr *MockIExecutorBalanceRepositoryMockRecorder) HasToken(ctx, executorAddress, queries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasToken", reflect.TypeOf((*MockIExecutorBalanceRepository)(nil).HasToken), ctx, executorAddress, queries)
}
