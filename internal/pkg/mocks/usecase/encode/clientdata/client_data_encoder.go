// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute (interfaces: IClientDataEncoder)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/encode/clientdata/client_data_encoder.go -package clientdata github.com/KyberNetwork/router-service/internal/pkg/usecase/buildroute IClientDataEncoder
//

// Package clientdata is a generated GoMock package.
package clientdata

import (
	context "context"
	reflect "reflect"

	types "github.com/KyberNetwork/aggregator-encoding/pkg/types"
	gomock "go.uber.org/mock/gomock"
)

// MockIClientDataEncoder is a mock of IClientDataEncoder interface.
type MockIClientDataEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockIClientDataEncoderMockRecorder
	isgomock struct{}
}

// MockIClientDataEncoderMockRecorder is the mock recorder for MockIClientDataEncoder.
type MockIClientDataEncoderMockRecorder struct {
	mock *MockIClientDataEncoder
}

// NewMockIClientDataEncoder creates a new mock instance.
func NewMockIClientDataEncoder(ctrl *gomock.Controller) *MockIClientDataEncoder {
	mock := &MockIClientDataEncoder{ctrl: ctrl}
	mock.recorder = &MockIClientDataEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientDataEncoder) EXPECT() *MockIClientDataEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockIClientDataEncoder) Encode(ctx context.Context, data types.ClientData) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", ctx, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockIClientDataEncoderMockRecorder) Encode(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockIClientDataEncoder)(nil).Encode), ctx, data)
}
