// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/usecase/encode/clientdata (interfaces: ISigner)

// Package clientdata is a generated GoMock package.
package clientdata

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISigner is a mock of ISigner interface.
type MockISigner struct {
	ctrl     *gomock.Controller
	recorder *MockISignerMockRecorder
}

// MockISignerMockRecorder is the mock recorder for MockISigner.
type MockISignerMockRecorder struct {
	mock *MockISigner
}

// NewMockISigner creates a new mock instance.
func NewMockISigner(ctrl *gomock.Controller) *MockISigner {
	mock := &MockISigner{ctrl: ctrl}
	mock.recorder = &MockISignerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISigner) EXPECT() *MockISignerMockRecorder {
	return m.recorder
}

// Sign mocks base method.
func (m *MockISigner) Sign(arg0 context.Context, arg1, arg2 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sign", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sign indicates an expected call of Sign.
func (mr *MockISignerMockRecorder) Sign(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sign", reflect.TypeOf((*MockISigner)(nil).Sign), arg0, arg1, arg2)
}
