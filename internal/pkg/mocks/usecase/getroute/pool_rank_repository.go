// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute (interfaces: IPoolRankRepository)

// Package getroute is a generated GoMock package.
package getroute

import (
	context "context"
	reflect "reflect"

	valueobject "github.com/KyberNetwork/router-service/internal/pkg/valueobject"
	gomock "github.com/golang/mock/gomock"
)

// MockIPoolRankRepository is a mock of IPoolRankRepository interface.
type MockIPoolRankRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRankRepositoryMockRecorder
}

// MockIPoolRankRepositoryMockRecorder is the mock recorder for MockIPoolRankRepository.
type MockIPoolRankRepositoryMockRecorder struct {
	mock *MockIPoolRankRepository
}

// NewMockIPoolRankRepository creates a new mock instance.
func NewMockIPoolRankRepository(ctrl *gomock.Controller) *MockIPoolRankRepository {
	mock := &MockIPoolRankRepository{ctrl: ctrl}
	mock.recorder = &MockIPoolRankRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRankRepository) EXPECT() *MockIPoolRankRepositoryMockRecorder {
	return m.recorder
}

// FindBestPoolIDs mocks base method.
func (m *MockIPoolRankRepository) FindBestPoolIDs(arg0 context.Context, arg1, arg2 string, arg3 float64, arg4 valueobject.GetBestPoolsOptions, arg5 valueobject.IndexType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBestPoolIDs", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBestPoolIDs indicates an expected call of FindBestPoolIDs.
func (mr *MockIPoolRankRepositoryMockRecorder) FindBestPoolIDs(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBestPoolIDs", reflect.TypeOf((*MockIPoolRankRepository)(nil).FindBestPoolIDs), arg0, arg1, arg2, arg3, arg4, arg5)
}
