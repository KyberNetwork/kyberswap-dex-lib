// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute (interfaces: IL1FeeEstimator)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/getroute/l1_fee_estimator.go -package getroute github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute IL1FeeEstimator
//

// Package getroute is a generated GoMock package.
package getroute

import (
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIL1FeeEstimator is a mock of IL1FeeEstimator interface.
type MockIL1FeeEstimator struct {
	ctrl     *gomock.Controller
	recorder *MockIL1FeeEstimatorMockRecorder
	isgomock struct{}
}

// MockIL1FeeEstimatorMockRecorder is the mock recorder for MockIL1FeeEstimator.
type MockIL1FeeEstimatorMockRecorder struct {
	mock *MockIL1FeeEstimator
}

// NewMockIL1FeeEstimator creates a new mock instance.
func NewMockIL1FeeEstimator(ctrl *gomock.Controller) *MockIL1FeeEstimator {
	mock := &MockIL1FeeEstimator{ctrl: ctrl}
	mock.recorder = &MockIL1FeeEstimatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIL1FeeEstimator) EXPECT() *MockIL1FeeEstimatorMockRecorder {
	return m.recorder
}

// EstimateL1Fees mocks base method.
func (m *MockIL1FeeEstimator) EstimateL1Fees(ctx context.Context) (*big.Int, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateL1Fees", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EstimateL1Fees indicates an expected call of EstimateL1Fees.
func (mr *MockIL1FeeEstimatorMockRecorder) EstimateL1Fees(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateL1Fees", reflect.TypeOf((*MockIL1FeeEstimator)(nil).EstimateL1Fees), ctx)
}
