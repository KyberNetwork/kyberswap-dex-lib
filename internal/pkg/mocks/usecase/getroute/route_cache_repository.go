// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute (interfaces: IRouteCacheRepository)

// Package getroute is a generated GoMock package.
package getroute

import (
	context "context"
	reflect "reflect"

	valueobject "github.com/KyberNetwork/router-service/internal/pkg/valueobject"
	gomock "github.com/golang/mock/gomock"
)

// MockIRouteCacheRepository is a mock of IRouteCacheRepository interface.
type MockIRouteCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRouteCacheRepositoryMockRecorder
}

// MockIRouteCacheRepositoryMockRecorder is the mock recorder for MockIRouteCacheRepository.
type MockIRouteCacheRepositoryMockRecorder struct {
	mock *MockIRouteCacheRepository
}

// NewMockIRouteCacheRepository creates a new mock instance.
func NewMockIRouteCacheRepository(ctrl *gomock.Controller) *MockIRouteCacheRepository {
	mock := &MockIRouteCacheRepository{ctrl: ctrl}
	mock.recorder = &MockIRouteCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRouteCacheRepository) EXPECT() *MockIRouteCacheRepositoryMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockIRouteCacheRepository) Del(arg0 context.Context, arg1 []*valueobject.RouteCacheKeyTTL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockIRouteCacheRepositoryMockRecorder) Del(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockIRouteCacheRepository)(nil).Del), arg0, arg1)
}

// Get mocks base method.
func (m *MockIRouteCacheRepository) Get(arg0 context.Context, arg1 []*valueobject.RouteCacheKeyTTL) (map[*valueobject.RouteCacheKeyTTL]*valueobject.SimpleRoute, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(map[*valueobject.RouteCacheKeyTTL]*valueobject.SimpleRoute)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRouteCacheRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRouteCacheRepository)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockIRouteCacheRepository) Set(arg0 context.Context, arg1 []*valueobject.RouteCacheKeyTTL, arg2 []*valueobject.SimpleRoute) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockIRouteCacheRepositoryMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockIRouteCacheRepository)(nil).Set), arg0, arg1, arg2)
}
