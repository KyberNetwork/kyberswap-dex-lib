// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute (interfaces: IBestPathRepository)

// Package getroute is a generated GoMock package.
package getroute

import (
	reflect "reflect"

	entity "github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIBestPathRepository is a mock of IBestPathRepository interface.
type MockIBestPathRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIBestPathRepositoryMockRecorder
}

// MockIBestPathRepositoryMockRecorder is the mock recorder for MockIBestPathRepository.
type MockIBestPathRepositoryMockRecorder struct {
	mock *MockIBestPathRepository
}

// NewMockIBestPathRepository creates a new mock instance.
func NewMockIBestPathRepository(ctrl *gomock.Controller) *MockIBestPathRepository {
	mock := &MockIBestPathRepository{ctrl: ctrl}
	mock.recorder = &MockIBestPathRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBestPathRepository) EXPECT() *MockIBestPathRepositoryMockRecorder {
	return m.recorder
}

// GetBestPaths mocks base method.
func (m *MockIBestPathRepository) GetBestPaths(arg0 uint64, arg1, arg2 string) []*entity.MinimalPath {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBestPaths", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.MinimalPath)
	return ret0
}

// GetBestPaths indicates an expected call of GetBestPaths.
func (mr *MockIBestPathRepositoryMockRecorder) GetBestPaths(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBestPaths", reflect.TypeOf((*MockIBestPathRepository)(nil).GetBestPaths), arg0, arg1, arg2)
}
