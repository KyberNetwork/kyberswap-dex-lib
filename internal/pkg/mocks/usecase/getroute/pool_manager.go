// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute (interfaces: IPoolManager)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/getroute/pool_manager.go -package getroute github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute IPoolManager
//

// Package getroute is a generated GoMock package.
package getroute

import (
	context "context"
	reflect "reflect"

	aevmclient "github.com/KyberNetwork/aevm/client"
	types "github.com/KyberNetwork/router-service/internal/pkg/usecase/types"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolManager is a mock of IPoolManager interface.
type MockIPoolManager struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolManagerMockRecorder
	isgomock struct{}
}

// MockIPoolManagerMockRecorder is the mock recorder for MockIPoolManager.
type MockIPoolManagerMockRecorder struct {
	mock *MockIPoolManager
}

// NewMockIPoolManager creates a new mock instance.
func NewMockIPoolManager(ctrl *gomock.Controller) *MockIPoolManager {
	mock := &MockIPoolManager{ctrl: ctrl}
	mock.recorder = &MockIPoolManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolManager) EXPECT() *MockIPoolManagerMockRecorder {
	return m.recorder
}

// GetAEVMClient mocks base method.
func (m *MockIPoolManager) GetAEVMClient() aevmclient.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAEVMClient")
	ret0, _ := ret[0].(aevmclient.Client)
	return ret0
}

// GetAEVMClient indicates an expected call of GetAEVMClient.
func (mr *MockIPoolManagerMockRecorder) GetAEVMClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAEVMClient", reflect.TypeOf((*MockIPoolManager)(nil).GetAEVMClient))
}

// GetStateByPoolAddresses mocks base method.
func (m *MockIPoolManager) GetStateByPoolAddresses(ctx context.Context, addresses, dex []string, stateRoot common.Hash, extraData types.PoolManagerExtraData) (*types.FindRouteState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateByPoolAddresses", ctx, addresses, dex, stateRoot, extraData)
	ret0, _ := ret[0].(*types.FindRouteState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateByPoolAddresses indicates an expected call of GetStateByPoolAddresses.
func (mr *MockIPoolManagerMockRecorder) GetStateByPoolAddresses(ctx, addresses, dex, stateRoot, extraData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateByPoolAddresses", reflect.TypeOf((*MockIPoolManager)(nil).GetStateByPoolAddresses), ctx, addresses, dex, stateRoot, extraData)
}
