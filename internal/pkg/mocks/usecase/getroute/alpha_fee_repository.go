// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute (interfaces: IAlphaFeeRepository)
//
// Generated by this command:
//
//	mockgen -destination ../../mocks/usecase/getroute/alpha_fee_repository.go -package getroute github.com/KyberNetwork/router-service/internal/pkg/usecase/getroute IAlphaFeeRepository
//

// Package getroute is a generated GoMock package.
package getroute

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAlphaFeeRepository is a mock of IAlphaFeeRepository interface.
type MockIAlphaFeeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAlphaFeeRepositoryMockRecorder
	isgomock struct{}
}

// MockIAlphaFeeRepositoryMockRecorder is the mock recorder for MockIAlphaFeeRepository.
type MockIAlphaFeeRepositoryMockRecorder struct {
	mock *MockIAlphaFeeRepository
}

// NewMockIAlphaFeeRepository creates a new mock instance.
func NewMockIAlphaFeeRepository(ctrl *gomock.Controller) *MockIAlphaFeeRepository {
	mock := &MockIAlphaFeeRepository{ctrl: ctrl}
	mock.recorder = &MockIAlphaFeeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAlphaFeeRepository) EXPECT() *MockIAlphaFeeRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockIAlphaFeeRepository) Save(ctx context.Context, routeId string, alphaFee *entity.AlphaFee) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, routeId, alphaFee)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIAlphaFeeRepositoryMockRecorder) Save(ctx, routeId, alphaFee any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIAlphaFeeRepository)(nil).Save), ctx, routeId, alphaFee)
}
