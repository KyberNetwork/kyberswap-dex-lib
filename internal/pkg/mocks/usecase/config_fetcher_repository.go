// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/usecase (interfaces: IConfigFetcherRepository)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	valueobject "github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/valueobject"
	gomock "github.com/golang/mock/gomock"
)

// MockIConfigFetcherRepository is a mock of IConfigFetcherRepository interface.
type MockIConfigFetcherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigFetcherRepositoryMockRecorder
}

// MockIConfigFetcherRepositoryMockRecorder is the mock recorder for MockIConfigFetcherRepository.
type MockIConfigFetcherRepositoryMockRecorder struct {
	mock *MockIConfigFetcherRepository
}

// NewMockIConfigFetcherRepository creates a new mock instance.
func NewMockIConfigFetcherRepository(ctrl *gomock.Controller) *MockIConfigFetcherRepository {
	mock := &MockIConfigFetcherRepository{ctrl: ctrl}
	mock.recorder = &MockIConfigFetcherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigFetcherRepository) EXPECT() *MockIConfigFetcherRepositoryMockRecorder {
	return m.recorder
}

// GetConfigs mocks base method.
func (m *MockIConfigFetcherRepository) GetConfigs(arg0 context.Context, arg1, arg2 string) (valueobject.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigs", arg0, arg1, arg2)
	ret0, _ := ret[0].(valueobject.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigs indicates an expected call of GetConfigs.
func (mr *MockIConfigFetcherRepositoryMockRecorder) GetConfigs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigs", reflect.TypeOf((*MockIConfigFetcherRepository)(nil).GetConfigs), arg0, arg1, arg2)
}
