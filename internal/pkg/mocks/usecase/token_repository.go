// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase (interfaces: ITokenRepository)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockITokenRepository is a mock of ITokenRepository interface.
type MockITokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITokenRepositoryMockRecorder
}

// MockITokenRepositoryMockRecorder is the mock recorder for MockITokenRepository.
type MockITokenRepositoryMockRecorder struct {
	mock *MockITokenRepository
}

// NewMockITokenRepository creates a new mock instance.
func NewMockITokenRepository(ctrl *gomock.Controller) *MockITokenRepository {
	mock := &MockITokenRepository{ctrl: ctrl}
	mock.recorder = &MockITokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenRepository) EXPECT() *MockITokenRepositoryMockRecorder {
	return m.recorder
}

// FindByAddresses mocks base method.
func (m *MockITokenRepository) FindByAddresses(arg0 context.Context, arg1 []string) ([]*entity.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockITokenRepositoryMockRecorder) FindByAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockITokenRepository)(nil).FindByAddresses), arg0, arg1)
}
