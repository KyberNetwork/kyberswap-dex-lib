// Code generated by MockGen. DO NOT EDIT.
// Source: iface.go
//
// Generated by this command:
//
//	mockgen -destination ../mocks/usecase/mocks.go -source=iface.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	big "math/big"
	reflect "reflect"

	types "github.com/KyberNetwork/aggregator-encoding/pkg/types"
	entity "github.com/KyberNetwork/kyberswap-dex-lib/pkg/entity"
	pool "github.com/KyberNetwork/kyberswap-dex-lib/pkg/source/pool"
	entity0 "github.com/KyberNetwork/router-service/internal/pkg/entity"
	valueobject "github.com/KyberNetwork/router-service/internal/pkg/valueobject"
	common "github.com/ethereum/go-ethereum/common"
	gomock "go.uber.org/mock/gomock"
)

// MockIPoolRepository is a mock of IPoolRepository interface.
type MockIPoolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRepositoryMockRecorder
	isgomock struct{}
}

// MockIPoolRepositoryMockRecorder is the mock recorder for MockIPoolRepository.
type MockIPoolRepositoryMockRecorder struct {
	mock *MockIPoolRepository
}

// NewMockIPoolRepository creates a new mock instance.
func NewMockIPoolRepository(ctrl *gomock.Controller) *MockIPoolRepository {
	mock := &MockIPoolRepository{ctrl: ctrl}
	mock.recorder = &MockIPoolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRepository) EXPECT() *MockIPoolRepositoryMockRecorder {
	return m.recorder
}

// FindAllAddresses mocks base method.
func (m *MockIPoolRepository) FindAllAddresses(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAddresses", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAddresses indicates an expected call of FindAllAddresses.
func (mr *MockIPoolRepositoryMockRecorder) FindAllAddresses(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAddresses", reflect.TypeOf((*MockIPoolRepository)(nil).FindAllAddresses), ctx)
}

// FindByAddresses mocks base method.
func (m *MockIPoolRepository) FindByAddresses(ctx context.Context, addresses []string) ([]*entity.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", ctx, addresses)
	ret0, _ := ret[0].([]*entity.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockIPoolRepositoryMockRecorder) FindByAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockIPoolRepository)(nil).FindByAddresses), ctx, addresses)
}

// MockITokenRepository is a mock of ITokenRepository interface.
type MockITokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITokenRepositoryMockRecorder
	isgomock struct{}
}

// MockITokenRepositoryMockRecorder is the mock recorder for MockITokenRepository.
type MockITokenRepositoryMockRecorder struct {
	mock *MockITokenRepository
}

// NewMockITokenRepository creates a new mock instance.
func NewMockITokenRepository(ctrl *gomock.Controller) *MockITokenRepository {
	mock := &MockITokenRepository{ctrl: ctrl}
	mock.recorder = &MockITokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenRepository) EXPECT() *MockITokenRepositoryMockRecorder {
	return m.recorder
}

// FindByAddresses mocks base method.
func (m *MockITokenRepository) FindByAddresses(ctx context.Context, addresses []string) ([]*entity.SimplifiedToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", ctx, addresses)
	ret0, _ := ret[0].([]*entity.SimplifiedToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockITokenRepositoryMockRecorder) FindByAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockITokenRepository)(nil).FindByAddresses), ctx, addresses)
}

// MockITokenFullInfoRepository is a mock of ITokenFullInfoRepository interface.
type MockITokenFullInfoRepository[T entity.Token] struct {
	ctrl     *gomock.Controller
	recorder *MockITokenFullInfoRepositoryMockRecorder[T]
	isgomock struct{}
}

// MockITokenFullInfoRepositoryMockRecorder is the mock recorder for MockITokenFullInfoRepository.
type MockITokenFullInfoRepositoryMockRecorder[T entity.Token] struct {
	mock *MockITokenFullInfoRepository[T]
}

// NewMockITokenFullInfoRepository creates a new mock instance.
func NewMockITokenFullInfoRepository[T entity.Token](ctrl *gomock.Controller) *MockITokenFullInfoRepository[T] {
	mock := &MockITokenFullInfoRepository[T]{ctrl: ctrl}
	mock.recorder = &MockITokenFullInfoRepositoryMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenFullInfoRepository[T]) EXPECT() *MockITokenFullInfoRepositoryMockRecorder[T] {
	return m.recorder
}

// FindByAddresses mocks base method.
func (m *MockITokenFullInfoRepository[T]) FindByAddresses(ctx context.Context, addresses []string) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", ctx, addresses)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockITokenFullInfoRepositoryMockRecorder[T]) FindByAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockITokenFullInfoRepository[T])(nil).FindByAddresses), ctx, addresses)
}

// MockIOnchainPriceRepository is a mock of IOnchainPriceRepository interface.
type MockIOnchainPriceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIOnchainPriceRepositoryMockRecorder
	isgomock struct{}
}

// MockIOnchainPriceRepositoryMockRecorder is the mock recorder for MockIOnchainPriceRepository.
type MockIOnchainPriceRepositoryMockRecorder struct {
	mock *MockIOnchainPriceRepository
}

// NewMockIOnchainPriceRepository creates a new mock instance.
func NewMockIOnchainPriceRepository(ctrl *gomock.Controller) *MockIOnchainPriceRepository {
	mock := &MockIOnchainPriceRepository{ctrl: ctrl}
	mock.recorder = &MockIOnchainPriceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOnchainPriceRepository) EXPECT() *MockIOnchainPriceRepositoryMockRecorder {
	return m.recorder
}

// FindByAddresses mocks base method.
func (m *MockIOnchainPriceRepository) FindByAddresses(ctx context.Context, addresses []string) (map[string]*entity0.OnchainPrice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", ctx, addresses)
	ret0, _ := ret[0].(map[string]*entity0.OnchainPrice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockIOnchainPriceRepositoryMockRecorder) FindByAddresses(ctx, addresses any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockIOnchainPriceRepository)(nil).FindByAddresses), ctx, addresses)
}

// MockIConfigFetcherRepository is a mock of IConfigFetcherRepository interface.
type MockIConfigFetcherRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigFetcherRepositoryMockRecorder
	isgomock struct{}
}

// MockIConfigFetcherRepositoryMockRecorder is the mock recorder for MockIConfigFetcherRepository.
type MockIConfigFetcherRepositoryMockRecorder struct {
	mock *MockIConfigFetcherRepository
}

// NewMockIConfigFetcherRepository creates a new mock instance.
func NewMockIConfigFetcherRepository(ctrl *gomock.Controller) *MockIConfigFetcherRepository {
	mock := &MockIConfigFetcherRepository{ctrl: ctrl}
	mock.recorder = &MockIConfigFetcherRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigFetcherRepository) EXPECT() *MockIConfigFetcherRepositoryMockRecorder {
	return m.recorder
}

// GetConfigs mocks base method.
func (m *MockIConfigFetcherRepository) GetConfigs(ctx context.Context, serviceCode, currentHash string) (valueobject.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigs", ctx, serviceCode, currentHash)
	ret0, _ := ret[0].(valueobject.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigs indicates an expected call of GetConfigs.
func (mr *MockIConfigFetcherRepositoryMockRecorder) GetConfigs(ctx, serviceCode, currentHash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigs", reflect.TypeOf((*MockIConfigFetcherRepository)(nil).GetConfigs), ctx, serviceCode, currentHash)
}

// MockIPoolRankRepository is a mock of IPoolRankRepository interface.
type MockIPoolRankRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRankRepositoryMockRecorder
	isgomock struct{}
}

// MockIPoolRankRepositoryMockRecorder is the mock recorder for MockIPoolRankRepository.
type MockIPoolRankRepositoryMockRecorder struct {
	mock *MockIPoolRankRepository
}

// NewMockIPoolRankRepository creates a new mock instance.
func NewMockIPoolRankRepository(ctrl *gomock.Controller) *MockIPoolRankRepository {
	mock := &MockIPoolRankRepository{ctrl: ctrl}
	mock.recorder = &MockIPoolRankRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRankRepository) EXPECT() *MockIPoolRankRepositoryMockRecorder {
	return m.recorder
}

// AddToSortedSet mocks base method.
func (m *MockIPoolRankRepository) AddToSortedSet(ctx context.Context, token0, token1 string, isToken0Whitelisted, isToken1Whitelisted bool, key, memberName string, score float64, useGlobal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToSortedSet", ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, score, useGlobal)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToSortedSet indicates an expected call of AddToSortedSet.
func (mr *MockIPoolRankRepositoryMockRecorder) AddToSortedSet(ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, score, useGlobal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToSortedSet", reflect.TypeOf((*MockIPoolRankRepository)(nil).AddToSortedSet), ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, score, useGlobal)
}

// GetDirectIndexLength mocks base method.
func (m *MockIPoolRankRepository) GetDirectIndexLength(ctx context.Context, key, token0, token1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDirectIndexLength", ctx, key, token0, token1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDirectIndexLength indicates an expected call of GetDirectIndexLength.
func (mr *MockIPoolRankRepositoryMockRecorder) GetDirectIndexLength(ctx, key, token0, token1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDirectIndexLength", reflect.TypeOf((*MockIPoolRankRepository)(nil).GetDirectIndexLength), ctx, key, token0, token1)
}

// RemoveAddressesFromWhitelistIndex mocks base method.
func (m *MockIPoolRankRepository) RemoveAddressesFromWhitelistIndex(ctx context.Context, key string, pools []string, removeFromGlobal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAddressesFromWhitelistIndex", ctx, key, pools, removeFromGlobal)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAddressesFromWhitelistIndex indicates an expected call of RemoveAddressesFromWhitelistIndex.
func (mr *MockIPoolRankRepositoryMockRecorder) RemoveAddressesFromWhitelistIndex(ctx, key, pools, removeFromGlobal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAddressesFromWhitelistIndex", reflect.TypeOf((*MockIPoolRankRepository)(nil).RemoveAddressesFromWhitelistIndex), ctx, key, pools, removeFromGlobal)
}

// RemoveFromSortedSet mocks base method.
func (m *MockIPoolRankRepository) RemoveFromSortedSet(ctx context.Context, token0, token1 string, isToken0Whitelisted, isToken1Whitelisted bool, key, memberName string, useGlobal bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromSortedSet", ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, useGlobal)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromSortedSet indicates an expected call of RemoveFromSortedSet.
func (mr *MockIPoolRankRepositoryMockRecorder) RemoveFromSortedSet(ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, useGlobal any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromSortedSet", reflect.TypeOf((*MockIPoolRankRepository)(nil).RemoveFromSortedSet), ctx, token0, token1, isToken0Whitelisted, isToken1Whitelisted, key, memberName, useGlobal)
}

// MockIGasRepository is a mock of IGasRepository interface.
type MockIGasRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIGasRepositoryMockRecorder
	isgomock struct{}
}

// MockIGasRepositoryMockRecorder is the mock recorder for MockIGasRepository.
type MockIGasRepositoryMockRecorder struct {
	mock *MockIGasRepository
}

// NewMockIGasRepository creates a new mock instance.
func NewMockIGasRepository(ctrl *gomock.Controller) *MockIGasRepository {
	mock := &MockIGasRepository{ctrl: ctrl}
	mock.recorder = &MockIGasRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGasRepository) EXPECT() *MockIGasRepositoryMockRecorder {
	return m.recorder
}

// GetSuggestedGasPrice mocks base method.
func (m *MockIGasRepository) GetSuggestedGasPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSuggestedGasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSuggestedGasPrice indicates an expected call of GetSuggestedGasPrice.
func (mr *MockIGasRepositoryMockRecorder) GetSuggestedGasPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSuggestedGasPrice", reflect.TypeOf((*MockIGasRepository)(nil).GetSuggestedGasPrice), ctx)
}

// UpdateSuggestedGasPrice mocks base method.
func (m *MockIGasRepository) UpdateSuggestedGasPrice(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSuggestedGasPrice", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSuggestedGasPrice indicates an expected call of UpdateSuggestedGasPrice.
func (mr *MockIGasRepositoryMockRecorder) UpdateSuggestedGasPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSuggestedGasPrice", reflect.TypeOf((*MockIGasRepository)(nil).UpdateSuggestedGasPrice), ctx)
}

// MockIClientDataEncoder is a mock of IClientDataEncoder interface.
type MockIClientDataEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockIClientDataEncoderMockRecorder
	isgomock struct{}
}

// MockIClientDataEncoderMockRecorder is the mock recorder for MockIClientDataEncoder.
type MockIClientDataEncoderMockRecorder struct {
	mock *MockIClientDataEncoder
}

// NewMockIClientDataEncoder creates a new mock instance.
func NewMockIClientDataEncoder(ctrl *gomock.Controller) *MockIClientDataEncoder {
	mock := &MockIClientDataEncoder{ctrl: ctrl}
	mock.recorder = &MockIClientDataEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClientDataEncoder) EXPECT() *MockIClientDataEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockIClientDataEncoder) Encode(ctx context.Context, data types.ClientData) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", ctx, data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockIClientDataEncoderMockRecorder) Encode(ctx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockIClientDataEncoder)(nil).Encode), ctx, data)
}

// MockIEncoder is a mock of IEncoder interface.
type MockIEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockIEncoderMockRecorder
	isgomock struct{}
}

// MockIEncoderMockRecorder is the mock recorder for MockIEncoder.
type MockIEncoderMockRecorder struct {
	mock *MockIEncoder
}

// NewMockIEncoder creates a new mock instance.
func NewMockIEncoder(ctrl *gomock.Controller) *MockIEncoder {
	mock := &MockIEncoder{ctrl: ctrl}
	mock.recorder = &MockIEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEncoder) EXPECT() *MockIEncoderMockRecorder {
	return m.recorder
}

// Encode mocks base method.
func (m *MockIEncoder) Encode(data types.EncodingData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encode indicates an expected call of Encode.
func (mr *MockIEncoderMockRecorder) Encode(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockIEncoder)(nil).Encode), data)
}

// GetExecutorAddress mocks base method.
func (m *MockIEncoder) GetExecutorAddress(clientID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutorAddress", clientID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetExecutorAddress indicates an expected call of GetExecutorAddress.
func (mr *MockIEncoderMockRecorder) GetExecutorAddress(clientID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutorAddress", reflect.TypeOf((*MockIEncoder)(nil).GetExecutorAddress), clientID)
}

// GetRouterAddress mocks base method.
func (m *MockIEncoder) GetRouterAddress() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterAddress")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRouterAddress indicates an expected call of GetRouterAddress.
func (mr *MockIEncoderMockRecorder) GetRouterAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterAddress", reflect.TypeOf((*MockIEncoder)(nil).GetRouterAddress))
}

// MockIPoolFactory is a mock of IPoolFactory interface.
type MockIPoolFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolFactoryMockRecorder
	isgomock struct{}
}

// MockIPoolFactoryMockRecorder is the mock recorder for MockIPoolFactory.
type MockIPoolFactoryMockRecorder struct {
	mock *MockIPoolFactory
}

// NewMockIPoolFactory creates a new mock instance.
func NewMockIPoolFactory(ctrl *gomock.Controller) *MockIPoolFactory {
	mock := &MockIPoolFactory{ctrl: ctrl}
	mock.recorder = &MockIPoolFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolFactory) EXPECT() *MockIPoolFactoryMockRecorder {
	return m.recorder
}

// NewPoolByAddress mocks base method.
func (m *MockIPoolFactory) NewPoolByAddress(ctx context.Context, pools []*entity.Pool, stateRoot common.Hash) map[string]pool.IPoolSimulator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPoolByAddress", ctx, pools, stateRoot)
	ret0, _ := ret[0].(map[string]pool.IPoolSimulator)
	return ret0
}

// NewPoolByAddress indicates an expected call of NewPoolByAddress.
func (mr *MockIPoolFactoryMockRecorder) NewPoolByAddress(ctx, pools, stateRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPoolByAddress", reflect.TypeOf((*MockIPoolFactory)(nil).NewPoolByAddress), ctx, pools, stateRoot)
}

// NewPools mocks base method.
func (m *MockIPoolFactory) NewPools(ctx context.Context, pools []*entity.Pool, stateRoot common.Hash) []pool.IPoolSimulator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPools", ctx, pools, stateRoot)
	ret0, _ := ret[0].([]pool.IPoolSimulator)
	return ret0
}

// NewPools indicates an expected call of NewPools.
func (mr *MockIPoolFactoryMockRecorder) NewPools(ctx, pools, stateRoot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPools", reflect.TypeOf((*MockIPoolFactory)(nil).NewPools), ctx, pools, stateRoot)
}
