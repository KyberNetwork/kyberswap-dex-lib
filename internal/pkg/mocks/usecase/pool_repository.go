// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/usecase (interfaces: IPoolRepository)

// Package usecase is a generated GoMock package.
package usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/KyberNetwork/router-service/internal/pkg/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIPoolRepository is a mock of IPoolRepository interface.
type MockIPoolRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPoolRepositoryMockRecorder
}

// MockIPoolRepositoryMockRecorder is the mock recorder for MockIPoolRepository.
type MockIPoolRepositoryMockRecorder struct {
	mock *MockIPoolRepository
}

// NewMockIPoolRepository creates a new mock instance.
func NewMockIPoolRepository(ctrl *gomock.Controller) *MockIPoolRepository {
	mock := &MockIPoolRepository{ctrl: ctrl}
	mock.recorder = &MockIPoolRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPoolRepository) EXPECT() *MockIPoolRepositoryMockRecorder {
	return m.recorder
}

// FindByAddresses mocks base method.
func (m *MockIPoolRepository) FindByAddresses(arg0 context.Context, arg1 []string) ([]entity.Pool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAddresses", arg0, arg1)
	ret0, _ := ret[0].([]entity.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAddresses indicates an expected call of FindByAddresses.
func (mr *MockIPoolRepositoryMockRecorder) FindByAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAddresses", reflect.TypeOf((*MockIPoolRepository)(nil).FindByAddresses), arg0, arg1)
}
