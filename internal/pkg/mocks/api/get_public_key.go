// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/api (interfaces: IGetPublicKeyUseCase)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/api/get_public_key.go -package api github.com/KyberNetwork/router-service/internal/pkg/api IGetPublicKeyUseCase
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	dto "github.com/KyberNetwork/router-service/internal/pkg/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIGetPublicKeyUseCase is a mock of IGetPublicKeyUseCase interface.
type MockIGetPublicKeyUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetPublicKeyUseCaseMockRecorder
	isgomock struct{}
}

// MockIGetPublicKeyUseCaseMockRecorder is the mock recorder for MockIGetPublicKeyUseCase.
type MockIGetPublicKeyUseCaseMockRecorder struct {
	mock *MockIGetPublicKeyUseCase
}

// NewMockIGetPublicKeyUseCase creates a new mock instance.
func NewMockIGetPublicKeyUseCase(ctrl *gomock.Controller) *MockIGetPublicKeyUseCase {
	mock := &MockIGetPublicKeyUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetPublicKeyUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetPublicKeyUseCase) EXPECT() *MockIGetPublicKeyUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIGetPublicKeyUseCase) Handle(ctx context.Context, keyID string) (*dto.GetPublicKeyResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, keyID)
	ret0, _ := ret[0].(*dto.GetPublicKeyResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIGetPublicKeyUseCaseMockRecorder) Handle(ctx, keyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIGetPublicKeyUseCase)(nil).Handle), ctx, keyID)
}
