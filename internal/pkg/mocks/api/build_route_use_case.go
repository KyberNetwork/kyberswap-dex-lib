// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/api (interfaces: IBuildRouteUseCase)

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	dto "github.com/KyberNetwork/kyberswap-aggregator/internal/pkg/usecase/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIBuildRouteUseCase is a mock of IBuildRouteUseCase interface.
type MockIBuildRouteUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIBuildRouteUseCaseMockRecorder
}

// MockIBuildRouteUseCaseMockRecorder is the mock recorder for MockIBuildRouteUseCase.
type MockIBuildRouteUseCaseMockRecorder struct {
	mock *MockIBuildRouteUseCase
}

// NewMockIBuildRouteUseCase creates a new mock instance.
func NewMockIBuildRouteUseCase(ctrl *gomock.Controller) *MockIBuildRouteUseCase {
	mock := &MockIBuildRouteUseCase{ctrl: ctrl}
	mock.recorder = &MockIBuildRouteUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBuildRouteUseCase) EXPECT() *MockIBuildRouteUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIBuildRouteUseCase) Handle(arg0 context.Context, arg1 dto.BuildRouteCommand) (*dto.BuildRouteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", arg0, arg1)
	ret0, _ := ret[0].(*dto.BuildRouteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIBuildRouteUseCaseMockRecorder) Handle(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIBuildRouteUseCase)(nil).Handle), arg0, arg1)
}
