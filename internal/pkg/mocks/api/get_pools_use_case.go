// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/api (interfaces: IGetPoolsUseCase)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/api/get_pools_use_case.go -package api github.com/KyberNetwork/router-service/internal/pkg/api IGetPoolsUseCase
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	dto "github.com/KyberNetwork/router-service/internal/pkg/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIGetPoolsUseCase is a mock of IGetPoolsUseCase interface.
type MockIGetPoolsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetPoolsUseCaseMockRecorder
	isgomock struct{}
}

// MockIGetPoolsUseCaseMockRecorder is the mock recorder for MockIGetPoolsUseCase.
type MockIGetPoolsUseCaseMockRecorder struct {
	mock *MockIGetPoolsUseCase
}

// NewMockIGetPoolsUseCase creates a new mock instance.
func NewMockIGetPoolsUseCase(ctrl *gomock.Controller) *MockIGetPoolsUseCase {
	mock := &MockIGetPoolsUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetPoolsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetPoolsUseCase) EXPECT() *MockIGetPoolsUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIGetPoolsUseCase) Handle(ctx context.Context, query dto.GetPoolsQuery) (*dto.GetPoolsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(*dto.GetPoolsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIGetPoolsUseCaseMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIGetPoolsUseCase)(nil).Handle), ctx, query)
}
