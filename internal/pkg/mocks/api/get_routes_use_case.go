// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/api (interfaces: IGetRoutesUseCase)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/api/get_routes_use_case.go -package api github.com/KyberNetwork/router-service/internal/pkg/api IGetRoutesUseCase
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	dto "github.com/KyberNetwork/router-service/internal/pkg/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIGetRoutesUseCase is a mock of IGetRoutesUseCase interface.
type MockIGetRoutesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetRoutesUseCaseMockRecorder
	isgomock struct{}
}

// MockIGetRoutesUseCaseMockRecorder is the mock recorder for MockIGetRoutesUseCase.
type MockIGetRoutesUseCaseMockRecorder struct {
	mock *MockIGetRoutesUseCase
}

// NewMockIGetRoutesUseCase creates a new mock instance.
func NewMockIGetRoutesUseCase(ctrl *gomock.Controller) *MockIGetRoutesUseCase {
	mock := &MockIGetRoutesUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetRoutesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetRoutesUseCase) EXPECT() *MockIGetRoutesUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIGetRoutesUseCase) Handle(ctx context.Context, query dto.GetRoutesQuery) (*dto.GetRoutesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(*dto.GetRoutesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIGetRoutesUseCaseMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIGetRoutesUseCase)(nil).Handle), ctx, query)
}
