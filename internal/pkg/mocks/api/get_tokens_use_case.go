// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KyberNetwork/router-service/internal/pkg/api (interfaces: IGetTokensUseCase)
//
// Generated by this command:
//
//	mockgen -destination ../mocks/api/get_tokens_use_case.go -package api github.com/KyberNetwork/router-service/internal/pkg/api IGetTokensUseCase
//

// Package api is a generated GoMock package.
package api

import (
	context "context"
	reflect "reflect"

	dto "github.com/KyberNetwork/router-service/internal/pkg/usecase/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockIGetTokensUseCase is a mock of IGetTokensUseCase interface.
type MockIGetTokensUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIGetTokensUseCaseMockRecorder
	isgomock struct{}
}

// MockIGetTokensUseCaseMockRecorder is the mock recorder for MockIGetTokensUseCase.
type MockIGetTokensUseCaseMockRecorder struct {
	mock *MockIGetTokensUseCase
}

// NewMockIGetTokensUseCase creates a new mock instance.
func NewMockIGetTokensUseCase(ctrl *gomock.Controller) *MockIGetTokensUseCase {
	mock := &MockIGetTokensUseCase{ctrl: ctrl}
	mock.recorder = &MockIGetTokensUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIGetTokensUseCase) EXPECT() *MockIGetTokensUseCaseMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockIGetTokensUseCase) Handle(ctx context.Context, query dto.GetTokensQuery) (*dto.GetTokensResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(*dto.GetTokensResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockIGetTokensUseCaseMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockIGetTokensUseCase)(nil).Handle), ctx, query)
}
