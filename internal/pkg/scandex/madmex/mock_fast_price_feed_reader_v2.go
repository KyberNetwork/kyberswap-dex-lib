// Code generated by MockGen. DO NOT EDIT.
// Source: dmm-aggregator-backend/internal/pkg/scandex/gmx (interfaces: IFastPriceFeedV2Reader)

// Package gmx is a generated GoMock package.
package madmex

import (
	reflect "reflect"

	context "context"

	gomock "github.com/golang/mock/gomock"
)

// MockIFastPriceFeedV2Reader is a mock of IFastPriceFeedV2Reader interface.
type MockIFastPriceFeedV2Reader struct {
	ctrl     *gomock.Controller
	recorder *MockIFastPriceFeedV2ReaderMockRecorder
}

// MockIFastPriceFeedV2ReaderMockRecorder is the mock recorder for MockIFastPriceFeedV2Reader.
type MockIFastPriceFeedV2ReaderMockRecorder struct {
	mock *MockIFastPriceFeedV2Reader
}

// NewMockIFastPriceFeedV2Reader creates a new mock instance.
func NewMockIFastPriceFeedV2Reader(ctrl *gomock.Controller) *MockIFastPriceFeedV2Reader {
	mock := &MockIFastPriceFeedV2Reader{ctrl: ctrl}
	mock.recorder = &MockIFastPriceFeedV2ReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFastPriceFeedV2Reader) EXPECT() *MockIFastPriceFeedV2ReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockIFastPriceFeedV2Reader) Read(arg0 context.Context, arg1 string, arg2 []string) (*FastPriceFeedV2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0, arg1, arg2)
	ret0, _ := ret[0].(*FastPriceFeedV2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockIFastPriceFeedV2ReaderMockRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockIFastPriceFeedV2Reader)(nil).Read), arg0, arg1, arg2)
}
