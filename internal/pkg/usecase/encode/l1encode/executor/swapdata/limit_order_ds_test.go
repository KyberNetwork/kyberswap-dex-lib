package swapdata

import (
	"fmt"
	"math/big"
	"testing"

	"github.com/KyberNetwork/router-service/internal/pkg/usecase/types"
	"github.com/KyberNetwork/router-service/internal/pkg/utils"
	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var packLimitOrderDSSwapPairs = []struct {
	data       KyberLimitOrderDS
	packedData string
}{
	{
		data: KyberLimitOrderDS{
			KyberLOAddress: common.HexToAddress("0x65c945210402a282facaabdae54dedbac7090e54"),
			MakerAsset:     common.HexToAddress("0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"),
			TakerAsset:     common.HexToAddress("0xc2132d05d31c914a87c6611c10748aeb04b58e8f"),
			Params: FillBatchOrdersParamsDS{
				Orders: []OrderDS{
					{
						Salt:           utils.NewBig10("127142998885191083622271093103491932547"),
						MakerAsset:     common.HexToAddress("0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"),
						TakerAsset:     common.HexToAddress("0xc2132d05d31c914a87c6611c10748aeb04b58e8f"),
						Maker:          common.HexToAddress("0x4aaf59cbbaf7fbdbbe24d0186a9ea03875d9ada5"),
						Receiver:       common.HexToAddress("0x4aaf59cbbaf7fbdbbe24d0186a9ea03875d9ada5"),
						AllowedSender:  common.HexToAddress("0x0000000000000000000000000000000000000000"),
						TakingAmount:   big.NewInt(1000000),
						MakingAmount:   big.NewInt(100000000000000000),
						FeeConfig:      utils.NewBig("146159165624476364475945418325124367680971254365544"),
						MakerAssetData: []byte{},
						TakerAssetData: []byte{},
						GetMakerAmount: common.Hex2Bytes("f4a215c3000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000f4240"),
						GetTakerAmount: common.Hex2Bytes("296637bf000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000f4240"),
						Predicate:      common.Hex2Bytes("961d5b1e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000065c945210402a282facaabdae54dedbac7090e5400000000000000000000000065c945210402a282facaabdae54dedbac7090e540000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044cf6fc6e30000000000000000000000004aaf59cbbaf7fbdbbe24d0186a9ea03875d9ada5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002463592c2b00000000000000000000000000000000000000000000000000000000650a558500000000000000000000000000000000000000000000000000000000"),
						Interaction:    []byte{},
					},
				},
				Signatures: []Signature{
					{
						OrderSignature: common.Hex2Bytes("564111ada586b6be45c406a0b6f4c1c0dfd2663c612ba280ca9a5944de69644b575c518d5618a66b0dfd1b1b10607c033dc6006ae38c7a4dc4fe9c5d1bec75481b"),
						OpSignature:    common.Hex2Bytes("b0b4a1d79dac9af74c46f25e657d88b1c435876164b7b070ab10ab32fbb2755e11fc1e78c166f60da7df485d4c9a3de897262ba8a9180466327d4d9a347097621c"),
					},
				},
				OpExpireTimes:   []uint32{1694656567},
				TakingAmount:    big.NewInt(60000),
				ThresholdAmount: new(big.Int).Sub(big.NewInt(1), big.NewInt(1)), // to get around assert unpack
				Target:          [20]byte{},
			},
		},
		packedData: "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000065c945210402a282facaabdae54dedbac7090e540000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000007e0000000000000000000000000000000000000000000000000000000000000ea600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000005fa6d9d316e1467c80d47cf05089e1830000000000000000000000000d500b1d8e8ef31e21c99d1db9a6444d3adf1270000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f0000000000000000000000004aaf59cbbaf7fbdbbe24d0186a9ea03875d9ada50000000000000000000000004aaf59cbbaf7fbdbbe24d0186a9ea03875d9ada50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000640193a8a52d77e27bdd4f12e0cdd52d8ff1d97d6800000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044f4a215c3000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044296637bf000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e4961d5b1e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000200000000000000000000000065c945210402a282facaabdae54dedbac7090e5400000000000000000000000065c945210402a282facaabdae54dedbac7090e540000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044cf6fc6e30000000000000000000000004aaf59cbbaf7fbdbbe24d0186a9ea03875d9ada5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002463592c2b00000000000000000000000000000000000000000000000000000000650a55850000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000041564111ada586b6be45c406a0b6f4c1c0dfd2663c612ba280ca9a5944de69644b575c518d5618a66b0dfd1b1b10607c033dc6006ae38c7a4dc4fe9c5d1bec75481b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041b0b4a1d79dac9af74c46f25e657d88b1c435876164b7b070ab10ab32fbb2755e11fc1e78c166f60da7df485d4c9a3de897262ba8a9180466327d4d9a347097621c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000065026837",
	},
}

func Test_packLimitOrderDSSwap(t *testing.T) {
	for idx, pair := range packLimitOrderDSSwapPairs {
		t.Run(fmt.Sprintf("it should pack correctly %d", idx), func(t *testing.T) {
			result, err := packKyberLimitOrderDS(pair.data)
			require.Nil(t, err)
			assert.Equal(t, pair.packedData, common.Bytes2Hex(result))
		})
	}
}

func TestUnpackLimitOrderDSSwap(t *testing.T) {
	for idx, pair := range packLimitOrderDSSwapPairs {
		t.Run(fmt.Sprintf("it should decode correctly %d", idx), func(t *testing.T) {
			result, err := UnpackKyberLimitOrderDS(common.Hex2Bytes(pair.packedData))
			require.Nil(t, err)
			assert.EqualValues(t, pair.data, result)
		})
	}
}

func TestPackKyberLimitOrderDS(t *testing.T) {
	testCases := []struct {
		name         string
		encodingSwap types.EncodingSwap
		assert       func(t *testing.T, actualResult []byte, actualErr error)
	}{
		{
			name: "1. PoolExtra is nil",
			encodingSwap: types.EncodingSwap{
				Pool: "limit-order",
			},
			assert: func(t *testing.T, actualResult []byte, actualErr error) {
				assert.Equal(t, []uint8([]byte(nil)), actualResult)
				assert.EqualError(t, actualErr, "[PackKyberLimitOrderDS] PoolExtra is nil")
			},
		},
		{
			name: "2. PoolExtra is not string",
			encodingSwap: types.EncodingSwap{
				Pool:      "limit-order",
				PoolExtra: 1,
			},
			assert: func(t *testing.T, actualResult []byte, actualErr error) {
				assert.Equal(t, []uint8([]byte(nil)), actualResult)
				assert.EqualError(t, actualErr, "[PackKyberLimitOrderDS] Invalid LO contract address: 1, pool: limit-order")
			},
		},
		{
			name: "3. PoolExtra is not an address",
			encodingSwap: types.EncodingSwap{
				Pool:      "limit-order",
				PoolExtra: "0x00",
			},
			assert: func(t *testing.T, actualResult []byte, actualErr error) {
				assert.Equal(t, []uint8([]byte(nil)), actualResult)
				assert.EqualError(t, actualErr, "[PackKyberLimitOrderDS] Invalid LO contract address: 0x00, pool: limit-order")
			},
		},
		{
			name: "4. Get contract address successfully",
			encodingSwap: types.EncodingSwap{
				Pool:      "limit-order",
				PoolExtra: "0xef09879057a9ad798438f3ba561bcdd293d72fc7",
				Extra: map[string]interface{}{
					"amountIn": "60000000000",
					"filledOrders": []map[string]interface{}{
						{
							"orderID":              1,
							"salt":                 "135786982651412687203851465093295409688",
							"makerAsset":           "0x1a30c9ed6436e03d506227a362b2cbf59a303967",
							"takerAsset":           "0x4f6519025e6de0edb6e4901827c1956ce18c39d3",
							"maker":                "0xef09879057a9ad798438f3ba561bcdd293d72fc7",
							"receiver":             "0xef09879057a9ad798438f3ba561bcdd293d72fc7",
							"takingAmount":         "60000000000",
							"makingAmount":         "60000000000",
							"feeRecipient":         "0x0000000000000000000000000000000000000000",
							"makerTokenFeePercent": 22,
							"feeConfig":            "146159165624476364475945418325124367680971254365544",
						},
					},
					"operatorSignaturesById": map[int64]interface{}{
						1: map[string]interface{}{
							"id":                         1,
							"chainId":                    "1",
							"operatorSignature":          "b0b4a1d79dac9af74c46f25e657d88b1c435876164b7b070ab10ab32fbb2755e11fc1e78c166f60da7df485d4c9a3de897262ba8a9180466327d4d9a347097621c",
							"operatorSignatureExpiredAt": 1694656567,
						},
					},
				},
			},
			assert: func(t *testing.T, actualResult []byte, actualErr error) {
				assert.NotNil(t, actualResult)
				assert.NoError(t, actualErr)
			},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result, err := PackKyberLimitOrderDS(1, tc.encodingSwap)
			tc.assert(t, result, err)
		})
	}
}
