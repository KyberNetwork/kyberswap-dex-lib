package swapdata

import (
	"encoding/hex"
	"fmt"
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/assert"
)

var packLimitOrderSwapPairs = []struct {
	data       KyberLimitOrder
	packedData string
}{
	{
		data: KyberLimitOrder{
			KyberLOAddress: common.HexToAddress("0x973B1847407C579a58E610e5f12003996C5a4f16"),
			MakerAsset:     common.HexToAddress("0x1a30c9ed6436e03d506227a362b2cbf59a303967"),
			Params: FillBatchOrdersParams{
				Orders: []Order{
					{
						Salt:                 parseBigInt("135786982651412687203851465093295409688"),
						MakerAsset:           common.HexToAddress("0x1a30c9ed6436e03d506227a362b2cbf59a303967"),
						TakerAsset:           common.HexToAddress("0x4f6519025e6de0edb6e4901827c1956ce18c39d3"),
						Maker:                common.HexToAddress("0xef09879057a9ad798438f3ba561bcdd293d72fc7"),
						Receiver:             common.HexToAddress("0xef09879057a9ad798438f3ba561bcdd293d72fc7"),
						AllowedSender:        common.HexToAddress("0x0000000000000000000000000000000000000000"),
						TakingAmount:         big.NewInt(60000000000),
						MakingAmount:         big.NewInt(60000000000),
						FeeRecipient:         common.HexToAddress("0x0000000000000000000000000000000000000000"),
						MakerTokenFeePercent: 22,
						MakerAssetData:       []byte("a"),
						TakerAssetData:       []byte("b"),
						GetMakerAmount:       []byte("f4a215c3000000000000000000000000000000000000000000000001d7d843dc3b4800000000000000000000000000000000000000000000000000000de0b6b3a7640000"),
						GetTakerAmount:       []byte("296637bf000000000000000000000000000000000000000000000001d7d843dc3b4800000000000000000000000000000000000000000000000000000de0b6b3a7640000"),
						Predicate:            []byte("961d5b1e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002892e28b58ab329741f27fd1ea56dca0192a38840000000000000000000000002892e28b58ab329741f27fd1ea56dca0192a38840000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044cf6fc6e3000000000000000000000000a246ec8bf7f2e54cc2f7bfdd869302ae4a08a590000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002463592c2b0000000000000000000000000000000000000000000000000000000063c1169800000000000000000000000000000000000000000000000000000000"),
						Permit:               []byte(""),
						Interaction:          []byte(""),
					},
					{
						Salt:                 parseBigInt("185786982651412687203851465093295409688"),
						MakerAsset:           common.HexToAddress("0x1a30c9ed6436e03d506227a362b2cbf59a303967"),
						TakerAsset:           common.HexToAddress("0x4f6519025e6de0edb6e4901827c1956ce18c39d3"),
						Maker:                common.HexToAddress("0xef09879057a9ad798438f3ba561bcdd293d72fc7"),
						Receiver:             common.HexToAddress("0xef09879057a9ad798438f3ba561bcdd293d72fc7"),
						AllowedSender:        common.HexToAddress("0x0000000000000000000000000000000000000000"),
						TakingAmount:         big.NewInt(40000000000),
						MakingAmount:         big.NewInt(50000000000),
						FeeRecipient:         common.HexToAddress("0x0000000000000000000000000000000000000000"),
						MakerTokenFeePercent: 22,
						MakerAssetData:       []byte("a"),
						TakerAssetData:       []byte("b"),
						GetMakerAmount:       []byte("f4a215c3000000000000000000000000000000000000000000000001d7d843dc3b4800000000000000000000000000000000000000000000000000000de0b6b3a7640000"),
						GetTakerAmount:       []byte("296637bf000000000000000000000000000000000000000000000001d7d843dc3b4800000000000000000000000000000000000000000000000000000de0b6b3a7640000"),
						Predicate:            []byte("961d5b1e000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002892e28b58ab329741f27fd1ea56dca0192a38840000000000000000000000002892e28b58ab329741f27fd1ea56dca0192a38840000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000044cf6fc6e3000000000000000000000000a246ec8bf7f2e54cc2f7bfdd869302ae4a08a590000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002463592c2b0000000000000000000000000000000000000000000000000000000063c1169800000000000000000000000000000000000000000000000000000000"),
						Permit:               []byte(""),
						Interaction:          []byte(""),
					},
				},
				Signatures:      [][]byte{[]byte("a"), []byte("b")},
				TakingAmount:    big.NewInt(10000000000),
				ThresholdAmount: new(big.Int).SetInt64(1),
				Target:          common.HexToAddress(""),
			},

			isFirstSwap: true,
		},
		packedData: "000000973b1847407c579a58e610e5f12003996c5a4f161a30c9ed6436e03d506227a362b2cbf59a3039670266279f20d372e378a056297a78308a181a30c9ed6436e03d506227a362b2cbf59a3039674f6519025e6de0edb6e4901827c1956ce18c39d3ef09879057a9ad798438f3ba561bcdd293d72fc7ef09879057a9ad798438f3ba561bcdd293d72fc7000000000000000000000000000000000000000000000000000000000000000df847580000000000000000000000000dfcbc5457500b645b5a51b3a9a78308a181a30c9ed6436e03d506227a362b2cbf59a3039674f6519025e6de0edb6e4901827c1956ce18c39d3ef09879057a9ad798438f3ba561bcdd293d72fc7ef09879057a9ad798438f3ba561bcdd293d72fc7000000000000000000000000000000000000000000000000000000000000000ba43b7400000000000000000000000009502fcbe400000000000000000000000000000000010000000000000000000000000000000000000000",
	},
}

func TestPackLimitOrderSwap(t *testing.T) {
	for idx, pair := range packLimitOrderSwapPairs {
		t.Run(fmt.Sprintf("it should pack correctly %d", idx), func(t *testing.T) {
			result, err := packKyberLimitOrder(pair.data)
			assert.ErrorIs(t, err, nil)
			assert.Equal(t, pair.packedData, hex.EncodeToString(result))
		})
	}
}

func TestUnpackLimitOrderSwap(t *testing.T) {
	t.Parallel()

	for idx, pair := range packLimitOrderSwapPairs {
		t.Run(fmt.Sprintf("it should decode correctly %d", idx), func(t *testing.T) {
			result, err := UnpackKyberLimitOrder(
				common.Hex2Bytes(pair.packedData),
				pair.data.isFirstSwap,
			)

			assert.ErrorIs(t, err, nil)
			assert.EqualValues(t, pair.data, result)
		})
	}
}

func parseBigInt(value string) *big.Int {
	bigIntValue, _ := new(big.Int).SetString(value, 10)
	return bigIntValue
}
