package encode

import (
	"math/big"
	"testing"

	"github.com/stretchr/testify/assert"

	"github.com/KyberNetwork/router-service/internal/pkg/usecase/types"
	"github.com/KyberNetwork/router-service/internal/pkg/valueobject"
)

func TestEncoder_Encode(t *testing.T) {
	t.Parallel()

	testCases := []struct {
		name           string
		encodingData   types.EncodingData
		expectedResult string
		expectedError  error
	}{
		{
			name: "it should encode normal successfully",
			encodingData: types.EncodingData{
				EncodingMode:      types.EncodingModeNormal,
				TokenIn:           "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
				TokenOut:          "0xe9e7cea3dedca5984780bafc599bd69add087d56",
				Deadline:          big.NewInt(1671014935),
				Recipient:         "0x0000000000000000000000000000000000000000",
				InputAmount:       big.NewInt(1000000000000000000),
				OutputAmount:      big.NewInt(2728389477311790479),
				SlippageTolerance: big.NewInt(2000),
				Route: [][]types.EncodingSwap{
					{
						{
							Pool:       "0xfeafe253802b77456b4627f8c2306a9cebb5d681",
							TokenIn:    "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
							TokenOut:   "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
							Exchange:   valueobject.ExchangeDodo,
							SwapAmount: big.NewInt(1000000000000000000),
							PoolExtra: struct {
								Type             string
								DodoV1SellHelper string
								BaseToken        string
								QuoteToken       string
							}{
								Type:             "",
								DodoV1SellHelper: "0x0f859706aee7fcf61d5a8939e8cb9dbb6c1eda33",
								BaseToken:        "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
								QuoteToken:       "0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c",
							},
						},
					},
				},
			},
			expectedResult: "0xe21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000d250af9a5c439294b1b4baba2ebe4308382d1a41000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003e000000000000000000000000000000000000000000000000000000000000005e00000000000000000000000000000000000000000000000000000000000000320000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000001f8da7cfc8bc5df7000000000000000000000000a270e7506dd1b6fa8a4d1d14a53a6a80afc4fd4d000000000000000000000000000000000000000000000000000000006399aa1700000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000408a5da90f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000feafe253802b77456b4627f8c2306a9cebb5d681000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c0000000000000000000000000000000000000000000000000de0b6b3a764000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f859706aee7fcf61d5a8939e8cb9dbb6c1eda33000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000001f8da7cfc8bc5df7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			name: "it should encode simple successfully",
			encodingData: types.EncodingData{
				EncodingMode:      types.EncodingModeSimple,
				TokenIn:           "0x55d398326f99059ff775485246999027b3197955",
				TokenOut:          "0xe9e7cea3dedca5984780bafc599bd69add087d56",
				Deadline:          big.NewInt(1671014935),
				Recipient:         "0x0000000000000000000000000000000000000000",
				InputAmount:       big.NewInt(1000000000000000000),
				OutputAmount:      big.NewInt(2728389477311790479),
				SlippageTolerance: big.NewInt(2000),
				Route: [][]types.EncodingSwap{
					{
						{
							Pool:              "0x7efaef62fddcca950418312c6c91aef321375a00",
							TokenIn:           "0x55d398326f99059ff775485246999027b3197955",
							TokenOut:          "0xe9e7cea3dedca5984780bafc599bd69add087d56",
							SwapAmount:        big.NewInt(1000000000000000000),
							CollectAmount:     big.NewInt(1000000000000000000),
							LimitReturnAmount: big.NewInt(0),
							Recipient:         "0x0000000000000000000000000000000000000000",
							Exchange:          valueobject.ExchangeJetSwap,
						},
					},
				},
			},
			expectedResult: "0x8af033fb000000000000000000000000d250af9a5c439294b1b4baba2ebe4308382d1a4100000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000000000064000000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d560000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000001f8da7cfc8bc5df7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000006399aa17000000000000000000000000000000000000000000000000000000000000036000000000000000000000000000000000000000000000000000000000000000010000000000000000000000007efaef62fddcca950418312c6c91aef321375a0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040d07961740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000007efaef62fddcca950418312c6c91aef321375a0000000000000000000000000055d398326f99059ff775485246999027b3197955000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			config := Config{
				ChainID:         56,
				ExecutorAddress: "0xd250aF9a5c439294b1B4baba2EBE4308382d1a41",
				RouterAddress:   "0xA270E7506dD1b6Fa8a4D1d14a53A6A80aFc4Fd4D",
			}
			encoder := NewEncoder(config)

			result, err := encoder.Encode(tc.encodingData)

			assert.Equal(t, tc.expectedResult, result)
			assert.ErrorIs(t, err, tc.expectedError)
		})
	}
}
