package scroll

import (
	"context"
	"math/big"
	"testing"

	"github.com/KyberNetwork/ethrpc"
	"github.com/KyberNetwork/kyberswap-dex-lib/pkg/util/bignumber"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/require"

	"github.com/KyberNetwork/router-service/internal/pkg/entity"
)

func TestFeeReader(t *testing.T) {
	t.Skip("Skipping test to avoid external network call")
	ethClient := ethrpc.New("https://scroll.drpc.org").
		SetMulticallContract(common.HexToAddress("0xcA11bde05977b3631167028862bE2a173976CA11"))
	reader := NewFeeReader(ethClient)
	feeParams, err := reader.Read(context.Background())
	require.NoError(t, err)
	require.IsType(t, &entity.ScrollL1FeeParams{}, feeParams)
	t.Logf("%+v\n", feeParams)
}

// Note: Scroll use signed fully RLP-encoded transaction to get the L1 fee.
func TestCalculateL1Fee(t *testing.T) {
	router := common.HexToAddress("0x6131b5fae19ea4f9d964eac0408e4408b66337b5")
	tests := []struct {
		name        string
		blockNumber *big.Int
		params      *entity.ScrollL1FeeParams
		tx          *types.Transaction
		want        *big.Int
		wantErr     bool
	}{
		{
			name:        "scroll legacy tx 0x4d2228afab4b9c9b0ede0e61147f0295775db4fea9faf7293464e5be088dd076",
			blockNumber: big.NewInt(13618855),
			params: &entity.ScrollL1FeeParams{
				L1BaseFee:      big.NewInt(741679039),
				L1CommitScalar: big.NewInt(454446963710),
				L1BlobBaseFee:  big.NewInt(21471499),
				L1BlobScalar:   big.NewInt(378247843),
			},
			tx: types.NewTx(&types.LegacyTx{
				Nonce:    0,
				GasPrice: big.NewInt(40000000),
				Gas:      310685,
				To:       &router,
				Value:    big.NewInt(0),
				Data:     common.FromHex("0xe21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000005e000000000000000000000000000000000000000000000000000000000000002e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000001f0a31698c4d065659b9bdc21b3610292a1c506000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000005ebf5379e6cd7435d49af1b61e5232c3712b167f0000000000000000000000000000000000000000000000000000000067bb7462000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000040301a40330000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000e366103a67127abd0aedda5021aaaa97dee0ef5d000000000000000000000000000000000000000000000000002f6479ee4ad95c00000000000000000000000001f0a31698c4d065659b9bdc21b3610292a1c50600000000000000000000000053000000000000000000000000000000000000040000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000060a4587899c58e7cc2e54303188f56acecaea477940000000000000000138800010000000000000000000000034a94dd3d0000000000000000003238c5fcd9ddce00000000000000000000000048b8419b2bc0fb63ee96e3a370e30b200cc2e67200000000000000000000000001f0a31698c4d065659b9bdc21b3610292a1c506000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000005ebf5379e6cd7435d49af1b61e5232c3712b167f000000000000000000000000000000000000000000000000002f6479ee4ad95c0000000000000000000000000000000000000000000000000031f87d5158c6ee0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000002f6479ee4ad95c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022f7b22536f75726365223a226c6c616d6173776170222c22416d6f756e74496e555344223a2233392e36393337323036393039363539222c22416d6f756e744f7574555344223a2233392e373033313435323534303833373635222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223134313336313731383337333832303933222c2254696d657374616d70223a313734303333373037342c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224f765a6d4e33367630336d7075376a6c47714c5a372f44464649516f42584f622b456c32666449747344714245736e3767727344496d6145534676727763644f4e52787735616772616b644c3754376f44365649487a7053374b374a4e65735a6e533378763867325743714261385230397864312b6142666b7153712f493035796c76786e51553044585145686a74786236516b6539433647746466506e486b494844392b644e4a6a684930532f41554946384932554f65474b5a323567413435483770694c7537517670376c794b6e6b496847446c6c5469626c4b54346b4b79507a622b6f3975454f575a692f5543376e6f6c504c564f45427a426656656376445576594e4f466e55677852304d70664a6648414d54524d2b436443712b582f5677784a366757426c76592f634a444a4c66642f2f3944746631617a79636d36334d4b4f554757587366746d774b424261467831413d3d227d7d0000000000000000000000000000000000"),
				V:        bignumber.NewBig("1068740"),
				R:        bignumber.NewBig("2207909658549512990157913083371726959088145166732440668222981669792764244286"),
				S:        bignumber.NewBig("45178881457812894723341826532911485534914176445943684131951259317695460939160"),
			}),
			want: big.NewInt(355376000021),
		},
		{
			name:        "scroll legacy tx 0xed7f656f3bfbe4019b87b11ad42330e2ec9c19576ebcdb6e94af2b4986ec633b",
			blockNumber: big.NewInt(13613986),
			params: &entity.ScrollL1FeeParams{
				L1BaseFee:      big.NewInt(758200322),
				L1CommitScalar: big.NewInt(454446963710),
				L1BlobBaseFee:  big.NewInt(17644451),
				L1BlobScalar:   big.NewInt(378247843),
			},
			tx: types.NewTx(&types.LegacyTx{
				Nonce:    0,
				GasPrice: big.NewInt(438723436),
				Gas:      547200,
				To:       &router,
				Value:    big.NewInt(0),
				Data:     common.FromHex("0xe21fd0e900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000054000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000000000000000480000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000006efdbff2a14a7c8e15944d1f4a48f9f95f663a4000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000003849df351fcbe5ce9eaacafa3fdec132e23e5b920000000000000000000000000000000000000000000000000000000067bb290600000000000000000000000000000000000000000000000000000000000003e00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000401b96cfd40000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000c00000000000000000000000003f38197ef860514d8b98e842d01bc8f163dddd9600000000000000000000000006efdbff2a14a7c8e15944d1f4a48f9f95f663a4000000000000000000000000f55bec9cafdbe8730f096aa55dad6d22d44099df0000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000030d400fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8360000000000000000000000000000000000000000000000000000000000000040a37225460000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000001000000000000000000000000009b5ca45571ae997c2cffcad5ed7bcc6f22a8cdd4000000000000000000000000f55bec9cafdbe8730f096aa55dad6d22d44099df00000000000000000000000053000000000000000000000000000000000000040000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca3000000000000000000000000000000000000000000000000000000000030d67f000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000002710000000000000000000000000000000000000000000000000000000000000003200000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000440a2562000000000000000000040e33d0eb8dc40000000000000000000000004f82e73edb06d29ff62c91ec8f5ff06571bdeb2900000000000000000000000006efdbff2a14a7c8e15944d1f4a48f9f95f663a4000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000000002000000000000000000000000003849df351fcbe5ce9eaacafa3fdec132e23e5b92000000000000000000000000000000000000000000000000000000000030d40000000000000000000000000000000000000000000000000000040902eac16a7e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000f4a1d7fdf4890be35e71f3e0bbc4a0ec377eca30000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000030d400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022f7b22536f75726365223a226b7962657273776170222c22416d6f756e74496e555344223a22332e313930303933353937323531333637222c22416d6f756e744f7574555344223a22332e32303230383735373034303037353536222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a2231313431353135363138303631373633222c2254696d657374616d70223a313734303331373738322c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224b45334a50317565494a59584a43356b6f764453584863666d4e4673743231325673693444665753336854754165576c576c344f6f61737a653236625161614d4b66624f796e6b526e31413442726c4a3566306161536b683975574366754553477a307358446e4b51654b6b752b37374e6862384a53664b6852476c6e7848666659513342544463456e73595a537461354c6b362b6632746e4454486d52634b686575597852585871312b5a61574f334151384475486c772b515779337a4364646732724546334641325a4d2b77434657386370675431443646493552736a346e4a2b6b774d69716561792f57776f4b7a6c4b4757597973575961394659454b5a6f634e636742337952722f33663766337377617677694e555a6947646a675048356766737663486c3067623236755949487a2f6754666f754e78454c5a4449515851744b616e6f736d705a504648796236473555513d3d227d7d0000000000000000000000000000000000"),
				V:        bignumber.NewBig("1068740"),
				R:        bignumber.NewBig("30837351940566036126119633648323681795510571934057795451754328877317951500370"),
				S:        bignumber.NewBig("35151152688182751974614668483729910287802845593546412812375825640474331539168"),
			}),
			want: big.NewInt(362394696837),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := CalcCurieL1Fee(tt.params, tt.tx)
			if tt.wantErr {
				require.Error(t, err)
				return
			}
			require.Equal(t, tt.want, got)
		})
	}
}
