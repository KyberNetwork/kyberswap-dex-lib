package optimism

import (
	"context"
	"math/big"
	"testing"

	"github.com/KyberNetwork/ethrpc"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/stretchr/testify/require"

	"github.com/KyberNetwork/router-service/internal/pkg/entity"
)

func TestFeeReader(t *testing.T) {
	t.Skip("Skipping test to avoid external network call")
	ethClient := ethrpc.New("https://blast.drpc.org").
		SetMulticallContract(common.HexToAddress("0xcA11bde05977b3631167028862bE2a173976CA11"))
	reader := NewFeeReader(ethClient)
	feeParams, err := reader.Read(context.Background())
	require.NoError(t, err)
	require.IsType(t, &entity.OptimismL1FeeParams{}, feeParams)
	t.Logf("%+v\n", feeParams)
}

func TestCalcFjordL1Fee(t *testing.T) {
	router := common.HexToAddress("0x6131b5fae19ea4f9d964eac0408e4408b66337b5")
	tests := []struct {
		name          string
		blockNumber   *big.Int
		params        *entity.OptimismL1FeeParams
		tx            *types.Transaction
		fastLZSize    uint64
		wantL1Fee     *big.Int
		wantL1GasUsed *big.Int
		wantErr       bool
	}{
		{
			name: "empty tx",
			params: &entity.OptimismL1FeeParams{
				L1BaseFee:           big.NewInt(1000 * 1e6),
				L1BlobBaseFee:       big.NewInt(10 * 1e6),
				L1BaseFeeScalar:     big.NewInt(2),
				L1BlobBaseFeeScalar: big.NewInt(3),
			},
			fastLZSize:    0,
			tx:            types.NewTx(&types.LegacyTx{}),
			wantL1Fee:     big.NewInt(3203000),
			wantL1GasUsed: big.NewInt(1600), // minimum gas used
		},
		{
			name:        "optimism legacy tx",
			blockNumber: big.NewInt(132334738),
			params: &entity.OptimismL1FeeParams{
				L1BaseFee:           big.NewInt(642567421),
				L1BlobBaseFee:       big.NewInt(361),
				L1BaseFeeScalar:     big.NewInt(5227),
				L1BlobBaseFeeScalar: big.NewInt(1014213),
			},
			tx: types.NewTx(&types.LegacyTx{
				Nonce:    2579,
				Gas:      935876,
				GasPrice: big.NewInt(1004400),
				To:       &router,
				Value:    big.NewInt(20000000),
				Data:     common.FromHex("0xe21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c7d3ab410d49b664d03fe5b1038852ac852b1b29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000013a010200000048000000ba12222222228d8ba445958a75a0704d566bf2c87ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d50000000000000000000046e06b5744e0000b0000004200c7d3ab410d49b664d03fe5b1038852ac852b1b29000000ee1bac98527a9fdd57fccf967817215b083ce1f00101ff120d460d67f1db5b71087bd404babb342b59870aeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0b2c639c533813f4aa9d7837caf62653d097ff855c051c0ff69b6f5fdd47e847eb370dd48726ec4d00000000000000000000000067bbb453000000540000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000370000000000000000000000000349853b4f82e73edb06d29ff62c91ec8f5ff06571bdeb29000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff850000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000005c051c0ff69b6f5fdd47e847eb370dd48726ec4d00000000000000000000000000000000000000000000000000470de4df82000000000000000000000000000000000000000000000000000000000000034550150000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000039041f1b366fe33f9a5a79de5120f2aee2577ebc00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000019000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002247b22536f75726365223a227261626279222c22416d6f756e74496e555344223a2235352e333233303336333230323333393936222c22416d6f756e744f7574555344223a2235352e313630343736333930353637383135222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a223535313439383833222c2254696d657374616d70223a313734303236383234332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a2257694472345954724c786f6b754e48492f42787a674772386152524a4364704632544a4a33656b464c7a336a51523676457935675779644d4a656d6b79592f524d527277644545625355485762673555302b504b7646355271674b45325363397131452f517936444a68686136663577574b56444e564367585a684f614f5a4e2f546444582f6c492b32444853483571322f50634f43355069446b786f513857724c66494a5977476974597a55492f7570774d51576e474f3473647a755633764b666e46664b32564e70755a4b384c5a4d74536d43584f6a68357662764b306449597246666a672f4234534c46794a3642686c6d43564a61395a7a79676945596b304f6e56446d6e32456d75614a614367305832414b4365364b423079704c6a574f64344239676f68524479533977326c54325948363151415576417538564f37396c6535787156796134726e6f61535866382f71513d3d227d7d00000000000000000000000000000000000000000000000000000000"),
			}),
			fastLZSize:    997,                     // round up ((13572 * 10^6 / 16) + 42_585_600) / 836500 - 68
			wantL1Fee:     big.NewInt(45991147045), // actual 45586568733
			wantL1GasUsed: big.NewInt(13572),
		},
		{
			name:        "optimism EIP-1559 tx 0x19d8acbc89e9fdf36e3d2725b6ebc0406acca2b112e3844e81b7c665c867e6a1",
			blockNumber: big.NewInt(132418566),
			params: &entity.OptimismL1FeeParams{
				L1BaseFee:           big.NewInt(5594863757),
				L1BlobBaseFee:       big.NewInt(61977654),
				L1BaseFeeScalar:     big.NewInt(5227),
				L1BlobBaseFeeScalar: big.NewInt(1014213),
			},
			tx: types.NewTx(&types.DynamicFeeTx{
				ChainID:   big.NewInt(8453),
				Nonce:     1365,
				GasTipCap: big.NewInt(1200000),
				GasFeeCap: big.NewInt(21462700),
				Gas:       2787396,
				To:        &router,
				Value:     big.NewInt(0),
				Data:      common.FromHex("0xe21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c7d3ab410d49b664d03fe5b1038852ac852b1b29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000007e000000000000000000000000000000000000000000000000000000000000003f905030000005100c7d3ab410d49b664d03fe5b1038852ac852b1b290000002b6b093a6c2aba51e078540ad89ed76a0c6716fa00000000000000000000000005f5e100010000000000000000000000000000000100eed0b40a0000004200c7d3ab410d49b664d03fe5b1038852ac852b1b29000000a7bb0d95c6ba0ed0aca70c503b34bc7108589a47010100000000000000000000000000000000000000000a0000004200c7d3ab410d49b664d03fe5b1038852ac852b1b29000000319c0dd36284ac24a6b2bee73929f699b9f48c38010100000000000000000000000000000000000000000a020000005100c7d3ab410d49b664d03fe5b1038852ac852b1b29000000ee1bac98527a9fdd57fccf967817215b083ce1f00000000000000000000000005f5e1000010000000000000000000000000000000100eed0b40a00000039000000ba12222222228d8ba445958a75a0704d566bf2c87ca75bdea9dede97f8b13c6641b768650cb837820002000000000000000000d501010b020000005100c7d3ab410d49b664d03fe5b1038852ac852b1b290000001737275d53a5ca5dac582a493aa32c85ba2cfad300000000000000000000000005f5e1000100000000000000000000000000000001000276a40a0000004200c7d3ab410d49b664d03fe5b1038852ac852b1b2900000003af20bdaaffb4cc0a521796a223f7d85e2aac31010100000000000000000000000000000000000000000a030000005100c7d3ab410d49b664d03fe5b1038852ac852b1b290000000d165f5bcc9cbb9cf75cef8b09cc77b1749a2a3300000000000000000000000005f5e1000100000000000000000000000000000000000000000a0000004200c7d3ab410d49b664d03fe5b1038852ac852b1b29000000a8a5356ee5d02fe33d72355e4f698782f8f199e8010100000000000000000000000000000000000000000a0000004200c7d3ab410d49b664d03fe5b1038852ac852b1b2900000085149247691df622eaf1a8bd0cafd40bc45154a9010100000000000000000000000000000000000000000a010000005100c7d3ab410d49b664d03fe5b1038852ac852b1b29000000478946bcd4a5a22b316470f5486fafb928c0ba2500000000000000000000000005f5e100010000000000000000000000000000000100eed0b40a0b2c639c533813f4aa9d7837caf62653d097ff85eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeefb55985878edea42d3e7aacc9da25b83ef2c13f300000000000000000000000067bcf6740000005400000000000000000000000000000000000000000000000000000000000000000000000000000000000000b4c83f1a2800000000000000000ac68484dce95e3e4f82e73edb06d29ff62c91ec8f5ff06571bdeb29000000000000000000000000000000000000000b2c639c533813f4aa9d7837caf62653d097ff85000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000fb55985878edea42d3e7aacc9da25b83ef2c13f300000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000ac3c256a66b2ec8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c7d3ab410d49b664d03fe5b1038852ac852b1b29000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000fb55985878edea42d3e7aacc9da25b83ef2c13f30000000000000000000000006131b5fae19ea4f9d964eac0408e4408b66337b500000000000000000000000000000000000000000000000000000000773594000000000000000000000000000000000000000000000000000000000067be4330000000000000000000000000000000000000000000000000000000000000001bfb2d4452d64c523ad3b9cc80e985c14e00f70795226565fe6a01013688c3425379568380c89f7172f0ac9fe718c84bc3587c3ed66851cd5ddf64060734aad1ba00000000000000000000000000000000000000000000000000000000000002327b22536f75726365223a226b7962657273776170222c22416d6f756e74496e555344223a22323030322e35383532393737373135373838222c22416d6f756e744f7574555344223a22313939382e37343833303232313533383734222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22373736343533363931393434383230323835222c2254696d657374616d70223a313734303433353930332c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a224171387a632b6279415433326b307a32672b7a7331332f6d372f6843507854575575786b687565784a53684e383449383177363943353734546f474132755952474f30707458766644534e685849724f55517579666e6e5a42347a723661474d45767063776a564f69306f597a537048634f594d435545436e762b594870622f635a6d436e796a4b36774963706238526b6f7078775974666a383548775552442b3735643232414b4c32423176557a587066694770513832304a4b7050536e674875785a46792f56526f747270734458527659336f546c7730775a5562717967345566546c764857356a4a49657970513755726e6a47364e5a3145493864426f44586a586a68536e45762b577662732b6f57775432464d672f4139654c545336473243546157364a783051754442784d6b612f784e7645755654774c436a385769733554367178675433693165473859374b31714d773d3d227d7d0000000000000000000000000000"),
			}),
			fastLZSize:    1379,
			wantL1Fee:     big.NewInt(623398860772), // actual 619846960057
			wantL1GasUsed: big.NewInt(18685),
		},
		{
			name:        "base EIP-1559 tx 0x2bfcde9a8d0cf60d00fb01eb9b90f90a3f34970fe95f4d42f7a41ce39cb6c758",
			blockNumber: big.NewInt(26821705),
			params: &entity.OptimismL1FeeParams{
				L1BaseFee:           big.NewInt(854959860),
				L1BlobBaseFee:       big.NewInt(31795876),
				L1BaseFeeScalar:     big.NewInt(2269),
				L1BlobBaseFeeScalar: big.NewInt(1055762),
			},
			tx: types.NewTx(&types.DynamicFeeTx{
				ChainID:   big.NewInt(8453),
				Nonce:     390350,
				GasTipCap: big.NewInt(1000),
				GasFeeCap: big.NewInt(5889057),
				Gas:       5000000,
				To:        &router,
				Value:     big.NewInt(20000000),
				Data:      common.FromHex("0xe21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c7d3ab410d49b664d03fe5b1038852ac852b1b29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000fc01010000005100c7d3ab410d49b664d03fe5b1038852ac852b1b290000003f0296bf652e19bca772ec3df08b32732f93014a0000000000000000016345785d8a000001ff120d460d67f1db5b71087bd404babb342b59870a42000000000000000000000000000000000000060b3e328455c4059eeb9e3f84b5543f74e24e7e1b955954d5ac0a61b0996cced9d43e2534b0d99f5e00000000000000000000000067bcea2200000054000000000000000000000000000000000000000000000000000000000000000000000000000000000000de68af5417a2000000000000000d41b0dd4ce59f43e64f82e73edb06d29ff62c91ec8f5ff06571bdeb290000000000000000000000000000000042000000000000000000000000000000000000060000000000000000000000000b3e328455c4059eeb9e3f84b5543f74e24e7e1b000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000955954d5ac0a61b0996cced9d43e2534b0d99f5e000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000d3ffe78d675611b08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c7d3ab410d49b664d03fe5b1038852ac852b1b290000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000016345785d8a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002297b22536f75726365223a22222c22416d6f756e74496e555344223a223236352e3139313837313238353731222c22416d6f756e744f7574555344223a223236342e3434363334333037373035303634222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22323434353431313939343838393330323335333636222c2254696d657374616d70223a313734303433323735342c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a22426b584876397977674b6f7946754476342b65726a566d4b5737715850496271326236486c4b776e2f44346e6a4d3463644c79436e43434b6132354851626f64344a6c672b5836763338504655717069666f4e546e2f5443694f4131304a43434d436b706b49544d7a4f314b52426765477a302f784f4a7845694c656d447a4b784c4a494d553778616e5a6f4875415863736338373971325a6f50546163396554415432326b56495344453637382f62433955544e50574b42484e4a55395841456d65507942616b474f465544477a47307634496b70616d6177743235485376444d594e3954744f477a7769632b3869563763765078676b58657858573562686a54443230354b6133505759395846576d37714c76542b72585236362f546a4336766c6b5056786d746c4e6a44652b7a307175366451576d5a3651504d4f7135504d51504338544a4f5647764e38304a62424f6d6f773d3d227d7d0000000000000000000000000000000000000000000000"),
			}),
			fastLZSize:    926,
			wantL1Fee:     big.NewInt(51508874046), // 50968433643
			wantL1GasUsed: big.NewInt(12622),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			require.Equal(t, tt.wantL1GasUsed, getL1GasUsed(estimatedDASizeScaled(big.NewInt(int64(tt.fastLZSize+68)))))
			gotL1Fee, err := CalcFjordL1Fee(tt.params, tt.tx)
			if tt.wantErr {
				require.Error(t, err)
				return
			}
			require.Equal(t, tt.wantL1Fee, gotL1Fee)
		})
	}
}

func TestL1EstimateFjordL1Fee(t *testing.T) {
	params := entity.OptimismL1FeeParams{
		L1BaseFee:           big.NewInt(2 * 1e6),
		L1BlobBaseFee:       big.NewInt(3 * 1e6),
		L1BaseFeeScalar:     big.NewInt(20),
		L1BlobBaseFeeScalar: big.NewInt(15),
	}
	fastLZSize := uint64(235)
	require.Equal(t, big.NewInt(105484), calcFjordL1Fee(&params, big.NewInt(int64(fastLZSize))))
	require.Equal(t, big.NewInt(2463), getL1GasUsed(estimatedDASizeScaled(big.NewInt(int64(fastLZSize)))))
}

func TestCalcEcotoneL1Fee(t *testing.T) {
	router := common.HexToAddress("0x6131b5fae19ea4f9d964eac0408e4408b66337b5")
	tests := []struct {
		name          string
		blockNumber   *big.Int
		params        *entity.OptimismL1FeeParams
		tx            *types.Transaction
		fastLZSize    uint64
		wantL1Fee     *big.Int
		wantL1GasUsed *big.Int
		wantErr       bool
	}{
		{
			name: "blast EIP-1559 tx 0xd8477a56c7a618a512aa5fbba9eddb5ca148a07b7a33ba6038d90ae248e4b0e7",
			params: &entity.OptimismL1FeeParams{
				L1BaseFee:           big.NewInt(723159749),
				L1BlobBaseFee:       big.NewInt(6112732),
				L1BaseFeeScalar:     big.NewInt(1100),
				L1BlobBaseFeeScalar: big.NewInt(810900),
			},
			tx: types.NewTx(&types.DynamicFeeTx{
				ChainID:   big.NewInt(81457),
				Nonce:     422,
				GasTipCap: big.NewInt(1),
				GasFeeCap: big.NewInt(634755),
				Gas:       356104,
				To:        &router,
				Value:     big.NewInt(100000000000000),
				Data:      common.FromHex("0xe21fd0e90000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c7d3ab410d49b664d03fe5b1038852ac852b1b29000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000003c000000000000000000000000000000000000000000000000000000000000000f3010100000048000000642c8d133c3846f53c7569545b2b95d8851cb25b00c7d3ab410d49b664d03fe5b1038852ac852b1b29000000000000000000005af3107a400000000002000003e80000003200eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeba91a7840315872c7e7f3a8b9110689016845ffb7185b9c0c4ffa4eec6ecf100c5bc3583065002ab00000000000000000000000067ba4c3300000054000000000000000000000000000000000000000000000000000000000000000000000000000000000000001fb9f08556000000000000000001e41af64e9554734f82e73edb06d29ff62c91ec8f5ff06571bdeb2900000000000000000000000000000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000ba91a7840315872c7e7f3a8b9110689016845ffb0000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000007185b9c0c4ffa4eec6ecf100c5bc3583065002ab00000000000000000000000000000000000000000000000000005af3107a400000000000000000000000000000000000000000000000000001e39f07fb0c79fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002337b22536f75726365223a226b7962657273776170222c22416d6f756e74496e555344223a22302e3237363633323938363431383039303033222c22416d6f756e744f7574555344223a2233372e343237373537383539313735363335222c22526566657272616c223a22222c22466c616773223a302c22416d6f756e744f7574223a22313336323633353333393130363433383236222c2254696d657374616d70223a313734303236313235312c22496e74656772697479496e666f223a7b224b65794944223a2231222c225369676e6174757265223a225a796a39735430674a6954482b6f435a52506345565979354247705847784b696867347936523362536d4a7251526562447349574d6e533063306d62702b74467732393171747350526c56594e766e2b686c412f52665632746933734a6d6576463532386856744f392f7634544e514477794a52376a3766644a424e376f6e5253527a334a744661634e634b76336b3831584b58486e62355a515966767848626463784b702b306632644f453965736244474561516a5a7a4d56416652595868307652676135766b346c7644682b492f7952324b2f4e6b346849482f4234674f304146322f616f4b52507275366742465a754d764f515373555a6b572f7134732f30744754367345424a2f6f4a4c523476514459626e7a3765365845355471526851413968525a3042534854314d685565383979787545545761644c724d3776746c4d54756730775661686757426b46674445534d513d3d227d7d00000000000000000000000000"),
			}),
			wantL1Fee:     big.NewInt(20275194364), // actual 20151403382
			wantL1GasUsed: big.NewInt(18232),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotL1Fee, err := CalcEcotoneL1Fee(tt.params, tt.tx)
			if tt.wantErr {
				require.Error(t, err)
				return
			}
			require.Equal(t, tt.wantL1Fee, gotL1Fee)
		})
	}
}

func TestEstimateL1FeeEcotone(t *testing.T) {
	tests := []struct {
		name      string
		params    entity.OptimismL1FeeParams
		l1GasUsed *big.Int
		wantL1Fee *big.Int
		wantErr   bool
	}{
		{
			name: "blast tx 0xd8477a56c7a618a512aa5fbba9eddb5ca148a07b7a33ba6038d90ae248e4b0e7",
			params: entity.OptimismL1FeeParams{
				L1BaseFee:           big.NewInt(723159749),
				L1BlobBaseFee:       big.NewInt(6112732),
				L1BaseFeeScalar:     big.NewInt(1100),
				L1BlobBaseFeeScalar: big.NewInt(810900),
			},
			l1GasUsed: big.NewInt(18232),
			wantL1Fee: big.NewInt(20151403382),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			gotL1Fee := calcEcotoneL1Fee(&tt.params, tt.l1GasUsed)
			require.Equal(t, tt.wantL1Fee, gotL1Fee)
		})
	}
}
